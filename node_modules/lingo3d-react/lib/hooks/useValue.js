import { useMemoOnce } from "@lincode/hooks";
import store from "@lincode/reactivity";
import { useLayoutEffect } from "react";
export default (o) => {
    const [setValue, getValue] = useMemoOnce(() => {
        var _a, _b, _c;
        const value = typeof (o === null || o === void 0 ? void 0 : o.from) === "function" ? o.from() : (_a = o === null || o === void 0 ? void 0 : o.from) !== null && _a !== void 0 ? _a : 0;
        return store((_c = (_b = o === null || o === void 0 ? void 0 : o.map) === null || _b === void 0 ? void 0 : _b.call(o, value)) !== null && _c !== void 0 ? _c : value);
    });
    useLayoutEffect(() => {
        if (typeof (o === null || o === void 0 ? void 0 : o.from) !== "function")
            return;
        const { map } = o;
        if (map) {
            const handle = o.from(v => setValue(map(v)));
            return () => {
                handle.cancel();
            };
        }
        const handle = o.from(setValue);
        return () => {
            handle.cancel();
        };
    }, []);
    useLayoutEffect(() => {
        const step = o === null || o === void 0 ? void 0 : o.step;
        if (!step)
            return;
        const handle = getValue(step);
        return () => {
            handle.cancel();
        };
    }, []);
    return [getValue, setValue];
};
