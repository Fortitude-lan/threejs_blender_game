import React, { useContext, useLayoutEffect } from "react";
import useDiffProps from "./useDiffProps";
import { useMemoOnce } from "@lincode/hooks";
import { forceGet } from "@lincode/utils";
import { isGlobalState } from "@lincode/reactivity";
import { SceneContext } from "../components/display/Scene";
export const ParentContext = React.createContext(undefined);
const handleStore = new WeakMap();
export default (p, ref, ManagerClass) => {
    var _a;
    const { children, ...props } = p;
    const parent = useContext(ParentContext);
    const scene = useContext(SceneContext);
    const manager = useMemoOnce(() => {
        const manager = new ManagerClass();
        parent === null || parent === void 0 ? void 0 : parent.append(manager);
        return manager;
    });
    const changed = useDiffProps(props);
    for (const [key, value] of changed) {
        const handleMap = forceGet(handleStore, manager, () => new Map());
        (_a = handleMap.get(key)) === null || _a === void 0 ? void 0 : _a.cancel();
        if (isGlobalState(value)) {
            handleMap.set(key, value(v => manager[key] = v));
            continue;
        }
        else if (key === "physics" && scene) {
            //@ts-ignore
            handleMap.set(key, scene.loadedResolvable.then(() => manager.physics = value));
            continue;
        }
        manager[key] = value;
    }
    useLayoutEffect(() => {
        return () => {
            const handleMap = handleStore.get(manager);
            if (handleMap)
                for (const handle of handleMap.values())
                    handle.cancel();
            manager.dispose();
        };
    }, []);
    useLayoutEffect(() => {
        if (!ref)
            return;
        if (typeof ref === "function")
            ref(manager);
        else
            ref.current = manager;
    }, [ref]);
    return manager;
};
