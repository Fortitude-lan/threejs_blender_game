import React, { useContext, useLayoutEffect } from "react";
import { ParentContext } from "../../hooks/useManager";
import { Resolvable } from "@lincode/promiselikes";
import useDiffProps from "../../hooks/useDiffProps";
import { useMemoOnce } from "@lincode/hooks";
const FindAll = React.forwardRef((props, ref) => {
    const parent = useContext(ParentContext);
    const found = useMemoOnce(() => new Resolvable());
    useLayoutEffect(() => {
        if (!parent || !props.name) {
            found.resolve([]);
            return;
        }
        if ("loadedResolvable" in parent) {
            //@ts-ignore
            const handle = parent.loadedResolvable.then(() => found.resolve(parent.findAll(props.name)));
            return () => {
                handle.cancel();
            };
        }
        found.resolve(parent.findAll(props.name));
    }, []);
    const changed = useDiffProps(props);
    found.then(f => {
        for (const [key, value] of changed)
            for (const child of f)
                child[key] = value;
    });
    return null;
});
export default FindAll;
