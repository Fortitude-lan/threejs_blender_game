{
  "version": 3,
  "sources": ["../three/examples/jsm/nodes/core/Node.js", "../three/examples/jsm/nodes/core/TempNode.js", "../three/examples/jsm/nodes/core/InputNode.js", "../three/examples/jsm/nodes/core/ConstNode.js", "../three/examples/jsm/nodes/core/VarNode.js", "../three/examples/jsm/nodes/core/StructNode.js", "../three/examples/jsm/nodes/core/AttributeNode.js", "../three/examples/jsm/nodes/core/NodeLib.js", "../three/examples/jsm/nodes/core/FunctionNode.js", "../three/examples/jsm/nodes/core/ExpressionNode.js", "../three/examples/jsm/nodes/core/FunctionCallNode.js", "../three/examples/jsm/nodes/core/NodeUtils.js", "../three/examples/jsm/nodes/core/NodeFrame.js", "../three/examples/jsm/nodes/core/NodeUniform.js", "../three/examples/jsm/nodes/inputs/Vector2Node.js", "../three/examples/jsm/nodes/inputs/Vector3Node.js", "../three/examples/jsm/nodes/inputs/Vector4Node.js", "../three/examples/jsm/nodes/accessors/UVNode.js", "../three/examples/jsm/nodes/utils/ColorSpaceNode.js", "../three/examples/jsm/nodes/inputs/TextureNode.js", "../three/examples/jsm/nodes/accessors/PositionNode.js", "../three/examples/jsm/nodes/accessors/NormalNode.js", "../three/examples/jsm/nodes/accessors/ReflectNode.js", "../three/examples/jsm/nodes/inputs/CubeTextureNode.js", "../three/examples/jsm/nodes/inputs/FloatNode.js", "../three/examples/jsm/nodes/math/OperatorNode.js", "../three/examples/jsm/nodes/math/MathNode.js", "../three/examples/jsm/nodes/misc/TextureCubeUVNode.js", "../three/examples/jsm/nodes/misc/TextureCubeNode.js", "../three/examples/jsm/nodes/core/NodeBuilder.js", "../three/examples/jsm/nodes/inputs/BoolNode.js", "../three/examples/jsm/nodes/inputs/IntNode.js", "../three/examples/jsm/nodes/inputs/ColorNode.js", "../three/examples/jsm/nodes/inputs/Matrix3Node.js", "../three/examples/jsm/nodes/inputs/Matrix4Node.js", "../three/examples/jsm/nodes/inputs/ScreenNode.js", "../three/examples/jsm/nodes/inputs/ReflectorNode.js", "../three/examples/jsm/nodes/inputs/PropertyNode.js", "../three/examples/jsm/nodes/materials/nodes/RawNode.js", "../three/examples/jsm/nodes/materials/NodeMaterial.js", "../three/examples/jsm/nodes/inputs/RTTNode.js", "../three/examples/jsm/nodes/accessors/ColorsNode.js", "../three/examples/jsm/nodes/accessors/CameraNode.js", "../three/examples/jsm/nodes/accessors/LightNode.js", "../three/examples/jsm/nodes/accessors/ResolutionNode.js", "../three/examples/jsm/nodes/accessors/ScreenUVNode.js", "../three/examples/jsm/nodes/math/CondNode.js", "../three/examples/jsm/nodes/procedural/Noise2DNode.js", "../three/examples/jsm/nodes/procedural/Noise3DNode.js", "../three/examples/jsm/nodes/procedural/CheckerNode.js", "../three/examples/jsm/nodes/procedural/Fractal3DNode.js", "../three/examples/jsm/nodes/misc/NormalMapNode.js", "../three/examples/jsm/nodes/misc/BumpMapNode.js", "../three/examples/jsm/nodes/utils/BypassNode.js", "../three/examples/jsm/nodes/utils/JoinNode.js", "../three/examples/jsm/nodes/utils/SwitchNode.js", "../three/examples/jsm/nodes/utils/RemapNode.js", "../three/examples/jsm/nodes/utils/TimerNode.js", "../three/examples/jsm/nodes/utils/VelocityNode.js", "../three/examples/jsm/nodes/utils/UVTransformNode.js", "../three/examples/jsm/nodes/utils/MaxMIPLevelNode.js", "../three/examples/jsm/nodes/utils/SpecularMIPLevelNode.js", "../three/examples/jsm/nodes/utils/SubSlotNode.js", "../three/examples/jsm/nodes/effects/BlurNode.js", "../three/examples/jsm/nodes/effects/LuminanceNode.js", "../three/examples/jsm/nodes/effects/ColorAdjustmentNode.js", "../three/examples/jsm/nodes/materials/nodes/BasicNode.js", "../three/examples/jsm/nodes/materials/nodes/SpriteNode.js", "../three/examples/jsm/nodes/materials/nodes/PhongNode.js", "../three/examples/jsm/nodes/materials/nodes/StandardNode.js", "../three/examples/jsm/nodes/materials/nodes/MeshStandardNode.js", "../three/examples/jsm/nodes/materials/BasicNodeMaterial.js", "../three/examples/jsm/nodes/materials/SpriteNodeMaterial.js", "../three/examples/jsm/nodes/materials/PhongNodeMaterial.js", "../three/examples/jsm/nodes/materials/StandardNodeMaterial.js", "../three/examples/jsm/nodes/materials/MeshStandardNodeMaterial.js"],
  "sourcesContent": ["import { MathUtils } from 'three';\n\nclass Node {\n\n\tconstructor( type ) {\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.type = type;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tanalyze( builder, settings = {} ) {\n\n\t\tbuilder.analyzing = true;\n\n\t\tthis.build( builder.addFlow( settings.slot, settings.cache, settings.context ), 'v4' );\n\n\t\tbuilder.clearVertexNodeCode();\n\t\tbuilder.clearFragmentNodeCode();\n\n\t\tbuilder.removeFlow();\n\n\t\tbuilder.analyzing = false;\n\n\t}\n\n\tanalyzeAndFlow( builder, output, settings = {} ) {\n\n\t\tthis.analyze( builder, settings );\n\n\t\treturn this.flow( builder, output, settings );\n\n\t}\n\n\tflow( builder, output, settings = {} ) {\n\n\t\tbuilder.addFlow( settings.slot, settings.cache, settings.context );\n\n\t\tconst flow = {};\n\t\tflow.result = this.build( builder, output );\n\t\tflow.code = builder.clearNodeCode();\n\t\tflow.extra = builder.context.extra;\n\n\t\tbuilder.removeFlow();\n\n\t\treturn flow;\n\n\t}\n\n\tbuild( builder, output, uuid ) {\n\n\t\toutput = output || this.getType( builder, output );\n\n\t\tconst data = builder.getNodeData( uuid || this );\n\n\t\tif ( builder.analyzing ) {\n\n\t\t\tthis.appendDepsNode( builder, data, output );\n\n\t\t}\n\n\t\tif ( builder.nodes.indexOf( this ) === - 1 ) {\n\n\t\t\tbuilder.nodes.push( this );\n\n\t\t}\n\n\t\tif ( this.updateFrame !== undefined && builder.updaters.indexOf( this ) === - 1 ) {\n\n\t\t\tbuilder.updaters.push( this );\n\n\t\t}\n\n\t\treturn this.generate( builder, output, uuid );\n\n\t}\n\n\tgenerate( /* builder, output, uuid, type, ns */ ) {\n\n\t\t// This method needs to be implemented in subclasses\n\n\t}\n\n\tgetHash() {\n\n\t\tlet hash = '{';\n\t\tlet prop, obj;\n\n\t\tfor ( prop in this ) {\n\n\t\t\tobj = this[ prop ];\n\n\t\t\tif ( obj instanceof Node ) {\n\n\t\t\t\thash += '\"' + prop + '\":' + obj.getHash() + ',';\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.hashProperties ) {\n\n\t\t\tfor ( let i = 0; i < this.hashProperties.length; i ++ ) {\n\n\t\t\t\tprop = this.hashProperties[ i ];\n\t\t\t\tobj = this[ prop ];\n\n\t\t\t\thash += '\"' + prop + '\":\"' + String( obj ) + '\",';\n\n\t\t\t}\n\n\t\t}\n\n\t\thash += '\"id\":\"' + this.uuid + '\"}';\n\n\t\treturn hash;\n\n\t}\n\n\tappendDepsNode( builder, data, output ) {\n\n\t\tdata.deps = ( data.deps || 0 ) + 1;\n\n\t\tconst outputLen = builder.getTypeLength( output );\n\n\t\tif ( outputLen > ( data.outputMax || 0 ) || this.getType( builder, output ) ) {\n\n\t\t\tdata.outputMax = outputLen;\n\t\t\tdata.output = output;\n\n\t\t}\n\n\t}\n\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\tgetName( /* builder */ ) {\n\n\t\treturn this.name;\n\n\t}\n\n\tgetType( builder, output ) {\n\n\t\treturn output === 'sampler2D' || output === 'samplerCube' ? output : this.type;\n\n\t}\n\n\tgetJSONNode( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.nodes[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.nodes[ this.uuid ];\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tif ( source.name !== undefined ) this.name = source.name;\n\n\t\tif ( source.userData !== undefined ) this.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tcreateJSONNode( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst data = {};\n\n\t\tif ( typeof this.nodeType !== 'string' ) throw new Error( 'Node does not allow serialization.' );\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.nodeType = this.nodeType;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.nodes[ this.uuid ] = data;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\treturn this.getJSONNode( meta ) || this.createJSONNode( meta );\n\n\t}\n\n}\n\nNode.prototype.isNode = true;\nNode.prototype.hashProperties = undefined;\n\nexport { Node };\n", "import { MathUtils } from 'three';\nimport { Node } from './Node.js';\n\nclass TempNode extends Node {\n\n\tconstructor( type, params = {} ) {\n\n\t\tsuper( type );\n\n\t\tthis.shared = params.shared !== undefined ? params.shared : true;\n\t\tthis.unique = params.unique !== undefined ? params.unique : false;\n\n\t}\n\n\tbuild( builder, output, uuid, ns ) {\n\n\t\toutput = output || this.getType( builder );\n\n\t\tif ( this.getShared( builder, output ) ) {\n\n\t\t\tconst isUnique = this.getUnique( builder, output );\n\n\t\t\tif ( isUnique && this.constructor.uuid === undefined ) {\n\n\t\t\t\tthis.constructor.uuid = MathUtils.generateUUID();\n\n\t\t\t}\n\n\t\t\tuuid = builder.getUuid( uuid || this.getUuid(), ! isUnique );\n\n\t\t\tconst data = builder.getNodeData( uuid ),\n\t\t\t\ttype = data.output || this.getType( builder );\n\n\t\t\tif ( builder.analyzing ) {\n\n\t\t\t\tif ( ( data.deps || 0 ) > 0 || this.getLabel() ) {\n\n\t\t\t\t\tthis.appendDepsNode( builder, data, output );\n\n\t\t\t\t\treturn this.generate( builder, output, uuid );\n\n\t\t\t\t}\n\n\t\t\t\treturn super.build( builder, output, uuid );\n\n\t\t\t} else if ( isUnique ) {\n\n\t\t\t\tdata.name = data.name || super.build( builder, output, uuid );\n\n\t\t\t\treturn data.name;\n\n\t\t\t} else if ( ! this.getLabel() && ( ! this.getShared( builder, type ) || ( builder.context.ignoreCache || data.deps === 1 ) ) ) {\n\n\t\t\t\treturn super.build( builder, output, uuid );\n\n\t\t\t}\n\n\t\t\tuuid = this.getUuid( false );\n\n\t\t\tlet name = this.getTemp( builder, uuid );\n\n\t\t\tif ( name ) {\n\n\t\t\t\treturn builder.format( name, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tname = TempNode.prototype.generate.call( this, builder, output, uuid, data.output, ns );\n\n\t\t\t\tconst code = this.generate( builder, type, uuid );\n\n\t\t\t\tbuilder.addNodeCode( name + ' = ' + code + ';' );\n\n\t\t\t\treturn builder.format( name, type, output );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.build( builder, output, uuid );\n\n\t}\n\n\tgetShared( builder, output ) {\n\n\t\treturn output !== 'sampler2D' && output !== 'samplerCube' && this.shared;\n\n\t}\n\n\tgetUnique( /* builder, output */ ) {\n\n\t\treturn this.unique;\n\n\t}\n\n\tsetLabel( name ) {\n\n\t\tthis.label = name;\n\n\t\treturn this;\n\n\t}\n\n\tgetLabel( /* builder */ ) {\n\n\t\treturn this.label;\n\n\t}\n\n\tgetUuid( unique ) {\n\n\t\tlet uuid = unique || unique == undefined ? this.constructor.uuid || this.uuid : this.uuid;\n\n\t\tif ( typeof this.scope === 'string' ) uuid = this.scope + '-' + uuid;\n\n\t\treturn uuid;\n\n\t}\n\n\tgetTemp( builder, uuid ) {\n\n\t\tuuid = uuid || this.uuid;\n\n\t\tconst tempVar = builder.getVars()[ uuid ];\n\n\t\treturn tempVar ? tempVar.name : undefined;\n\n\t}\n\n\tgenerate( builder, output, uuid, type, ns ) {\n\n\t\tif ( ! this.getShared( builder, output ) ) console.error( 'THREE.TempNode is not shared!' );\n\n\t\tuuid = uuid || this.uuid;\n\n\t\treturn builder.getTempVar( uuid, type || this.getType( builder ), ns, this.getLabel() ).name;\n\n\t}\n\n}\n\nexport { TempNode };\n", "import { TempNode } from './TempNode.js';\n\nclass InputNode extends TempNode {\n\n\tconstructor( type, params ) {\n\n\t\tparams = params || {};\n\t\tparams.shared = params.shared !== undefined ? params.shared : false;\n\n\t\tsuper( type, params );\n\n\t\tthis.readonly = false;\n\n\t}\n\n\tsetReadonly( value ) {\n\n\t\tthis.readonly = value;\n\n\t\tthis.hashProperties = this.readonly ? [ 'value' ] : undefined;\n\n\t\treturn this;\n\n\t}\n\n\tgetReadonly( /* builder */ ) {\n\n\t\treturn this.readonly;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.readonly !== undefined ) this.readonly = source.readonly;\n\n\t\treturn this;\n\n\t}\n\n\tcreateJSONNode( meta ) {\n\n\t\tconst data = super.createJSONNode( meta );\n\n\t\tif ( this.readonly === true ) data.readonly = this.readonly;\n\n\t\treturn data;\n\n\t}\n\n\tgenerate( builder, output, uuid, type, ns, needsUpdate ) {\n\n\t\tuuid = builder.getUuid( uuid || this.getUuid() );\n\t\ttype = type || this.getType( builder );\n\n\t\tconst data = builder.getNodeData( uuid ),\n\t\t\treadonly = this.getReadonly( builder ) && this.generateReadonly !== undefined;\n\n\t\tif ( readonly ) {\n\n\t\t\treturn this.generateReadonly( builder, output, uuid, type, ns, needsUpdate );\n\n\t\t} else {\n\n\t\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\t\tif ( ! data.vertex ) {\n\n\t\t\t\t\tdata.vertex = builder.createVertexUniform( type, this, ns, needsUpdate, this.getLabel() );\n\n\t\t\t\t}\n\n\t\t\t\treturn builder.format( data.vertex.name, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tif ( ! data.fragment ) {\n\n\t\t\t\t\tdata.fragment = builder.createFragmentUniform( type, this, ns, needsUpdate, this.getLabel() );\n\n\t\t\t\t}\n\n\t\t\t\treturn builder.format( data.fragment.name, type, output );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { InputNode };\n", "import { TempNode } from './TempNode.js';\n\nconst declarationRegexp = /^([a-z_0-9]+)\\s([a-z_0-9]+)\\s?\\=?\\s?(.*?)(\\;|$)/i;\n\nclass ConstNode extends TempNode {\n\n\tconstructor( src, useDefine ) {\n\n\t\tsuper();\n\n\t\tthis.parse( src || ConstNode.PI, useDefine );\n\n\t}\n\n\tgetType( builder ) {\n\n\t\treturn builder.getTypeByFormat( this.type );\n\n\t}\n\n\tparse( src, useDefine ) {\n\n\t\tthis.src = src || '';\n\n\t\tlet name, type, value = '';\n\n\t\tconst match = this.src.match( declarationRegexp );\n\n\t\tthis.useDefine = useDefine || this.src.charAt( 0 ) === '#';\n\n\t\tif ( match && match.length > 1 ) {\n\n\t\t\ttype = match[ 1 ];\n\t\t\tname = match[ 2 ];\n\t\t\tvalue = match[ 3 ];\n\n\t\t} else {\n\n\t\t\tname = this.src;\n\t\t\ttype = 'f';\n\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.value = value;\n\n\t}\n\n\tbuild( builder, output ) {\n\n\t\tif ( output === 'source' ) {\n\n\t\t\tif ( this.value ) {\n\n\t\t\t\tif ( this.useDefine ) {\n\n\t\t\t\t\treturn '#define ' + this.name + ' ' + this.value;\n\n\t\t\t\t}\n\n\t\t\t\treturn 'const ' + this.type + ' ' + this.name + ' = ' + this.value + ';';\n\n\t\t\t} else if ( this.useDefine ) {\n\n\t\t\t\treturn this.src;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbuilder.include( this );\n\n\t\t\treturn builder.format( this.name, this.getType( builder ), output );\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\treturn builder.format( this.name, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parse( source.src, source.useDefine );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.src = this.src;\n\n\t\t\tif ( data.useDefine === true ) data.useDefine = true;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nConstNode.prototype.nodeType = 'Const';\n\nConstNode.PI = 'PI';\nConstNode.PI2 = 'PI2';\nConstNode.RECIPROCAL_PI = 'RECIPROCAL_PI';\nConstNode.RECIPROCAL_PI2 = 'RECIPROCAL_PI2';\nConstNode.LOG2 = 'LOG2';\nConstNode.EPSILON = 'EPSILON';\n\nexport { ConstNode };\n", "import { Node } from './Node.js';\n\nclass VarNode extends Node {\n\n\tconstructor( type, value ) {\n\n\t\tsuper( type );\n\n\t\tthis.value = value;\n\n\t}\n\n\tgetType( builder ) {\n\n\t\treturn builder.getTypeByFormat( this.type );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst varying = builder.getVar( this.uuid, this.type );\n\n\t\tif ( this.value && builder.isShader( 'vertex' ) ) {\n\n\t\t\tbuilder.addNodeCode( varying.name + ' = ' + this.value.build( builder, this.getType( builder ) ) + ';' );\n\n\t\t}\n\n\t\treturn builder.format( varying.name, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.type = source.type;\n\t\tthis.value = source.value;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.value ) data.value = this.value.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nVarNode.prototype.nodeType = 'Var';\n\nexport { VarNode };\n", "import { TempNode } from './TempNode.js';\n\nconst declarationRegexp = /^struct\\s*([a-z_0-9]+)\\s*{\\s*((.|\\n)*?)}/img,\n\tpropertiesRegexp = /\\s*(\\w*?)\\s*(\\w*?)(\\=|\\;)/img;\n\nclass StructNode extends TempNode {\n\n\tconstructor( src ) {\n\n\t\tsuper();\n\n\t\tthis.parse( src );\n\n\t}\n\n\tgetType( builder ) {\n\n\t\treturn builder.getTypeByFormat( this.name );\n\n\t}\n\n\tgetInputByName( name ) {\n\n\t\tlet i = this.inputs.length;\n\n\t\twhile ( i -- ) {\n\n\t\t\tif ( this.inputs[ i ].name === name ) {\n\n\t\t\t\treturn this.inputs[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( output === 'source' ) {\n\n\t\t\treturn this.src + ';';\n\n\t\t} else {\n\n\t\t\treturn builder.format( '( ' + this.src + ' )', this.getType( builder ), output );\n\n\t\t}\n\n\t}\n\n\tparse( src = '' ) {\n\n\t\tthis.src = src;\n\n\t\tthis.inputs = [];\n\n\t\tconst declaration = declarationRegexp.exec( this.src );\n\n\t\tif ( declaration ) {\n\n\t\t\tconst properties = declaration[ 2 ];\n\t\t\tlet match;\n\n\t\t\twhile ( match = propertiesRegexp.exec( properties ) ) {\n\n\t\t\t\tthis.inputs.push( {\n\t\t\t\t\ttype: match[ 1 ],\n\t\t\t\t\tname: match[ 2 ]\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tthis.name = declaration[ 1 ];\n\n\t\t} else {\n\n\t\t\tthis.name = '';\n\n\t\t}\n\n\t\tthis.type = this.name;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.src = this.src;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nStructNode.prototype.nodeType = 'Struct';\n\nexport { StructNode };\n", "import { Node } from './Node.js';\n\nclass AttributeNode extends Node {\n\n\tconstructor( name, type ) {\n\n\t\tsuper( type );\n\n\t\tthis.name = name;\n\n\t}\n\n\tgetAttributeType( builder ) {\n\n\t\treturn typeof this.type === 'number' ? builder.getConstructorFromLength( this.type ) : this.type;\n\n\t}\n\n\tgetType( builder ) {\n\n\t\tconst type = this.getAttributeType( builder );\n\n\t\treturn builder.getTypeByFormat( type );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getAttributeType( builder );\n\n\t\tconst attribute = builder.getAttribute( this.name, type ),\n\t\t\tname = builder.isShader( 'vertex' ) ? this.name : attribute.varying.name;\n\n\t\treturn builder.format( name, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.type = source.type;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.type = this.type;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nAttributeNode.prototype.nodeType = 'Attribute';\n\nexport { AttributeNode };\n", "const NodeLib = {\n\n\tnodes: {},\n\tkeywords: {},\n\n\tadd: function ( node ) {\n\n\t\tthis.nodes[ node.name ] = node;\n\n\t},\n\n\taddKeyword: function ( name, callback, cache ) {\n\n\t\tcache = cache !== undefined ? cache : true;\n\n\t\tthis.keywords[ name ] = { callback: callback, cache: cache };\n\n\t},\n\n\tremove: function ( node ) {\n\n\t\tdelete this.nodes[ node.name ];\n\n\t},\n\n\tremoveKeyword: function ( name ) {\n\n\t\tdelete this.keywords[ name ];\n\n\t},\n\n\tget: function ( name ) {\n\n\t\treturn this.nodes[ name ];\n\n\t},\n\n\tgetKeyword: function ( name, builder ) {\n\n\t\treturn this.keywords[ name ].callback.call( this, builder );\n\n\t},\n\n\tgetKeywordData: function ( name ) {\n\n\t\treturn this.keywords[ name ];\n\n\t},\n\n\tcontains: function ( name ) {\n\n\t\treturn this.nodes[ name ] !== undefined;\n\n\t},\n\n\tcontainsKeyword: function ( name ) {\n\n\t\treturn this.keywords[ name ] !== undefined;\n\n\t}\n\n};\n\nexport { NodeLib };\n", "import { TempNode } from './TempNode.js';\nimport { NodeLib } from './NodeLib.js';\n\nconst declarationRegexp = /^\\s*([a-z_0-9]+)\\s+([a-z_0-9]+)\\s*\\(([\\s\\S]*?)\\)/i,\n\tpropertiesRegexp = /[a-z_0-9]+/ig;\n\nclass FunctionNode extends TempNode {\n\n\tconstructor( src, includes, extensions, keywords, type ) {\n\n\t\tsuper( type );\n\n\t\tthis.isMethod = type === undefined;\n\t\tthis.isInterface = false;\n\n\t\tthis.parse( src, includes, extensions, keywords );\n\n\t}\n\n\tgetShared( /* builder, output */ ) {\n\n\t\treturn ! this.isMethod;\n\n\t}\n\n\tgetType( builder ) {\n\n\t\treturn builder.getTypeByFormat( this.type );\n\n\t}\n\n\tgetInputByName( name ) {\n\n\t\tlet i = this.inputs.length;\n\n\t\twhile ( i -- ) {\n\n\t\t\tif ( this.inputs[ i ].name === name ) {\n\n\t\t\t\treturn this.inputs[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetIncludeByName( name ) {\n\n\t\tlet i = this.includes.length;\n\n\t\twhile ( i -- ) {\n\n\t\t\tif ( this.includes[ i ].name === name ) {\n\n\t\t\t\treturn this.includes[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet match, offset = 0, src = this.src;\n\n\t\tfor ( let i = 0; i < this.includes.length; i ++ ) {\n\n\t\t\tbuilder.include( this.includes[ i ], this );\n\n\t\t}\n\n\t\tfor ( const ext in this.extensions ) {\n\n\t\t\tbuilder.extensions[ ext ] = true;\n\n\t\t}\n\n\t\tconst matches = [];\n\n\t\twhile ( match = propertiesRegexp.exec( this.src ) ) matches.push( match );\n\n\t\tfor ( let i = 0; i < matches.length; i ++ ) {\n\n\t\t\tconst match = matches[ i ];\n\n\t\t\tconst prop = match[ 0 ],\n\t\t\t\tisGlobal = this.isMethod ? ! this.getInputByName( prop ) : true;\n\n\t\t\tlet reference = prop;\n\n\t\t\tif ( this.keywords[ prop ] || ( this.useKeywords && isGlobal && NodeLib.containsKeyword( prop ) ) ) {\n\n\t\t\t\tlet node = this.keywords[ prop ];\n\n\t\t\t\tif ( ! node ) {\n\n\t\t\t\t\tconst keyword = NodeLib.getKeywordData( prop );\n\n\t\t\t\t\tif ( keyword.cache ) node = builder.keywords[ prop ];\n\n\t\t\t\t\tnode = node || NodeLib.getKeyword( prop, builder );\n\n\t\t\t\t\tif ( keyword.cache ) builder.keywords[ prop ] = node;\n\n\t\t\t\t}\n\n\t\t\t\treference = node.build( builder );\n\n\t\t\t}\n\n\t\t\tif ( prop !== reference ) {\n\n\t\t\t\tsrc = src.substring( 0, match.index + offset ) + reference + src.substring( match.index + prop.length + offset );\n\n\t\t\t\toffset += reference.length - prop.length;\n\n\t\t\t}\n\n\t\t\tif ( this.getIncludeByName( reference ) === undefined && NodeLib.contains( reference ) ) {\n\n\t\t\t\tbuilder.include( NodeLib.get( reference ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( output === 'source' ) {\n\n\t\t\treturn src;\n\n\t\t} else if ( this.isMethod ) {\n\n\t\t\tif ( ! this.isInterface ) {\n\n\t\t\t\tbuilder.include( this, false, src );\n\n\t\t\t}\n\n\t\t\treturn this.name;\n\n\t\t} else {\n\n\t\t\treturn builder.format( '( ' + src + ' )', this.getType( builder ), output );\n\n\t\t}\n\n\t}\n\n\tparse( src, includes, extensions, keywords ) {\n\n\t\tthis.src = src || '';\n\n\t\tthis.includes = includes || [];\n\t\tthis.extensions = extensions || {};\n\t\tthis.keywords = keywords || {};\n\n\t\tif ( this.isMethod ) {\n\n\t\t\tconst match = this.src.match( declarationRegexp );\n\n\t\t\tthis.inputs = [];\n\n\t\t\tif ( match && match.length == 4 ) {\n\n\t\t\t\tthis.type = match[ 1 ];\n\t\t\t\tthis.name = match[ 2 ];\n\n\t\t\t\tconst inputs = match[ 3 ].match( propertiesRegexp );\n\n\t\t\t\tif ( inputs ) {\n\n\t\t\t\t\tlet i = 0;\n\n\t\t\t\t\twhile ( i < inputs.length ) {\n\n\t\t\t\t\t\tlet qualifier = inputs[ i ++ ];\n\t\t\t\t\t\tlet type;\n\n\t\t\t\t\t\tif ( qualifier === 'in' || qualifier === 'out' || qualifier === 'inout' ) {\n\n\t\t\t\t\t\t\ttype = inputs[ i ++ ];\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttype = qualifier;\n\t\t\t\t\t\t\tqualifier = '';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst name = inputs[ i ++ ];\n\n\t\t\t\t\t\tthis.inputs.push( {\n\t\t\t\t\t\t\tname: name,\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tqualifier: qualifier\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.isInterface = this.src.indexOf( '{' ) === - 1;\n\n\t\t\t} else {\n\n\t\t\t\tthis.type = '';\n\t\t\t\tthis.name = '';\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.isMethod = source.isMethod;\n\t\tthis.useKeywords = source.useKeywords;\n\n\t\tthis.parse( source.src, source.includes, source.extensions, source.keywords );\n\n\t\tif ( source.type !== undefined ) this.type = source.type;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.src = this.src;\n\t\t\tdata.isMethod = this.isMethod;\n\t\t\tdata.useKeywords = this.useKeywords;\n\n\t\t\tif ( ! this.isMethod ) data.type = this.type;\n\n\t\t\tdata.extensions = JSON.parse( JSON.stringify( this.extensions ) );\n\t\t\tdata.keywords = {};\n\n\t\t\tfor ( const keyword in this.keywords ) {\n\n\t\t\t\tdata.keywords[ keyword ] = this.keywords[ keyword ].toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.includes.length ) {\n\n\t\t\t\tdata.includes = [];\n\n\t\t\t\tfor ( let i = 0; i < this.includes.length; i ++ ) {\n\n\t\t\t\t\tdata.includes.push( this.includes[ i ].toJSON( meta ).uuid );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nFunctionNode.prototype.nodeType = 'Function';\nFunctionNode.prototype.useKeywords = true;\n\nexport { FunctionNode };\n", "import { FunctionNode } from './FunctionNode.js';\n\nclass ExpressionNode extends FunctionNode {\n\n\tconstructor( src, type, keywords, extensions, includes ) {\n\n\t\tsuper( src, includes, extensions, keywords, type );\n\n\t}\n\n}\n\nExpressionNode.prototype.nodeType = 'Expression';\n\nexport { ExpressionNode };\n", "import { TempNode } from './TempNode.js';\n\nclass FunctionCallNode extends TempNode {\n\n\tconstructor( func, inputs ) {\n\n\t\tsuper();\n\n\t\tthis.setFunction( func, inputs );\n\n\t}\n\n\tsetFunction( func, inputs = [] ) {\n\n\t\tthis.value = func;\n\t\tthis.inputs = inputs;\n\n\t}\n\n\tgetFunction() {\n\n\t\treturn this.value;\n\n\t}\n\n\tgetType( builder ) {\n\n\t\treturn this.value.getType( builder );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getType( builder ),\n\t\t\tfunc = this.value;\n\n\t\tlet code = func.build( builder, output ) + '( ';\n\t\tconst params = [];\n\n\t\tfor ( let i = 0; i < func.inputs.length; i ++ ) {\n\n\t\t\tconst inpt = func.inputs[ i ],\n\t\t\t\tparam = this.inputs[ i ] || this.inputs[ inpt.name ];\n\n\t\t\tparams.push( param.build( builder, builder.getTypeByFormat( inpt.type ) ) );\n\n\t\t}\n\n\t\tcode += params.join( ', ' ) + ' )';\n\n\t\treturn builder.format( code, type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tfor ( const prop in source.inputs ) {\n\n\t\t\tthis.inputs[ prop ] = source.inputs[ prop ];\n\n\t\t}\n\n\t\tthis.value = source.value;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tconst func = this.value;\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.toJSON( meta ).uuid;\n\n\t\t\tif ( func.inputs.length ) {\n\n\t\t\t\tdata.inputs = {};\n\n\t\t\t\tfor ( let i = 0; i < func.inputs.length; i ++ ) {\n\n\t\t\t\t\tconst inpt = func.inputs[ i ],\n\t\t\t\t\t\tnode = this.inputs[ i ] || this.inputs[ inpt.name ];\n\n\t\t\t\t\tdata.inputs[ inpt.name ] = node.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nFunctionCallNode.prototype.nodeType = 'FunctionCall';\n\nexport { FunctionCallNode };\n", "const NodeUtils = {\n\n\telements: [ 'x', 'y', 'z', 'w' ],\n\n\taddShortcuts: function () {\n\n\t\tfunction applyShortcut( proxy, property, subProperty ) {\n\n\t\t\tif ( subProperty ) {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this[ proxy ][ property ][ subProperty ];\n\n\t\t\t\t\t},\n\n\t\t\t\t\tset: function ( val ) {\n\n\t\t\t\t\t\tthis[ proxy ][ property ][ subProperty ] = val;\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\treturn {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this[ proxy ][ property ];\n\n\t\t\t\t\t},\n\n\t\t\t\t\tset: function ( val ) {\n\n\t\t\t\t\t\tthis[ proxy ][ property ] = val;\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function addShortcuts( proto, proxy, list ) {\n\n\t\t\tconst shortcuts = {};\n\n\t\t\tfor ( let i = 0; i < list.length; ++ i ) {\n\n\t\t\t\tconst data = list[ i ].split( '.' ),\n\t\t\t\t\tproperty = data[ 0 ],\n\t\t\t\t\tsubProperty = data[ 1 ];\n\n\t\t\t\tshortcuts[ property ] = applyShortcut( proxy, property, subProperty );\n\n\t\t\t}\n\n\t\t\tObject.defineProperties( proto, shortcuts );\n\n\t\t};\n\n\t}()\n\n};\n\nexport { NodeUtils };\n", "class NodeFrame {\n\n\tconstructor( time ) {\n\n\t\tthis.time = time !== undefined ? time : 0;\n\n\t\tthis.id = 0;\n\n\t}\n\n\tupdate( delta ) {\n\n\t\t++ this.id;\n\n\t\tthis.time += delta;\n\t\tthis.delta = delta;\n\n\t\treturn this;\n\n\t}\n\n\tsetRenderer( renderer ) {\n\n\t\tthis.renderer = renderer;\n\n\t\treturn this;\n\n\t}\n\n\tsetRenderTexture( renderTexture ) {\n\n\t\tthis.renderTexture = renderTexture;\n\n\t\treturn this;\n\n\t}\n\n\tupdateNode( node ) {\n\n\t\tif ( node.frameId === this.id ) return this;\n\n\t\tnode.updateFrame( this );\n\n\t\tnode.frameId = this.id;\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { NodeFrame };\n", "class NodeUniform {\n\n\tconstructor( params = {} ) {\n\n\t\tthis.name = params.name;\n\t\tthis.type = params.type;\n\t\tthis.node = params.node;\n\t\tthis.needsUpdate = params.needsUpdate;\n\n\t}\n\n\tget value() {\n\n\t\treturn this.node.value;\n\n\t}\n\n\tset value( val ) {\n\n\t\tthis.node.value = val;\n\n\t}\n\n}\n\nexport { NodeUniform };\n", "import { Vector2 } from 'three';\n\nimport { InputNode } from '../core/InputNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass Vector2Node extends InputNode {\n\n\tconstructor( x, y ) {\n\n\t\tsuper( 'v2' );\n\n\t\tthis.value = x instanceof Vector2 ? x : new Vector2( x, y );\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type/*, ns, needsUpdate*/ ) {\n\n\t\treturn builder.format( 'vec2( ' + this.x + ', ' + this.y + ' )', type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value.copy( source );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.x = this.x;\n\t\t\tdata.y = this.y;\n\n\t\t\tif ( this.readonly === true ) data.readonly = true;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nVector2Node.prototype.nodeType = 'Vector2';\n\nNodeUtils.addShortcuts( Vector2Node.prototype, 'value', [ 'x', 'y' ] );\n\nexport { Vector2Node };\n", "import { Vector3 } from 'three';\n\nimport { InputNode } from '../core/InputNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass Vector3Node extends InputNode {\n\n\tconstructor( x, y, z ) {\n\n\t\tsuper( 'v3' );\n\n\t\tthis.value = x instanceof Vector3 ? x : new Vector3( x, y, z );\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type/*, ns, needsUpdate*/ ) {\n\n\t\treturn builder.format( 'vec3( ' + this.x + ', ' + this.y + ', ' + this.z + ' )', type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value.copy( source );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.x = this.x;\n\t\t\tdata.y = this.y;\n\t\t\tdata.z = this.z;\n\n\t\t\tif ( this.readonly === true ) data.readonly = true;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nVector3Node.prototype.nodeType = 'Vector3';\n\nNodeUtils.addShortcuts( Vector3Node.prototype, 'value', [ 'x', 'y', 'z' ] );\n\nexport { Vector3Node };\n", "import { Vector4 } from 'three';\n\nimport { InputNode } from '../core/InputNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass Vector4Node extends InputNode {\n\n\tconstructor( x, y, z, w ) {\n\n\t\tsuper( 'v4' );\n\n\t\tthis.value = x instanceof Vector4 ? x : new Vector4( x, y, z, w );\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type/*, ns, needsUpdate*/ ) {\n\n\t\treturn builder.format( 'vec4( ' + this.x + ', ' + this.y + ', ' + this.z + ', ' + this.w + ' )', type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value.copy( source );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.x = this.x;\n\t\t\tdata.y = this.y;\n\t\t\tdata.z = this.z;\n\t\t\tdata.w = this.w;\n\n\t\t\tif ( this.readonly === true ) data.readonly = true;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nVector4Node.prototype.nodeType = 'Vector4';\n\nNodeUtils.addShortcuts( Vector4Node.prototype, 'value', [ 'x', 'y', 'z', 'w' ] );\n\nexport { Vector4Node };\n", "import { TempNode } from '../core/TempNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\n\nclass UVNode extends TempNode {\n\n\tconstructor( index ) {\n\n\t\tsuper( 'v2', { shared: false } );\n\n\t\tthis.index = index || 0;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tbuilder.requires.uv[ this.index ] = true;\n\n\t\tconst uvIndex = this.index > 0 ? this.index + 1 : '';\n\t\tconst result = builder.isShader( 'vertex' ) ? 'uv' + uvIndex : 'vUv' + uvIndex;\n\n\t\treturn builder.format( result, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.index = source.index;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.index = this.index;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nUVNode.prototype.nodeType = 'UV';\n\nNodeLib.addKeyword( 'uv', function () {\n\n\treturn new UVNode();\n\n} );\n\nNodeLib.addKeyword( 'uv2', function () {\n\n\treturn new UVNode( 1 );\n\n} );\n\nexport { UVNode };\n", "import {\n\tLinearEncoding,\n\tsRGBEncoding\n} from 'three';\n\nimport { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\n\nclass ColorSpaceNode extends TempNode {\n\n\tconstructor( input, method ) {\n\n\t\tsuper( 'v4' );\n\n\t\tthis.input = input;\n\n\t\tthis.method = method || ColorSpaceNode.LINEAR_TO_LINEAR;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst input = this.input.build( builder, 'v4' );\n\t\tconst outputType = this.getType( builder );\n\n\t\tconst methodNode = ColorSpaceNode.Nodes[ this.method ];\n\t\tconst method = builder.include( methodNode );\n\n\t\tif ( method === ColorSpaceNode.LINEAR_TO_LINEAR ) {\n\n\t\t\treturn builder.format( input, outputType, output );\n\n\t\t} else {\n\n\t\t\tif ( methodNode.inputs.length === 2 ) {\n\n\t\t\t\tconst factor = this.factor.build( builder, 'f' );\n\n\t\t\t\treturn builder.format( method + '( ' + input + ', ' + factor + ' )', outputType, output );\n\n\t\t\t} else {\n\n\t\t\t\treturn builder.format( method + '( ' + input + ' )', outputType, output );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfromEncoding( encoding ) {\n\n\t\tconst components = ColorSpaceNode.getEncodingComponents( encoding );\n\n\t\tthis.method = 'LinearTo' + components[ 0 ];\n\t\tthis.factor = components[ 1 ];\n\n\t}\n\n\tfromDecoding() {\n\n\t\t// TODO: Remove fromDecoding()\n\n\t\tconst components = ColorSpaceNode.getEncodingComponents( LinearEncoding );\n\n\t\tthis.method = components[ 0 ] + 'ToLinear';\n\t\tthis.factor = components[ 1 ];\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.input = source.input;\n\t\tthis.method = source.method;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.input = this.input.toJSON( meta ).uuid;\n\t\t\tdata.method = this.method;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nColorSpaceNode.Nodes = ( function () {\n\n\tconst LinearToLinear = new FunctionNode( /* glsl */`\n\t\tvec4 LinearToLinear( in vec4 value ) {\n\n\t\t\treturn value;\n\n\t\t}`\n\t);\n\n\tconst LinearTosRGB = new FunctionNode( /* glsl */`\n\t\tvec4 LinearTosRGB( in vec4 value ) {\n\n\t\t\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n\n\t\t}`\n\t);\n\n\treturn {\n\t\tLinearToLinear: LinearToLinear,\n\t\tLinearTosRGB: LinearTosRGB\n\t};\n\n} )();\n\nColorSpaceNode.LINEAR_TO_LINEAR = 'LinearToLinear';\nColorSpaceNode.LINEAR_TO_SRGB = 'LinearTosRGB';\n\nColorSpaceNode.getEncodingComponents = function ( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB' ];\n\n\t}\n\n};\n\nColorSpaceNode.prototype.nodeType = 'ColorSpace';\nColorSpaceNode.prototype.hashProperties = [ 'method' ];\n\nexport { ColorSpaceNode };\n", "import { InputNode } from '../core/InputNode.js';\nimport { UVNode } from '../accessors/UVNode.js';\nimport { ColorSpaceNode } from '../utils/ColorSpaceNode.js';\nimport { ExpressionNode } from '../core/ExpressionNode.js';\n\nclass TextureNode extends InputNode {\n\n\tconstructor( value, uv, bias, project ) {\n\n\t\tsuper( 'v4', { shared: true } );\n\n\t\tthis.value = value;\n\t\tthis.uv = uv || new UVNode();\n\t\tthis.bias = bias;\n\t\tthis.project = project !== undefined ? project : false;\n\n\t}\n\n\tgetTexture( builder, output ) {\n\n\t\treturn super.generate( builder, output, this.value.uuid, 't' );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( output === 'sampler2D' ) {\n\n\t\t\treturn this.getTexture( builder, output );\n\n\t\t}\n\n\t\tconst tex = this.getTexture( builder, output ),\n\t\t\tuv = this.uv.build( builder, this.project ? 'v4' : 'v2' );\n\n\t\tlet bias = this.bias ? this.bias.build( builder, 'f' ) : undefined;\n\n\t\tif ( bias === undefined && builder.context.bias ) {\n\n\t\t\tbias = builder.context.bias.setTexture( this ).build( builder, 'f' );\n\n\t\t}\n\n\t\tlet method, code;\n\n\t\tif ( this.project ) method = 'texture2DProj';\n\t\telse method = bias ? 'tex2DBias' : 'tex2D';\n\n\t\tif ( bias ) code = method + '( ' + tex + ', ' + uv + ', ' + bias + ' )';\n\t\telse code = method + '( ' + tex + ', ' + uv + ' )';\n\n\t\t// add a custom context for fix incompatibility with the core\n\t\t// include ColorSpace function only for vertex shader (in fragment shader color space functions is added automatically by core)\n\t\t// this should be removed in the future\n\t\t// context.include is used to include or not functions if used FunctionNode\n\t\t// context.ignoreCache =: not create temp variables nodeT0..9 to optimize the code\n\t\tconst context = { include: builder.isShader( 'vertex' ), ignoreCache: true };\n\t\tconst outputType = this.getType( builder );\n\n\t\tbuilder.addContext( context );\n\n\t\tthis.colorSpace = this.colorSpace || new ColorSpaceNode( new ExpressionNode( '', outputType ) );\n\t\tthis.colorSpace.fromDecoding( builder.getTextureEncodingFromMap( this.value ) );\n\t\tthis.colorSpace.input.parse( code );\n\n\t\tcode = this.colorSpace.build( builder, outputType );\n\n\t\t// end custom context\n\n\t\tbuilder.removeContext();\n\n\t\treturn builder.format( code, outputType, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.value ) this.value = source.value;\n\n\t\tthis.uv = source.uv;\n\n\t\tif ( source.bias ) this.bias = source.bias;\n\t\tif ( source.project !== undefined ) this.project = source.project;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tif ( this.value ) data.value = this.value.uuid;\n\n\t\t\tdata.uv = this.uv.toJSON( meta ).uuid;\n\t\t\tdata.project = this.project;\n\n\t\t\tif ( this.bias ) data.bias = this.bias.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nTextureNode.prototype.nodeType = 'Texture';\n\nexport { TextureNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\n\nclass PositionNode extends TempNode {\n\n\tconstructor( scope ) {\n\n\t\tsuper( 'v3' );\n\n\t\tthis.scope = scope || PositionNode.LOCAL;\n\n\t}\n\n\tgetType( ) {\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase PositionNode.PROJECTION:\n\n\t\t\t\treturn 'v4';\n\n\t\t}\n\n\t\treturn this.type;\n\n\t}\n\n\tgetShared( /* builder */ ) {\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase PositionNode.LOCAL:\n\t\t\tcase PositionNode.WORLD:\n\n\t\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet result;\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase PositionNode.LOCAL:\n\n\t\t\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\t\t\tresult = 'transformed';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuilder.requires.position = true;\n\n\t\t\t\t\tresult = 'vPosition';\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase PositionNode.WORLD:\n\n\t\t\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\t\t\treturn '( modelMatrix * vec4( transformed, 1.0 ) ).xyz';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuilder.requires.worldPosition = true;\n\n\t\t\t\t\tresult = 'vWPosition';\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase PositionNode.VIEW:\n\n\t\t\t\tresult = builder.isShader( 'vertex' ) ? '-mvPosition.xyz' : 'vViewPosition';\n\n\t\t\t\tbreak;\n\n\t\t\tcase PositionNode.PROJECTION:\n\n\t\t\t\tresult = builder.isShader( 'vertex' ) ? '( projectionMatrix * modelViewMatrix * vec4( position, 1.0 ) )' : 'vec4( 0.0 )';\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn builder.format( result, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scope = source.scope;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.scope = this.scope;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nPositionNode.LOCAL = 'local';\nPositionNode.WORLD = 'world';\nPositionNode.VIEW = 'view';\nPositionNode.PROJECTION = 'projection';\n\nPositionNode.prototype.nodeType = 'Position';\n\nNodeLib.addKeyword( 'position', function () {\n\n\treturn new PositionNode();\n\n} );\n\nNodeLib.addKeyword( 'worldPosition', function () {\n\n\treturn new PositionNode( PositionNode.WORLD );\n\n} );\n\nNodeLib.addKeyword( 'viewPosition', function () {\n\n\treturn new PositionNode( PositionNode.VIEW );\n\n} );\n\nexport { PositionNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\n\nclass NormalNode extends TempNode {\n\n\tconstructor( scope ) {\n\n\t\tsuper( 'v3' );\n\n\t\tthis.scope = scope || NormalNode.VIEW;\n\n\t}\n\n\tgetShared() {\n\n\t\t// if shared is false, TempNode will not create temp variable (for optimization)\n\n\t\treturn this.scope === NormalNode.WORLD;\n\n\t}\n\n\tbuild( builder, output, uuid, ns ) {\n\n\t\tconst contextNormal = builder.context[ this.scope + 'Normal' ];\n\n\t\tif ( contextNormal ) {\n\n\t\t\treturn contextNormal.build( builder, output, uuid, ns );\n\n\t\t}\n\n\t\treturn super.build( builder, output, uuid );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet result;\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase NormalNode.VIEW:\n\n\t\t\t\tif ( builder.isShader( 'vertex' ) ) result = 'transformedNormal';\n\t\t\t\telse result = 'geometryNormal';\n\n\t\t\t\tbreak;\n\n\t\t\tcase NormalNode.LOCAL:\n\n\t\t\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\t\t\tresult = 'objectNormal';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuilder.requires.normal = true;\n\n\t\t\t\t\tresult = 'vObjectNormal';\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase NormalNode.WORLD:\n\n\t\t\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\t\t\tresult = 'inverseTransformDirection( transformedNormal, viewMatrix ).xyz';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuilder.requires.worldNormal = true;\n\n\t\t\t\t\tresult = 'vWNormal';\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn builder.format( result, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scope = source.scope;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.scope = this.scope;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nNormalNode.LOCAL = 'local';\nNormalNode.WORLD = 'world';\nNormalNode.VIEW = 'view';\n\nNormalNode.prototype.nodeType = 'Normal';\n\nNodeLib.addKeyword( 'viewNormal', function () {\n\n\treturn new NormalNode( NormalNode.VIEW );\n\n} );\n\nNodeLib.addKeyword( 'localNormal', function () {\n\n\treturn new NormalNode( NormalNode.NORMAL );\n\n} );\n\nNodeLib.addKeyword( 'worldNormal', function () {\n\n\treturn new NormalNode( NormalNode.WORLD );\n\n} );\n\nexport { NormalNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { PositionNode } from './PositionNode.js';\nimport { NormalNode } from './NormalNode.js';\n\nclass ReflectNode extends TempNode {\n\n\tconstructor( scope ) {\n\n\t\tsuper( 'v3' );\n\n\t\tthis.scope = scope || ReflectNode.CUBE;\n\n\t}\n\n\tgetUnique( builder ) {\n\n\t\treturn ! builder.context.viewNormal;\n\n\t}\n\n\tgetType( /* builder */ ) {\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase ReflectNode.SPHERE:\n\n\t\t\t\treturn 'v2';\n\n\t\t}\n\n\t\treturn this.type;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst isUnique = this.getUnique( builder );\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tlet result, code, reflectVec;\n\n\t\t\tswitch ( this.scope ) {\n\n\t\t\t\tcase ReflectNode.VECTOR:\n\n\t\t\t\t\tconst viewNormalNode = new NormalNode( NormalNode.VIEW );\n\t\t\t\t\tconst roughnessNode = builder.context.roughness;\n\n\t\t\t\t\tconst viewNormal = viewNormalNode.build( builder, 'v3' );\n\t\t\t\t\tconst viewPosition = new PositionNode( PositionNode.VIEW ).build( builder, 'v3' );\n\t\t\t\t\tconst roughness = roughnessNode ? roughnessNode.build( builder, 'f' ) : undefined;\n\n\t\t\t\t\tlet method = `reflect( -normalize( ${viewPosition} ), ${viewNormal} )`;\n\n\t\t\t\t\tif ( roughness ) {\n\n\t\t\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\t\t\t\tmethod = `normalize( mix( ${method}, ${viewNormal}, ${roughness} * ${roughness} ) )`;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcode = `inverseTransformDirection( ${method}, viewMatrix )`;\n\n\t\t\t\t\tif ( isUnique ) {\n\n\t\t\t\t\t\tbuilder.addNodeCode( `vec3 reflectVec = ${code};` );\n\n\t\t\t\t\t\tresult = 'reflectVec';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tresult = code;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ReflectNode.CUBE:\n\n\t\t\t\t\treflectVec = new ReflectNode( ReflectNode.VECTOR ).build( builder, 'v3' );\n\n\t\t\t\t\tcode = 'vec3( -' + reflectVec + '.x, ' + reflectVec + '.yz )';\n\n\t\t\t\t\tif ( isUnique ) {\n\n\t\t\t\t\t\tbuilder.addNodeCode( `vec3 reflectCubeVec = ${code};` );\n\n\t\t\t\t\t\tresult = 'reflectCubeVec';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tresult = code;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ReflectNode.SPHERE:\n\n\t\t\t\t\treflectVec = new ReflectNode( ReflectNode.VECTOR ).build( builder, 'v3' );\n\n\t\t\t\t\tcode = 'normalize( ( viewMatrix * vec4( ' + reflectVec + ', 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) ).xy * 0.5 + 0.5';\n\n\t\t\t\t\tif ( isUnique ) {\n\n\t\t\t\t\t\tbuilder.addNodeCode( `vec2 reflectSphereVec = ${code};` );\n\n\t\t\t\t\t\tresult = 'reflectSphereVec';\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tresult = code;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\treturn builder.format( result, this.getType( builder ), output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ReflectNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\treturn builder.format( 'vec3( 0.0 )', this.type, output );\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.scope = this.scope;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nReflectNode.CUBE = 'cube';\nReflectNode.SPHERE = 'sphere';\nReflectNode.VECTOR = 'vector';\n\nReflectNode.prototype.nodeType = 'Reflect';\n\nexport { ReflectNode };\n", "import { InputNode } from '../core/InputNode.js';\nimport { ReflectNode } from '../accessors/ReflectNode.js';\nimport { ColorSpaceNode } from '../utils/ColorSpaceNode.js';\nimport { ExpressionNode } from '../core/ExpressionNode.js';\n\nclass CubeTextureNode extends InputNode {\n\n\tconstructor( value, uv, bias ) {\n\n\t\tsuper( 'v4', { shared: true } );\n\n\t\tthis.value = value;\n\t\tthis.uv = uv || new ReflectNode();\n\t\tthis.bias = bias;\n\n\t}\n\n\tgetTexture( builder, output ) {\n\n\t\treturn super.generate( builder, output, this.value.uuid, 'tc' );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( output === 'samplerCube' ) {\n\n\t\t\treturn this.getTexture( builder, output );\n\n\t\t}\n\n\t\tconst cubetex = this.getTexture( builder, output );\n\t\tconst uv = this.uv.build( builder, 'v3' );\n\t\tlet bias = this.bias ? this.bias.build( builder, 'f' ) : undefined;\n\n\t\tif ( bias === undefined && builder.context.bias ) {\n\n\t\t\tbias = builder.context.bias.setTexture( this ).build( builder, 'f' );\n\n\t\t}\n\n\t\tlet code;\n\n\t\tif ( bias ) code = 'texCubeBias( ' + cubetex + ', ' + uv + ', ' + bias + ' )';\n\t\telse code = 'texCube( ' + cubetex + ', ' + uv + ' )';\n\n\t\t// add a custom context for fix incompatibility with the core\n\t\t// include ColorSpace function only for vertex shader (in fragment shader color space functions is added automatically by core)\n\t\t// this should be removed in the future\n\t\t// context.include =: is used to include or not functions if used FunctionNode\n\t\t// context.ignoreCache =: not create variables temp nodeT0..9 to optimize the code\n\t\tconst context = { include: builder.isShader( 'vertex' ), ignoreCache: true };\n\t\tconst outputType = this.getType( builder );\n\n\t\tbuilder.addContext( context );\n\n\t\tthis.colorSpace = this.colorSpace || new ColorSpaceNode( new ExpressionNode( '', outputType ) );\n\t\tthis.colorSpace.fromDecoding( builder.getTextureEncodingFromMap( this.value ) );\n\t\tthis.colorSpace.input.parse( code );\n\n\t\tcode = this.colorSpace.build( builder, outputType );\n\n\t\t// end custom context\n\n\t\tbuilder.removeContext();\n\n\t\treturn builder.format( code, outputType, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.value ) this.value = source.value;\n\n\t\tthis.uv = source.uv;\n\n\t\tif ( source.bias ) this.bias = source.bias;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.uuid;\n\t\t\tdata.uv = this.uv.toJSON( meta ).uuid;\n\n\t\t\tif ( this.bias ) data.bias = this.bias.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nCubeTextureNode.prototype.nodeType = 'CubeTexture';\n\nexport { CubeTextureNode };\n", "import { InputNode } from '../core/InputNode.js';\n\nclass FloatNode extends InputNode {\n\n\tconstructor( value ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.value = value || 0;\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type/*, ns, needsUpdate */ ) {\n\n\t\treturn builder.format( this.value + ( this.value % 1 ? '' : '.0' ), type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value;\n\n\t\t\tif ( this.readonly === true ) data.readonly = true;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nFloatNode.prototype.nodeType = 'Float';\n\nexport { FloatNode };\n", "import { TempNode } from '../core/TempNode.js';\n\nclass OperatorNode extends TempNode {\n\n\tconstructor( a, b, op ) {\n\n\t\tsuper();\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.op = op;\n\n\t}\n\n\tgetType( builder ) {\n\n\t\tconst a = this.a.getType( builder ),\n\t\t\tb = this.b.getType( builder );\n\n\t\tif ( builder.isTypeMatrix( a ) ) {\n\n\t\t\treturn 'v4';\n\n\t\t} else if ( builder.getTypeLength( b ) > builder.getTypeLength( a ) ) {\n\n\t\t\t// use the greater length vector\n\n\t\t\treturn b;\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getType( builder );\n\n\t\tconst a = this.a.build( builder, type ),\n\t\t\tb = this.b.build( builder, type );\n\n\t\treturn builder.format( '( ' + a + ' ' + this.op + ' ' + b + ' )', type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.op = source.op;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.a = this.a.toJSON( meta ).uuid;\n\t\t\tdata.b = this.b.toJSON( meta ).uuid;\n\t\t\tdata.op = this.op;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nOperatorNode.ADD = '+';\nOperatorNode.SUB = '-';\nOperatorNode.MUL = '*';\nOperatorNode.DIV = '/';\n\nOperatorNode.prototype.nodeType = 'Operator';\n\nexport { OperatorNode };\n", "import { TempNode } from '../core/TempNode.js';\n\nclass MathNode extends TempNode {\n\n\tconstructor( a, bOrMethod, cOrMethod, method ) {\n\n\t\tsuper();\n\n\t\tthis.a = a;\n\t\ttypeof bOrMethod !== 'string' ? this.b = bOrMethod : method = bOrMethod;\n\t\ttypeof cOrMethod !== 'string' ? this.c = cOrMethod : method = cOrMethod;\n\n\t\tthis.method = method;\n\n\t}\n\n\tgetNumInputs( /*builder*/ ) {\n\n\t\tswitch ( this.method ) {\n\n\t\t\t// variable\n\n\t\t\tcase MathNode.ARCTAN:\n\n\t\t\t\treturn this.b ? 2 : 1;\n\n\t\t\t// 3\n\n\t\t\tcase MathNode.MIX:\n\t\t\tcase MathNode.CLAMP:\n\t\t\tcase MathNode.REFRACT:\n\t\t\tcase MathNode.SMOOTHSTEP:\n\t\t\tcase MathNode.FACEFORWARD:\n\n\t\t\t\treturn 3;\n\n\t\t\t// 2\n\n\t\t\tcase MathNode.MIN:\n\t\t\tcase MathNode.MAX:\n\t\t\tcase MathNode.MOD:\n\t\t\tcase MathNode.STEP:\n\t\t\tcase MathNode.REFLECT:\n\t\t\tcase MathNode.DISTANCE:\n\t\t\tcase MathNode.DOT:\n\t\t\tcase MathNode.CROSS:\n\t\t\tcase MathNode.POW:\n\n\t\t\t\treturn 2;\n\n\t\t\t// 1\n\n\t\t\tdefault:\n\n\t\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\tgetInputType( builder ) {\n\n\t\tconst a = builder.getTypeLength( this.a.getType( builder ) );\n\t\tconst b = this.b ? builder.getTypeLength( this.b.getType( builder ) ) : 0;\n\t\tconst c = this.c ? builder.getTypeLength( this.c.getType( builder ) ) : 0;\n\n\t\tif ( a > b && a > c ) {\n\n\t\t\treturn this.a.getType( builder );\n\n\t\t} else if ( b > c ) {\n\n\t\t\treturn this.b.getType( builder );\n\n\t\t}\n\n\t\treturn this.c.getType( builder );\n\n\t}\n\n\tgetType( builder ) {\n\n\t\tswitch ( this.method ) {\n\n\t\t\tcase MathNode.LENGTH:\n\t\t\tcase MathNode.DISTANCE:\n\t\t\tcase MathNode.DOT:\n\n\t\t\t\treturn 'f';\n\n\t\t\tcase MathNode.CROSS:\n\n\t\t\t\treturn 'v3';\n\n\t\t}\n\n\t\treturn this.getInputType( builder );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet a, b, c;\n\t\tconst al = this.a ? builder.getTypeLength( this.a.getType( builder ) ) : 0,\n\t\t\tbl = this.b ? builder.getTypeLength( this.b.getType( builder ) ) : 0,\n\t\t\tcl = this.c ? builder.getTypeLength( this.c.getType( builder ) ) : 0,\n\t\t\tinputType = this.getInputType( builder ),\n\t\t\tnodeType = this.getType( builder );\n\n\t\tswitch ( this.method ) {\n\n\t\t\t// 1 input\n\n\t\t\tcase MathNode.NEGATE:\n\n\t\t\t\treturn builder.format( '( -' + this.a.build( builder, inputType ) + ' )', inputType, output );\n\n\t\t\tcase MathNode.INVERT:\n\n\t\t\t\treturn builder.format( '( 1.0 - ' + this.a.build( builder, inputType ) + ' )', inputType, output );\n\n\t\t\t\t// 2 inputs\n\n\t\t\tcase MathNode.CROSS:\n\n\t\t\t\ta = this.a.build( builder, 'v3' );\n\t\t\t\tb = this.b.build( builder, 'v3' );\n\n\t\t\t\tbreak;\n\n\t\t\tcase MathNode.STEP:\n\n\t\t\t\ta = this.a.build( builder, al === 1 ? 'f' : inputType );\n\t\t\t\tb = this.b.build( builder, inputType );\n\n\t\t\t\tbreak;\n\n\t\t\tcase MathNode.MIN:\n\t\t\tcase MathNode.MAX:\n\t\t\tcase MathNode.MOD:\n\n\t\t\t\ta = this.a.build( builder, inputType );\n\t\t\t\tb = this.b.build( builder, bl === 1 ? 'f' : inputType );\n\n\t\t\t\tbreak;\n\n\t\t\t\t// 3 inputs\n\n\t\t\tcase MathNode.REFRACT:\n\n\t\t\t\ta = this.a.build( builder, inputType );\n\t\t\t\tb = this.b.build( builder, inputType );\n\t\t\t\tc = this.c.build( builder, 'f' );\n\n\t\t\t\tbreak;\n\n\t\t\tcase MathNode.MIX:\n\n\t\t\t\ta = this.a.build( builder, inputType );\n\t\t\t\tb = this.b.build( builder, inputType );\n\t\t\t\tc = this.c.build( builder, cl === 1 ? 'f' : inputType );\n\n\t\t\t\tbreak;\n\n\t\t\t\t// default\n\n\t\t\tdefault:\n\n\t\t\t\ta = this.a.build( builder, inputType );\n\t\t\t\tif ( this.b ) b = this.b.build( builder, inputType );\n\t\t\t\tif ( this.c ) c = this.c.build( builder, inputType );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t// build function call\n\n\t\tconst params = [];\n\t\tparams.push( a );\n\t\tif ( b ) params.push( b );\n\t\tif ( c ) params.push( c );\n\n\t\tconst numInputs = this.getNumInputs( builder );\n\n\t\tif ( params.length !== numInputs ) {\n\n\t\t\tthrow Error( `Arguments not match used in \"${this.method}\". Require ${numInputs}, currently ${params.length}.` );\n\n\t\t}\n\n\t\treturn builder.format( this.method + '( ' + params.join( ', ' ) + ' )', nodeType, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\t\tthis.method = source.method;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.a = this.a.toJSON( meta ).uuid;\n\t\t\tif ( this.b ) data.b = this.b.toJSON( meta ).uuid;\n\t\t\tif ( this.c ) data.c = this.c.toJSON( meta ).uuid;\n\n\t\t\tdata.method = this.method;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\n// 1 input\n\nMathNode.RAD = 'radians';\nMathNode.DEG = 'degrees';\nMathNode.EXP = 'exp';\nMathNode.EXP2 = 'exp2';\nMathNode.LOG = 'log';\nMathNode.LOG2 = 'log2';\nMathNode.SQRT = 'sqrt';\nMathNode.INV_SQRT = 'inversesqrt';\nMathNode.FLOOR = 'floor';\nMathNode.CEIL = 'ceil';\nMathNode.NORMALIZE = 'normalize';\nMathNode.FRACT = 'fract';\nMathNode.SATURATE = 'saturate';\nMathNode.SIN = 'sin';\nMathNode.COS = 'cos';\nMathNode.TAN = 'tan';\nMathNode.ASIN = 'asin';\nMathNode.ACOS = 'acos';\nMathNode.ARCTAN = 'atan';\nMathNode.ABS = 'abs';\nMathNode.SIGN = 'sign';\nMathNode.LENGTH = 'length';\nMathNode.NEGATE = 'negate';\nMathNode.INVERT = 'invert';\n\n// 2 inputs\n\nMathNode.MIN = 'min';\nMathNode.MAX = 'max';\nMathNode.MOD = 'mod';\nMathNode.STEP = 'step';\nMathNode.REFLECT = 'reflect';\nMathNode.DISTANCE = 'distance';\nMathNode.DOT = 'dot';\nMathNode.CROSS = 'cross';\nMathNode.POW = 'pow';\n\n// 3 inputs\n\nMathNode.MIX = 'mix';\nMathNode.CLAMP = 'clamp';\nMathNode.REFRACT = 'refract';\nMathNode.SMOOTHSTEP = 'smoothstep';\nMathNode.FACEFORWARD = 'faceforward';\n\nMathNode.prototype.nodeType = 'Math';\nMathNode.prototype.hashProperties = [ 'method' ];\n\nexport { MathNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { ConstNode } from '../core/ConstNode.js';\nimport { StructNode } from '../core/StructNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FunctionCallNode } from '../core/FunctionCallNode.js';\nimport { ExpressionNode } from '../core/ExpressionNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { OperatorNode } from '../math/OperatorNode.js';\nimport { MathNode } from '../math/MathNode.js';\nimport { ColorSpaceNode } from '../utils/ColorSpaceNode.js';\n\nclass TextureCubeUVNode extends TempNode {\n\n\tconstructor( value, uv, bias ) {\n\n\t\tsuper( 'v4' );\n\n\t\tthis.value = value,\n\t\tthis.uv = uv;\n\t\tthis.bias = bias;\n\n\t}\n\n\tbilinearCubeUV( builder, texture, uv, mipInt ) {\n\n\t\tconst bilinearCubeUV = new FunctionCallNode( TextureCubeUVNode.Nodes.bilinearCubeUV, [ texture, uv, mipInt ] );\n\n\t\tthis.colorSpaceTL = this.colorSpaceTL || new ColorSpaceNode( new ExpressionNode( '', 'v4' ) );\n\t\tthis.colorSpaceTL.input.parse( bilinearCubeUV.build( builder ) + '.tl' );\n\n\t\tthis.colorSpaceTR = this.colorSpaceTR || new ColorSpaceNode( new ExpressionNode( '', 'v4' ) );\n\t\tthis.colorSpaceTR.input.parse( bilinearCubeUV.build( builder ) + '.tr' );\n\n\t\tthis.colorSpaceBL = this.colorSpaceBL || new ColorSpaceNode( new ExpressionNode( '', 'v4' ) );\n\t\tthis.colorSpaceBL.input.parse( bilinearCubeUV.build( builder ) + '.bl' );\n\n\t\tthis.colorSpaceBR = this.colorSpaceBR || new ColorSpaceNode( new ExpressionNode( '', 'v4' ) );\n\t\tthis.colorSpaceBR.input.parse( bilinearCubeUV.build( builder ) + '.br' );\n\n\t\t// add a custom context for fix incompatibility with the core\n\t\t// include ColorSpace function only for vertex shader (in fragment shader color space functions is added automatically by core)\n\t\t// this should be removed in the future\n\t\t// context.include =: is used to include or not functions if used FunctionNode\n\t\t// context.ignoreCache =: not create temp variables nodeT0..9 to optimize the code\n\t\tconst context = { include: builder.isShader( 'vertex' ), ignoreCache: true };\n\n\t\tbuilder.addContext( context );\n\n\t\tthis.colorSpaceTLExp = new ExpressionNode( this.colorSpaceTL.build( builder, 'v4' ), 'v4' );\n\t\tthis.colorSpaceTRExp = new ExpressionNode( this.colorSpaceTR.build( builder, 'v4' ), 'v4' );\n\t\tthis.colorSpaceBLExp = new ExpressionNode( this.colorSpaceBL.build( builder, 'v4' ), 'v4' );\n\t\tthis.colorSpaceBRExp = new ExpressionNode( this.colorSpaceBR.build( builder, 'v4' ), 'v4' );\n\n\t\t// end custom context\n\n\t\tbuilder.removeContext();\n\n\t\t// --\n\n\t\tconst output = new ExpressionNode( 'mix( mix( cubeUV_TL, cubeUV_TR, cubeUV.f.x ), mix( cubeUV_BL, cubeUV_BR, cubeUV.f.x ), cubeUV.f.y )', 'v4' );\n\t\toutput.keywords[ 'cubeUV_TL' ] = this.colorSpaceTLExp;\n\t\toutput.keywords[ 'cubeUV_TR' ] = this.colorSpaceTRExp;\n\t\toutput.keywords[ 'cubeUV_BL' ] = this.colorSpaceBLExp;\n\t\toutput.keywords[ 'cubeUV_BR' ] = this.colorSpaceBRExp;\n\t\toutput.keywords[ 'cubeUV' ] = bilinearCubeUV;\n\n\t\treturn output;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tconst uv = this.uv;\n\t\t\tconst bias = this.bias || builder.context.roughness;\n\n\t\t\tconst mipV = new FunctionCallNode( TextureCubeUVNode.Nodes.roughnessToMip, [ bias ] );\n\t\t\tconst mip = new MathNode( mipV, TextureCubeUVNode.Nodes.m0, TextureCubeUVNode.Nodes.cubeUV_maxMipLevel, MathNode.CLAMP );\n\t\t\tconst mipInt\t= new MathNode( mip, MathNode.FLOOR );\n\t\t\tconst mipF\t= new MathNode( mip, MathNode.FRACT );\n\n\t\t\tconst color0 = this.bilinearCubeUV( builder, this.value, uv, mipInt );\n\t\t\tconst color1 = this.bilinearCubeUV( builder, this.value, uv, new OperatorNode(\n\t\t\t\tmipInt,\n\t\t\t\tnew FloatNode( 1 ).setReadonly( true ),\n\t\t\t\tOperatorNode.ADD\n\t\t\t) );\n\n\t\t\tconst color1Mix = new MathNode( color0, color1, mipF, MathNode.MIX );\n\n\t\t\t/*\n\t\t\t// TODO: Optimize this in the future\n\t\t\tlet cond = new CondNode(\n\t\t\t\tmipF,\n\t\t\t\tnew FloatNode( 0 ).setReadonly( true ),\n\t\t\t\tCondNode.EQUAL,\n\t\t\t\tcolor0, // if\n\t\t\t\tcolor1Mix\t// else\n\t\t\t);\n\t\t\t*/\n\n\t\t\treturn builder.format( color1Mix.build( builder ), 'v4', output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.TextureCubeUVNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\treturn builder.format( 'vec4( 0.0 )', this.getType( builder ), output );\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.toJSON( meta ).uuid;\n\t\t\tdata.uv = this.uv.toJSON( meta ).uuid;\n\t\t\tdata.bias = this.bias.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nTextureCubeUVNode.Nodes = ( function () {\n\n\tconst TextureCubeUVData = new StructNode(\n\t\t`struct TextureCubeUVData {\n\t\t\tvec4 tl;\n\t\t\tvec4 tr;\n\t\t\tvec4 br;\n\t\t\tvec4 bl;\n\t\t\tvec2 f;\n\t\t}` );\n\n\tconst cubeUV_maxMipLevel = new ConstNode( 'float cubeUV_maxMipLevel 8.0', true );\n\tconst cubeUV_minMipLevel = new ConstNode( 'float cubeUV_minMipLevel 4.0', true );\n\tconst cubeUV_maxTileSize = new ConstNode( 'float cubeUV_maxTileSize 256.0', true );\n\tconst cubeUV_minTileSize = new ConstNode( 'float cubeUV_minTileSize 16.0', true );\n\n\t// These shader functions convert between the UV coordinates of a single face of\n\t// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n\t// sampling a textureCube (not generally normalized).\n\n\tconst getFace = new FunctionNode(\n\t\t`float getFace(vec3 direction) {\n\t\t\t\tvec3 absDirection = abs(direction);\n\t\t\t\tfloat face = -1.0;\n\t\t\t\tif (absDirection.x > absDirection.z) {\n\t\t\t\t\tif (absDirection.x > absDirection.y)\n\t\t\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\t\t\telse\n\t\t\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t\t\t} else {\n\t\t\t\t\tif (absDirection.z > absDirection.y)\n\t\t\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\t\t\telse\n\t\t\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t\t\t}\n\t\t\t\treturn face;\n\t\t}` );\n\tgetFace.useKeywords = false;\n\n\tconst getUV = new FunctionNode(\n\t\t`vec2 getUV(vec3 direction, float face) {\n\t\t\t\tvec2 uv;\n\t\t\t\tif (face == 0.0) {\n\t\t\t\t\tuv = vec2(direction.z, direction.y) / abs(direction.x); // pos x\n\t\t\t\t} else if (face == 1.0) {\n\t\t\t\t\tuv = vec2(-direction.x, -direction.z) / abs(direction.y); // pos y\n\t\t\t\t} else if (face == 2.0) {\n\t\t\t\t\tuv = vec2(-direction.x, direction.y) / abs(direction.z); // pos z\n\t\t\t\t} else if (face == 3.0) {\n\t\t\t\t\tuv = vec2(-direction.z, direction.y) / abs(direction.x); // neg x\n\t\t\t\t} else if (face == 4.0) {\n\t\t\t\t\tuv = vec2(-direction.x, direction.z) / abs(direction.y); // neg y\n\t\t\t\t} else {\n\t\t\t\t\tuv = vec2(direction.x, direction.y) / abs(direction.z); // neg z\n\t\t\t\t}\n\t\t\t\treturn 0.5 * (uv + 1.0);\n\t\t}` );\n\tgetUV.useKeywords = false;\n\n\tconst bilinearCubeUV = new FunctionNode(\n\t\t`TextureCubeUVData bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n\n\t\t\tfloat face = getFace(direction);\n\t\t\tfloat filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n\t\t\tmipInt = max(mipInt, cubeUV_minMipLevel);\n\t\t\tfloat faceSize = exp2(mipInt);\n\n\t\t\tfloat texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n\n\t\t\tvec2 uv = getUV(direction, face) * (faceSize - 1.0);\n\t\t\tvec2 f = fract(uv);\n\t\t\tuv += 0.5 - f;\n\t\t\tif (face > 2.0) {\n\t\t\t\tuv.y += faceSize;\n\t\t\t\tface -= 3.0;\n\t\t\t}\n\t\t\tuv.x += face * faceSize;\n\t\t\tif(mipInt < cubeUV_maxMipLevel){\n\t\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t\t}\n\t\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\t\tuv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n\t\t\tuv *= texelSize;\n\n\t\t\tvec4 tl = texture2D(envMap, uv);\n\t\t\tuv.x += texelSize;\n\t\t\tvec4 tr = texture2D(envMap, uv);\n\t\t\tuv.y += texelSize;\n\t\t\tvec4 br = texture2D(envMap, uv);\n\t\t\tuv.x -= texelSize;\n\t\t\tvec4 bl = texture2D(envMap, uv);\n\n\t\t\treturn TextureCubeUVData( tl, tr, br, bl, f );\n\t\t}`, [ TextureCubeUVData, getFace, getUV, cubeUV_maxMipLevel, cubeUV_minMipLevel, cubeUV_maxTileSize, cubeUV_minTileSize ] );\n\n\tbilinearCubeUV.useKeywords = false;\n\n\t// These defines must match with PMREMGenerator\n\n\tconst r0 = new ConstNode( 'float r0 1.0', true );\n\tconst v0 = new ConstNode( 'float v0 0.339', true );\n\tconst m0 = new ConstNode( 'float m0 -2.0', true );\n\tconst r1 = new ConstNode( 'float r1 0.8', true );\n\tconst v1 = new ConstNode( 'float v1 0.276', true );\n\tconst m1 = new ConstNode( 'float m1 -1.0', true );\n\tconst r4 = new ConstNode( 'float r4 0.4', true );\n\tconst v4 = new ConstNode( 'float v4 0.046', true );\n\tconst m4 = new ConstNode( 'float m4 2.0', true );\n\tconst r5 = new ConstNode( 'float r5 0.305', true );\n\tconst v5 = new ConstNode( 'float v5 0.016', true );\n\tconst m5 = new ConstNode( 'float m5 3.0', true );\n\tconst r6 = new ConstNode( 'float r6 0.21', true );\n\tconst v6 = new ConstNode( 'float v6 0.0038', true );\n\tconst m6 = new ConstNode( 'float m6 4.0', true );\n\n\tconst defines = [ r0, v0, m0, r1, v1, m1, r4, v4, m4, r5, v5, m5, r6, v6, m6 ];\n\n\tconst roughnessToMip = new FunctionNode(\n\t\t`float roughnessToMip(float roughness) {\n\t\t\tfloat mip = 0.0;\n\t\t\tif (roughness >= r1) {\n\t\t\t\tmip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n\t\t\t} else if (roughness >= r4) {\n\t\t\t\tmip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n\t\t\t} else if (roughness >= r5) {\n\t\t\t\tmip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n\t\t\t} else if (roughness >= r6) {\n\t\t\t\tmip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n\t\t\t} else {\n\t\t\t\tmip = -2.0 * log2(1.16 * roughness);// 1.16 = 1.79^0.25\n\t\t\t}\n\t\t\treturn mip;\n\t\t}`, defines );\n\n\treturn {\n\t\tbilinearCubeUV: bilinearCubeUV,\n\t\troughnessToMip: roughnessToMip,\n\t\tm0: m0,\n\t\tcubeUV_maxMipLevel: cubeUV_maxMipLevel\n\t};\n\n} )();\n\nTextureCubeUVNode.prototype.nodeType = 'TextureCubeUV';\n\nexport { TextureCubeUVNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { TextureCubeUVNode } from './TextureCubeUVNode.js';\nimport { ReflectNode } from '../accessors/ReflectNode.js';\nimport { NormalNode } from '../accessors/NormalNode.js';\n\nclass TextureCubeNode extends TempNode {\n\n\tconstructor( value, uv, bias ) {\n\n\t\tsuper( 'v4' );\n\n\t\tthis.value = value;\n\n\t\tthis.radianceNode = new TextureCubeUVNode(\n\t\t\tthis.value,\n\t\t\tuv || new ReflectNode( ReflectNode.VECTOR ),\n\t\t\t// bias should be replaced in builder.context in build process\n\t\t\tbias\n\t\t);\n\n\t\tthis.irradianceNode = new TextureCubeUVNode(\n\t\t\tthis.value,\n\t\t\tnew NormalNode( NormalNode.WORLD ),\n\t\t\tnew FloatNode( 1 ).setReadonly( true )\n\t\t);\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tbuilder.require( 'irradiance' );\n\n\t\t\tif ( builder.context.bias ) {\n\n\t\t\t\tbuilder.context.bias.setTexture( this.value );\n\n\t\t\t}\n\n\t\t\tconst scopeNode = builder.slot === 'irradiance' ? this.irradianceNode : this.radianceNode;\n\n\t\t\treturn scopeNode.build( builder, output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.TextureCubeNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\treturn builder.format( 'vec4( 0.0 )', this.getType( builder ), output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nTextureCubeNode.prototype.nodeType = 'TextureCube';\n\nexport { TextureCubeNode };\n", "import {\n\tCubeReflectionMapping,\n\tCubeRefractionMapping,\n\tCubeUVReflectionMapping,\n\tCubeUVRefractionMapping,\n\tLinearEncoding,\n\tsRGBEncoding\n} from 'three';\n\nimport { NodeUniform } from './NodeUniform.js';\nimport { NodeUtils } from './NodeUtils.js';\nimport { NodeLib } from './NodeLib.js';\nimport { FunctionNode } from './FunctionNode.js';\nimport { ConstNode } from './ConstNode.js';\nimport { StructNode } from './StructNode.js';\nimport { Vector2Node } from '../inputs/Vector2Node.js';\nimport { Vector3Node } from '../inputs/Vector3Node.js';\nimport { Vector4Node } from '../inputs/Vector4Node.js';\nimport { TextureNode } from '../inputs/TextureNode.js';\nimport { CubeTextureNode } from '../inputs/CubeTextureNode.js';\nimport { TextureCubeNode } from '../misc/TextureCubeNode.js';\n\n\nconst elements = NodeUtils.elements,\n\tconstructors = [ 'float', 'vec2', 'vec3', 'vec4' ],\n\tconvertFormatToType = {\n\t\tfloat: 'f',\n\t\tvec2: 'v2',\n\t\tvec3: 'v3',\n\t\tvec4: 'v4',\n\t\tmat4: 'v4',\n\t\tint: 'i',\n\t\tbool: 'b'\n\t},\n\tconvertTypeToFormat = {\n\t\tt: 'sampler2D',\n\t\ttc: 'samplerCube',\n\t\tb: 'bool',\n\t\ti: 'int',\n\t\tf: 'float',\n\t\tc: 'vec3',\n\t\tv2: 'vec2',\n\t\tv3: 'vec3',\n\t\tv4: 'vec4',\n\t\tm3: 'mat3',\n\t\tm4: 'mat4'\n\t};\n\nclass NodeBuilder {\n\n\tconstructor() {\n\n\t\tthis.slots = [];\n\t\tthis.caches = [];\n\t\tthis.contexts = [];\n\n\t\tthis.keywords = {};\n\n\t\tthis.nodeData = {};\n\n\t\tthis.requires = {\n\t\t\tuv: [],\n\t\t\tcolor: [],\n\t\t\tlights: false,\n\t\t\tfog: false,\n\t\t\ttransparent: false,\n\t\t\tirradiance: false\n\t\t};\n\n\t\tthis.includes = {\n\t\t\tconsts: [],\n\t\t\tfunctions: [],\n\t\t\tstructs: []\n\t\t};\n\n\t\tthis.attributes = {};\n\n\t\tthis.prefixCode = /* glsl */`\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\t\t#define texCube(a, b) textureCube(a, b)\n\t\t\t\t#define texCubeBias(a, b, c) textureCubeLodEXT(a, b, c)\n\n\t\t\t\t#define tex2D(a, b) texture2D(a, b)\n\t\t\t\t#define tex2DBias(a, b, c) texture2DLodEXT(a, b, c)\n\n\t\t\t#else\n\n\t\t\t\t#define texCube(a, b) textureCube(a, b)\n\t\t\t\t#define texCubeBias(a, b, c) textureCube(a, b, c)\n\n\t\t\t\t#define tex2D(a, b) texture2D(a, b)\n\t\t\t\t#define tex2DBias(a, b, c) texture2D(a, b, c)\n\n\t\t\t#endif\n\n\t\t\t#include <packing>\n\t\t\t#include <common>`;\n\n\t\tthis.parsCode = {\n\t\t\tvertex: '',\n\t\t\tfragment: ''\n\t\t};\n\n\t\tthis.code = {\n\t\t\tvertex: '',\n\t\t\tfragment: ''\n\t\t};\n\n\t\tthis.nodeCode = {\n\t\t\tvertex: '',\n\t\t\tfragment: ''\n\t\t};\n\n\t\tthis.resultCode = {\n\t\t\tvertex: '',\n\t\t\tfragment: ''\n\t\t};\n\n\t\tthis.finalCode = {\n\t\t\tvertex: '',\n\t\t\tfragment: ''\n\t\t};\n\n\t\tthis.inputs = {\n\t\t\tuniforms: {\n\t\t\t\tlist: [],\n\t\t\t\tvertex: [],\n\t\t\t\tfragment: []\n\t\t\t},\n\t\t\tvars: {\n\t\t\t\tvarying: [],\n\t\t\t\tvertex: [],\n\t\t\t\tfragment: []\n\t\t\t}\n\t\t};\n\n\t\t// send to material\n\n\t\tthis.defines = {};\n\n\t\tthis.uniforms = {};\n\n\t\tthis.extensions = {};\n\n\t\tthis.updaters = [];\n\n\t\tthis.nodes = [];\n\n\t\t// --\n\n\t\tthis.analyzing = false;\n\n\t}\n\n\tbuild( vertex, fragment ) {\n\n\t\tthis.buildShader( 'vertex', vertex );\n\t\tthis.buildShader( 'fragment', fragment );\n\n\t\tfor ( let i = 0; i < this.requires.uv.length; i ++ ) {\n\n\t\t\tif ( this.requires.uv[ i ] ) {\n\n\t\t\t\tconst uvIndex = i > 0 ? i + 1 : '';\n\n\t\t\t\tthis.addVaryCode( 'varying vec2 vUv' + uvIndex + ';' );\n\n\t\t\t\tif ( i > 0 ) {\n\n\t\t\t\t\tthis.addVertexParsCode( 'attribute vec2 uv' + uvIndex + ';' );\n\n\t\t\t\t}\n\n\t\t\t\tthis.addVertexFinalCode( 'vUv' + uvIndex + ' = uv' + uvIndex + ';' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.requires.color[ 0 ] ) {\n\n\t\t\tthis.addVaryCode( 'varying vec4 vColor;' );\n\t\t\tthis.addVertexParsCode( 'attribute vec4 color;' );\n\n\t\t\tthis.addVertexFinalCode( 'vColor = color;' );\n\n\t\t}\n\n\t\tif ( this.requires.color[ 1 ] ) {\n\n\t\t\tthis.addVaryCode( 'varying vec4 vColor2;' );\n\t\t\tthis.addVertexParsCode( 'attribute vec4 color2;' );\n\n\t\t\tthis.addVertexFinalCode( 'vColor2 = color2;' );\n\n\t\t}\n\n\t\tif ( this.requires.position ) {\n\n\t\t\tthis.addVaryCode( 'varying vec3 vPosition;' );\n\n\t\t\tthis.addVertexFinalCode( 'vPosition = transformed;' );\n\n\t\t}\n\n\t\tif ( this.requires.worldPosition ) {\n\n\t\t\tthis.addVaryCode( 'varying vec3 vWPosition;' );\n\n\t\t\tthis.addVertexFinalCode( 'vWPosition = ( modelMatrix * vec4( transformed, 1.0 ) ).xyz;' );\n\n\t\t}\n\n\t\tif ( this.requires.normal ) {\n\n\t\t\tthis.addVaryCode( 'varying vec3 vObjectNormal;' );\n\n\t\t\tthis.addVertexFinalCode( 'vObjectNormal = normal;' );\n\n\t\t}\n\n\t\tif ( this.requires.worldNormal ) {\n\n\t\t\tthis.addVaryCode( 'varying vec3 vWNormal;' );\n\n\t\t\tthis.addVertexFinalCode( 'vWNormal = inverseTransformDirection( transformedNormal, viewMatrix ).xyz;' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tbuildShader( shader, node ) {\n\n\t\tthis.resultCode[ shader ] = node.build( this.setShader( shader ), 'v4' );\n\n\t}\n\n\tsetMaterial( material, renderer ) {\n\n\t\tthis.material = material;\n\t\tthis.renderer = renderer;\n\n\t\tthis.requires.lights = material.lights;\n\t\tthis.requires.fog = material.fog;\n\n\t\tthis.mergeDefines( material.defines );\n\n\t\treturn this;\n\n\t}\n\n\taddFlow( slot, cache, context ) {\n\n\t\treturn this.addSlot( slot ).addCache( cache ).addContext( context );\n\n\t}\n\n\tremoveFlow() {\n\n\t\treturn this.removeSlot().removeCache().removeContext();\n\n\t}\n\n\taddCache( name ) {\n\n\t\tthis.cache = name || '';\n\t\tthis.caches.push( this.cache );\n\n\t\treturn this;\n\n\t}\n\n\tremoveCache() {\n\n\t\tthis.caches.pop();\n\t\tthis.cache = this.caches[ this.caches.length - 1 ] || '';\n\n\t\treturn this;\n\n\t}\n\n\taddContext( context ) {\n\n\t\tthis.context = Object.assign( {}, this.context, context );\n\t\tthis.context.extra = this.context.extra || {};\n\n\t\tthis.contexts.push( this.context );\n\n\t\treturn this;\n\n\t}\n\n\tremoveContext() {\n\n\t\tthis.contexts.pop();\n\t\tthis.context = this.contexts[ this.contexts.length - 1 ] || {};\n\n\t\treturn this;\n\n\t}\n\n\taddSlot( name = '' ) {\n\n\t\tthis.slot = name;\n\t\tthis.slots.push( this.slot );\n\n\t\treturn this;\n\n\t}\n\n\tremoveSlot() {\n\n\t\tthis.slots.pop();\n\t\tthis.slot = this.slots[ this.slots.length - 1 ] || '';\n\n\t\treturn this;\n\n\t}\n\n\taddVertexCode( code ) {\n\n\t\tthis.addCode( code, 'vertex' );\n\n\t}\n\n\taddFragmentCode( code ) {\n\n\t\tthis.addCode( code, 'fragment' );\n\n\t}\n\n\taddCode( code, shader ) {\n\n\t\tthis.code[ shader || this.shader ] += code + '\\n';\n\n\t}\n\n\taddVertexNodeCode( code ) {\n\n\t\tthis.addNodeCode( code, 'vertex' );\n\n\t}\n\n\taddFragmentNodeCode( code ) {\n\n\t\tthis.addNodeCode( code, 'fragment' );\n\n\t}\n\n\taddNodeCode( code, shader ) {\n\n\t\tthis.nodeCode[ shader || this.shader ] += code + '\\n';\n\n\t}\n\n\tclearNodeCode( shader ) {\n\n\t\tshader = shader || this.shader;\n\n\t\tconst code = this.nodeCode[ shader ];\n\n\t\tthis.nodeCode[ shader ] = '';\n\n\t\treturn code;\n\n\t}\n\n\tclearVertexNodeCode( ) {\n\n\t\treturn this.clearNodeCode( 'vertex' );\n\n\t}\n\n\tclearFragmentNodeCode( ) {\n\n\t\treturn this.clearNodeCode( 'fragment' );\n\n\t}\n\n\taddVertexFinalCode( code ) {\n\n\t\tthis.addFinalCode( code, 'vertex' );\n\n\t}\n\n\taddFragmentFinalCode( code ) {\n\n\t\tthis.addFinalCode( code, 'fragment' );\n\n\t}\n\n\taddFinalCode( code, shader ) {\n\n\t\tthis.finalCode[ shader || this.shader ] += code + '\\n';\n\n\t}\n\n\taddVertexParsCode( code ) {\n\n\t\tthis.addParsCode( code, 'vertex' );\n\n\t}\n\n\taddFragmentParsCode( code ) {\n\n\t\tthis.addParsCode( code, 'fragment' );\n\n\t}\n\n\taddParsCode( code, shader ) {\n\n\t\tthis.parsCode[ shader || this.shader ] += code + '\\n';\n\n\t}\n\n\taddVaryCode( code ) {\n\n\t\tthis.addVertexParsCode( code );\n\t\tthis.addFragmentParsCode( code );\n\n\t}\n\n\tisCache( name ) {\n\n\t\treturn this.caches.indexOf( name ) !== - 1;\n\n\t}\n\n\tisSlot( name ) {\n\n\t\treturn this.slots.indexOf( name ) !== - 1;\n\n\t}\n\n\tdefine( name, value ) {\n\n\t\tthis.defines[ name ] = value === undefined ? 1 : value;\n\n\t}\n\n\trequire( name ) {\n\n\t\tthis.requires[ name ] = true;\n\n\t}\n\n\tisDefined( name ) {\n\n\t\treturn this.defines[ name ] !== undefined;\n\n\t}\n\n\tgetVar( uuid, type, ns, shader = 'varying', prefix = 'V', label = '' ) {\n\n\t\tconst vars = this.getVars( shader );\n\t\tlet data = vars[ uuid ];\n\n\t\tif ( ! data ) {\n\n\t\t\tconst index = vars.length,\n\t\t\t\tname = ns ? ns : 'node' + prefix + index + ( label ? '_' + label : '' );\n\n\t\t\tdata = { name: name, type: type };\n\n\t\t\tvars.push( data );\n\t\t\tvars[ uuid ] = data;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tgetTempVar( uuid, type, ns, label ) {\n\n\t\treturn this.getVar( uuid, type, ns, this.shader, 'T', label );\n\n\t}\n\n\tgetAttribute( name, type ) {\n\n\t\tif ( ! this.attributes[ name ] ) {\n\n\t\t\tconst varying = this.getVar( name, type );\n\n\t\t\tthis.addVertexParsCode( 'attribute ' + type + ' ' + name + ';' );\n\t\t\tthis.addVertexFinalCode( varying.name + ' = ' + name + ';' );\n\n\t\t\tthis.attributes[ name ] = { varying: varying, name: name, type: type };\n\n\t\t}\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tgetCode( shader ) {\n\n\t\treturn [\n\t\t\tthis.prefixCode,\n\t\t\tthis.parsCode[ shader ],\n\t\t\tthis.getVarListCode( this.getVars( 'varying' ), 'varying' ),\n\t\t\tthis.getVarListCode( this.inputs.uniforms[ shader ], 'uniform' ),\n\t\t\tthis.getIncludesCode( 'consts', shader ),\n\t\t\tthis.getIncludesCode( 'structs', shader ),\n\t\t\tthis.getIncludesCode( 'functions', shader ),\n\t\t\t'void main() {',\n\t\t\tthis.getVarListCode( this.getVars( shader ) ),\n\t\t\tthis.code[ shader ],\n\t\t\tthis.resultCode[ shader ],\n\t\t\tthis.finalCode[ shader ],\n\t\t\t'}'\n\t\t].join( '\\n' );\n\n\t}\n\n\tgetVarListCode( vars, prefix = '' ) {\n\n\t\tlet code = '';\n\n\t\tfor ( let i = 0, l = vars.length; i < l; ++ i ) {\n\n\t\t\tconst nVar = vars[ i ],\n\t\t\t\ttype = nVar.type,\n\t\t\t\tname = nVar.name;\n\n\t\t\tconst formatType = this.getFormatByType( type );\n\n\t\t\tif ( formatType === undefined ) {\n\n\t\t\t\tthrow new Error( 'Node pars ' + formatType + ' not found.' );\n\n\t\t\t}\n\n\t\t\tcode += prefix + ' ' + formatType + ' ' + name + ';\\n';\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tgetVars( shader ) {\n\n\t\treturn this.inputs.vars[ shader || this.shader ];\n\n\t}\n\n\tgetNodeData( node ) {\n\n\t\tconst uuid = node.isNode ? node.uuid : node;\n\n\t\treturn this.nodeData[ uuid ] = this.nodeData[ uuid ] || {};\n\n\t}\n\n\tcreateUniform( shader, type, node, ns, needsUpdate, label ) {\n\n\t\tconst uniforms = this.inputs.uniforms,\n\t\t\tindex = uniforms.list.length;\n\n\t\tconst uniform = new NodeUniform( {\n\t\t\ttype: type,\n\t\t\tname: ns ? ns : 'nodeU' + index + ( label ? '_' + label : '' ),\n\t\t\tnode: node,\n\t\t\tneedsUpdate: needsUpdate\n\t\t} );\n\n\t\tuniforms.list.push( uniform );\n\n\t\tuniforms[ shader ].push( uniform );\n\t\tuniforms[ shader ][ uniform.name ] = uniform;\n\n\t\tthis.uniforms[ uniform.name ] = uniform;\n\n\t\treturn uniform;\n\n\t}\n\n\tcreateVertexUniform( type, node, ns, needsUpdate, label ) {\n\n\t\treturn this.createUniform( 'vertex', type, node, ns, needsUpdate, label );\n\n\t}\n\n\tcreateFragmentUniform( type, node, ns, needsUpdate, label ) {\n\n\t\treturn this.createUniform( 'fragment', type, node, ns, needsUpdate, label );\n\n\t}\n\n\tinclude( node, parent, source ) {\n\n\t\tlet includesStruct;\n\n\t\tnode = typeof node === 'string' ? NodeLib.get( node ) : node;\n\n\t\tif ( this.context.include === false ) {\n\n\t\t\treturn node.name;\n\n\t\t}\n\n\n\t\tif ( node instanceof FunctionNode ) {\n\n\t\t\tincludesStruct = this.includes.functions;\n\n\t\t} else if ( node instanceof ConstNode ) {\n\n\t\t\tincludesStruct = this.includes.consts;\n\n\t\t} else if ( node instanceof StructNode ) {\n\n\t\t\tincludesStruct = this.includes.structs;\n\n\t\t}\n\n\t\tconst includes = includesStruct[ this.shader ] = includesStruct[ this.shader ] || [];\n\n\t\tif ( node ) {\n\n\t\t\tlet included = includes[ node.name ];\n\n\t\t\tif ( ! included ) {\n\n\t\t\t\tincluded = includes[ node.name ] = {\n\t\t\t\t\tnode: node,\n\t\t\t\t\tdeps: []\n\t\t\t\t};\n\n\t\t\t\tincludes.push( included );\n\n\t\t\t\tincluded.src = node.build( this, 'source' );\n\n\t\t\t}\n\n\t\t\tif ( node instanceof FunctionNode && parent && includes[ parent.name ] && includes[ parent.name ].deps.indexOf( node ) == - 1 ) {\n\n\t\t\t\tincludes[ parent.name ].deps.push( node );\n\n\t\t\t\tif ( node.includes && node.includes.length ) {\n\n\t\t\t\t\tlet i = 0;\n\n\t\t\t\t\tdo {\n\n\t\t\t\t\t\tthis.include( node.includes[ i ++ ], parent );\n\n\t\t\t\t\t} while ( i < node.includes.length );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( source ) {\n\n\t\t\t\tincluded.src = source;\n\n\t\t\t}\n\n\t\t\treturn node.name;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Include not found.' );\n\n\t\t}\n\n\t}\n\n\tcolorToVectorProperties( color ) {\n\n\t\treturn color.replace( 'r', 'x' ).replace( 'g', 'y' ).replace( 'b', 'z' ).replace( 'a', 'w' );\n\n\t}\n\n\tcolorToVector( color ) {\n\n\t\treturn color.replace( /c/g, 'v3' );\n\n\t}\n\n\tgetIncludes( type, shader ) {\n\n\t\treturn this.includes[ type ][ shader || this.shader ];\n\n\t}\n\n\tgetIncludesCode( type, shader ) {\n\n\t\tlet includes = this.getIncludes( type, shader );\n\n\t\tif ( ! includes ) return '';\n\n\t\tlet code = '';\n\n\t\tincludes = includes.sort( sortByPosition );\n\n\t\tfor ( let i = 0; i < includes.length; i ++ ) {\n\n\t\t\tif ( includes[ i ].src ) code += includes[ i ].src + '\\n';\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tgetConstructorFromLength( len ) {\n\n\t\treturn constructors[ len - 1 ];\n\n\t}\n\n\tisTypeMatrix( format ) {\n\n\t\treturn /^m/.test( format );\n\n\t}\n\n\tgetTypeLength( type ) {\n\n\t\tif ( type === 'f' ) return 1;\n\n\t\treturn parseInt( this.colorToVector( type ).substr( 1 ) );\n\n\t}\n\n\tgetTypeFromLength( len ) {\n\n\t\tif ( len === 1 ) return 'f';\n\n\t\treturn 'v' + len;\n\n\t}\n\n\tfindNode() {\n\n\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\tconst nodeCandidate = arguments[ i ];\n\n\t\t\tif ( nodeCandidate !== undefined && nodeCandidate.isNode ) {\n\n\t\t\t\treturn nodeCandidate;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tresolve() {\n\n\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\tconst nodeCandidate = arguments[ i ];\n\n\t\t\tif ( nodeCandidate !== undefined ) {\n\n\t\t\t\tif ( nodeCandidate.isNode ) {\n\n\t\t\t\t\treturn nodeCandidate;\n\n\t\t\t\t} else if ( nodeCandidate.isTexture ) {\n\n\t\t\t\t\tswitch ( nodeCandidate.mapping ) {\n\n\t\t\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\t\t\tcase CubeRefractionMapping:\n\n\t\t\t\t\t\t\treturn new CubeTextureNode( nodeCandidate );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\t\t\tcase CubeUVRefractionMapping:\n\n\t\t\t\t\t\t\treturn new TextureCubeNode( new TextureNode( nodeCandidate ) );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\treturn new TextureNode( nodeCandidate );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( nodeCandidate.isVector2 ) {\n\n\t\t\t\t\treturn new Vector2Node( nodeCandidate );\n\n\t\t\t\t} else if ( nodeCandidate.isVector3 ) {\n\n\t\t\t\t\treturn new Vector3Node( nodeCandidate );\n\n\t\t\t\t} else if ( nodeCandidate.isVector4 ) {\n\n\t\t\t\t\treturn new Vector4Node( nodeCandidate );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tformat( code, from, to ) {\n\n\t\tconst typeToType = this.colorToVector( to + ' <- ' + from );\n\n\t\tswitch ( typeToType ) {\n\n\t\t\tcase 'f <- v2' : return code + '.x';\n\t\t\tcase 'f <- v3' : return code + '.x';\n\t\t\tcase 'f <- v4' : return code + '.x';\n\t\t\tcase 'f <- i' :\n\t\t\tcase 'f <- b' :\treturn 'float( ' + code + ' )';\n\n\t\t\tcase 'v2 <- f' : return 'vec2( ' + code + ' )';\n\t\t\tcase 'v2 <- v3': return code + '.xy';\n\t\t\tcase 'v2 <- v4': return code + '.xy';\n\t\t\tcase 'v2 <- i' :\n\t\t\tcase 'v2 <- b' : return 'vec2( float( ' + code + ' ) )';\n\n\t\t\tcase 'v3 <- f' : return 'vec3( ' + code + ' )';\n\t\t\tcase 'v3 <- v2': return 'vec3( ' + code + ', 0.0 )';\n\t\t\tcase 'v3 <- v4': return code + '.xyz';\n\t\t\tcase 'v3 <- i' :\n\t\t\tcase 'v3 <- b' : return 'vec2( float( ' + code + ' ) )';\n\n\t\t\tcase 'v4 <- f' : return 'vec4( ' + code + ' )';\n\t\t\tcase 'v4 <- v2': return 'vec4( ' + code + ', 0.0, 1.0 )';\n\t\t\tcase 'v4 <- v3': return 'vec4( ' + code + ', 1.0 )';\n\t\t\tcase 'v4 <- i' :\n\t\t\tcase 'v4 <- b' : return 'vec4( float( ' + code + ' ) )';\n\n\t\t\tcase 'i <- f' :\n\t\t\tcase 'i <- b' : return 'int( ' + code + ' )';\n\t\t\tcase 'i <- v2' : return 'int( ' + code + '.x )';\n\t\t\tcase 'i <- v3' : return 'int( ' + code + '.x )';\n\t\t\tcase 'i <- v4' : return 'int( ' + code + '.x )';\n\n\t\t\tcase 'b <- f' : return '( ' + code + ' != 0.0 )';\n\t\t\tcase 'b <- v2' : return '( ' + code + ' != vec2( 0.0 ) )';\n\t\t\tcase 'b <- v3' : return '( ' + code + ' != vec3( 0.0 ) )';\n\t\t\tcase 'b <- v4' : return '( ' + code + ' != vec4( 0.0 ) )';\n\t\t\tcase 'b <- i' : return '( ' + code + ' != 0 )';\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tgetTypeByFormat( format ) {\n\n\t\treturn convertFormatToType[ format ] || format;\n\n\t}\n\n\tgetFormatByType( type ) {\n\n\t\treturn convertTypeToFormat[ type ] || type;\n\n\t}\n\n\tgetUuid( uuid, useCache ) {\n\n\t\tuseCache = useCache !== undefined ? useCache : true;\n\n\t\tif ( useCache && this.cache ) uuid = this.cache + '-' + uuid;\n\n\t\treturn uuid;\n\n\t}\n\n\tgetElementByIndex( index ) {\n\n\t\treturn elements[ index ];\n\n\t}\n\n\tgetIndexByElement( elm ) {\n\n\t\treturn elements.indexOf( elm );\n\n\t}\n\n\tisShader( shader ) {\n\n\t\treturn this.shader === shader;\n\n\t}\n\n\tsetShader( shader ) {\n\n\t\tthis.shader = shader;\n\n\t\treturn this;\n\n\t}\n\n\tmergeDefines( defines ) {\n\n\t\tfor ( const name in defines ) {\n\n\t\t\tthis.defines[ name ] = defines[ name ];\n\n\t\t}\n\n\t\treturn this.defines;\n\n\t}\n\n\tmergeUniform( uniforms ) {\n\n\t\tfor ( const name in uniforms ) {\n\n\t\t\tthis.uniforms[ name ] = uniforms[ name ];\n\n\t\t}\n\n\t\treturn this.uniforms;\n\n\t}\n\n\tgetTextureEncodingFromMap( map ) {\n\n\t\tlet encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t} else if ( map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.' );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\tif ( encoding === LinearEncoding && this.context.gamma ) {\n\n\t\t\tencoding = sRGBEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n}\n\nfunction sortByPosition( a, b ) {\n\n\treturn a.deps.length - b.deps.length;\n\n}\n\nexport { NodeBuilder };\n", "import { InputNode } from '../core/InputNode.js';\n\nclass BoolNode extends InputNode {\n\n\tconstructor( value ) {\n\n\t\tsuper( 'b' );\n\n\t\tthis.value = Boolean( value );\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type/*, ns, needsUpdate */ ) {\n\n\t\treturn builder.format( this.value, type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value;\n\n\t\t\tif ( this.readonly === true ) data.readonly = true;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nBoolNode.prototype.nodeType = 'Bool';\n\nexport { BoolNode };\n", "import { InputNode } from '../core/InputNode.js';\n\nclass IntNode extends InputNode {\n\n\tconstructor( value ) {\n\n\t\tsuper( 'i' );\n\n\t\tthis.value = Math.floor( value || 0 );\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type/*, ns, needsUpdate */ ) {\n\n\t\treturn builder.format( this.value, type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value;\n\n\t\t\tif ( this.readonly === true ) data.readonly = true;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nIntNode.prototype.nodeType = 'Int';\n\nexport { IntNode };\n", "import { Color } from 'three';\n\nimport { InputNode } from '../core/InputNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass ColorNode extends InputNode {\n\n\tconstructor( color, g, b ) {\n\n\t\tsuper( 'c' );\n\n\t\tthis.value = color instanceof Color ? color : new Color( color || 0, g, b );\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type/*, ns, needsUpdate */ ) {\n\n\t\treturn builder.format( 'vec3( ' + this.r + ', ' + this.g + ', ' + this.b + ' )', type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value.copy( source );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tvar data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.r = this.r;\n\t\t\tdata.g = this.g;\n\t\t\tdata.b = this.b;\n\n\t\t\tif ( this.readonly === true ) data.readonly = true;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nColorNode.prototype.nodeType = 'Color';\n\nNodeUtils.addShortcuts( ColorNode.prototype, 'value', [ 'r', 'g', 'b' ] );\n\nexport { ColorNode };\n", "import { Matrix3 } from 'three';\n\nimport { InputNode } from '../core/InputNode.js';\n\nclass Matrix3Node extends InputNode {\n\n\tconstructor( matrix ) {\n\n\t\tsuper( 'm3' );\n\n\t\tthis.value = matrix || new Matrix3();\n\n\t}\n\n\tget elements() {\n\n\t\treturn this.value.elements;\n\n\t}\n\n\tset elements( val ) {\n\n\t\tthis.value.elements = val;\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type/*, ns, needsUpdate */ ) {\n\n\t\treturn builder.format( 'mat3( ' + this.value.elements.join( ', ' ) + ' )', type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value.fromArray( source.elements );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.elements = this.value.elements.concat();\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nMatrix3Node.prototype.nodeType = 'Matrix3';\n\nexport { Matrix3Node };\n", "import { Matrix4 } from 'three';\n\nimport { InputNode } from '../core/InputNode.js';\n\nclass Matrix4Node extends InputNode {\n\n\tconstructor( matrix ) {\n\n\t\tsuper( 'm4' );\n\n\t\tthis.value = matrix || new Matrix4();\n\n\t}\n\n\tget elements() {\n\n\t\treturn this.value.elements;\n\n\t}\n\n\tset elements( val ) {\n\n\t\tthis.value.elements = val;\n\n\t}\n\n\tgenerateReadonly( builder, output, uuid, type /*, ns, needsUpdate */ ) {\n\n\t\treturn builder.format( 'mat4( ' + this.value.elements.join( ', ' ) + ' )', type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scope.value.fromArray( source.elements );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.elements = this.value.elements.concat();\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nMatrix4Node.prototype.nodeType = 'Matrix4';\n\nexport { Matrix4Node };\n", "import { InputNode } from '../core/InputNode.js';\nimport { TextureNode } from './TextureNode.js';\n\nclass ScreenNode extends TextureNode {\n\n\tconstructor( uv ) {\n\n\t\tsuper( undefined, uv );\n\n\t}\n\n\tgetUnique() {\n\n\t\treturn true;\n\n\t}\n\n\tgetTexture( builder, output ) {\n\n\t\treturn InputNode.prototype.generate.call( this, builder, output, this.getUuid(), 't', 'renderTexture' );\n\n\t}\n\n}\n\nScreenNode.prototype.nodeType = 'Screen';\n\nexport { ScreenNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { InputNode } from '../core/InputNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nimport { OperatorNode } from '../math/OperatorNode.js';\nimport { TextureNode } from './TextureNode.js';\nimport { Matrix4Node } from './Matrix4Node.js';\n\nclass ReflectorNode extends TempNode {\n\n\tconstructor( mirror ) {\n\n\t\tsuper( 'v4' );\n\n\t\tif ( mirror ) this.setMirror( mirror );\n\n\t}\n\n\tsetMirror( mirror ) {\n\n\t\tthis.mirror = mirror;\n\n\t\tthis.textureMatrix = new Matrix4Node( this.mirror.material.uniforms.textureMatrix.value );\n\n\t\tthis.localPosition = new PositionNode( PositionNode.LOCAL );\n\n\t\tthis.uv = new OperatorNode( this.textureMatrix, this.localPosition, OperatorNode.MUL );\n\t\tthis.uvResult = new OperatorNode( null, this.uv, OperatorNode.ADD );\n\n\t\tthis.texture = new TextureNode( this.mirror.material.uniforms.tDiffuse.value, this.uv, null, true );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tthis.uvResult.a = this.offset;\n\t\t\tthis.texture.uv = this.offset ? this.uvResult : this.uv;\n\n\t\t\tif ( output === 'sampler2D' ) {\n\n\t\t\t\treturn this.texture.build( builder, output );\n\n\t\t\t}\n\n\t\t\treturn builder.format( this.texture.build( builder, this.type ), this.type, output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ReflectorNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\treturn builder.format( 'vec4( 0.0 )', this.type, output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tInputNode.prototype.copy.call( this, source );\n\n\t\tthis.scope.mirror = source.mirror;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.mirror = this.mirror.uuid;\n\n\t\t\tif ( this.offset ) data.offset = this.offset.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nReflectorNode.prototype.nodeType = 'Reflector';\n\nexport { ReflectorNode };\n", "import { InputNode } from '../core/InputNode.js';\n\nclass PropertyNode extends InputNode {\n\n\tconstructor( object, property, type ) {\n\n\t\tsuper( type );\n\n\t\tthis.object = object;\n\t\tthis.property = property;\n\n\t}\n\n\tget value() {\n\n\t\treturn this.object[ this.property ];\n\n\t}\n\n\tset value( val ) {\n\n\t\tthis.object[ this.property ] = val;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value;\n\t\t\tdata.property = this.property;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nPropertyNode.prototype.nodeType = 'Property';\n\nexport { PropertyNode };\n", "import { Node } from '../../core/Node.js';\n\nclass RawNode extends Node {\n\n\tconstructor( value ) {\n\n\t\tsuper( 'v4' );\n\n\t\tthis.value = value;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst data = this.value.analyzeAndFlow( builder, this.type );\n\t\tlet code = data.code + '\\n';\n\n\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\tcode += 'gl_Position = ' + data.result + ';';\n\n\t\t} else {\n\n\t\t\tcode += 'gl_FragColor = ' + data.result + ';';\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nRawNode.prototype.nodeType = 'Raw';\n\nexport { RawNode };\n", "import {\n\tFrontSide,\n\tLessEqualDepth,\n\tNoColors,\n\tNormalBlending,\n\tShaderMaterial\n} from 'three';\n\nimport { NodeBuilder } from '../core/NodeBuilder.js';\nimport { ColorNode } from '../inputs/ColorNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nimport { RawNode } from './nodes/RawNode.js';\n\nclass NodeMaterial extends ShaderMaterial {\n\n\tconstructor( vertex, fragment ) {\n\n\t\tsuper();\n\n\t\tthis.vertex = vertex || new RawNode( new PositionNode( PositionNode.PROJECTION ) );\n\t\tthis.fragment = fragment || new RawNode( new ColorNode( 0xFF0000 ) );\n\n\t\tthis.updaters = [];\n\n\t\tthis.type = 'NodeMaterial';\n\n\t}\n\n\tget properties() {\n\n\t\treturn this.fragment.properties;\n\n\t}\n\n\tget needsUpdate() {\n\n\t\treturn this.needsCompile;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\t\tthis.needsCompile = value;\n\n\t}\n\n\tonBeforeCompile( shader, renderer ) {\n\n\t\tthis.build( { renderer: renderer } );\n\n\t\tshader.defines = this.defines;\n\t\tshader.uniforms = this.uniforms;\n\t\tshader.vertexShader = this.vertexShader;\n\t\tshader.fragmentShader = this.fragmentShader;\n\n\t\tshader.extensionDerivatives = ( this.extensions.derivatives === true );\n\t\tshader.extensionFragDepth = ( this.extensions.fragDepth === true );\n\t\tshader.extensionDrawBuffers = ( this.extensions.drawBuffers === true );\n\t\tshader.extensionShaderTextureLOD = ( this.extensions.shaderTextureLOD === true );\n\n\t}\n\n\tcustomProgramCacheKey() {\n\n\t\tconst hash = this.getHash();\n\n\t\treturn hash;\n\n\t}\n\n\tgetHash() {\n\n\t\tlet hash = '{';\n\n\t\thash += '\"vertex\":' + this.vertex.getHash() + ',';\n\t\thash += '\"fragment\":' + this.fragment.getHash();\n\n\t\thash += '}';\n\n\t\treturn hash;\n\n\t}\n\n\tupdateFrame( frame ) {\n\n\t\tfor ( let i = 0; i < this.updaters.length; ++ i ) {\n\n\t\t\tframe.updateNode( this.updaters[ i ] );\n\n\t\t}\n\n\t}\n\n\tbuild( params = {} ) {\n\n\t\tconst builder = params.builder || new NodeBuilder();\n\n\t\tbuilder.setMaterial( this, params.renderer );\n\t\tbuilder.build( this.vertex, this.fragment );\n\n\t\tthis.vertexShader = builder.getCode( 'vertex' );\n\t\tthis.fragmentShader = builder.getCode( 'fragment' );\n\n\t\tthis.defines = builder.defines;\n\t\tthis.uniforms = builder.uniforms;\n\t\tthis.extensions = builder.extensions;\n\t\tthis.updaters = builder.updaters;\n\n\t\tthis.fog = builder.requires.fog;\n\t\tthis.lights = builder.requires.lights;\n\n\t\tthis.transparent = builder.requires.transparent || this.blending > NormalBlending;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tconst uuid = this.uuid;\n\n\t\tfor ( const name in source ) {\n\n\t\t\tthis[ name ] = source[ name ];\n\n\t\t}\n\n\t\tthis.uuid = uuid;\n\n\t\tif ( source.userData !== undefined ) {\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t}\n\n\t\tif ( meta && ! meta.materials ) meta.materials = {};\n\n\t\tif ( ! meta.materials[ this.uuid ] ) {\n\n\t\t\tconst data = {};\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tmeta.materials[ data.uuid ] = data;\n\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\n\t\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\n\t\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\n\n\t\t\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\t\tif ( this.visible === false ) data.visible = false;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t\tdata.fog = this.fog;\n\t\t\tdata.lights = this.lights;\n\n\t\t\tdata.vertex = this.vertex.toJSON( meta ).uuid;\n\t\t\tdata.fragment = this.fragment.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tmeta.material = this.uuid;\n\n\t\treturn meta;\n\n\t}\n\n}\n\nNodeMaterial.prototype.isNodeMaterial = true;\n\nexport { NodeMaterial };\n", "import {\n\tMesh,\n\tOrthographicCamera,\n\tPlaneGeometry,\n\tScene,\n\tWebGLRenderTarget\n} from 'three';\n\nimport { NodeBuilder } from '../core/NodeBuilder.js';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { TextureNode } from './TextureNode.js';\n\nclass RTTNode extends TextureNode {\n\n\tconstructor( width, height, input, options = {} ) {\n\n\t\tconst renderTarget = new WebGLRenderTarget( width, height, options );\n\n\t\tsuper( renderTarget.texture );\n\n\t\tthis.input = input;\n\n\t\tthis.clear = options.clear !== undefined ? options.clear : true;\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tthis.material = new NodeMaterial();\n\n\t\tthis.camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\t\tthis.scene = new Scene();\n\n\t\tthis.quad = new Mesh( new PlaneGeometry( 2, 2 ), this.material );\n\t\tthis.quad.frustumCulled = false; // Avoid getting clipped\n\t\tthis.scene.add( this.quad );\n\n\t\tthis.render = true;\n\n\n\t}\n\n\tbuild( builder, output, uuid ) {\n\n\t\tconst rttBuilder = new NodeBuilder();\n\t\trttBuilder.nodes = builder.nodes;\n\t\trttBuilder.updaters = builder.updaters;\n\n\t\tthis.material.fragment.value = this.input;\n\t\tthis.material.build( { builder: rttBuilder } );\n\n\t\treturn super.build( builder, output, uuid );\n\n\t}\n\n\tupdateFramesaveTo( frame ) {\n\n\t\tthis.saveTo.render = false;\n\n\t\tif ( this.saveTo !== this.saveToCurrent ) {\n\n\t\t\tif ( this.saveToMaterial ) this.saveToMaterial.dispose();\n\n\t\t\tconst material = new NodeMaterial();\n\t\t\tmaterial.fragment.value = this;\n\t\t\tmaterial.build();\n\n\t\t\tconst scene = new Scene();\n\n\t\t\tconst quad = new Mesh( new PlaneGeometry( 2, 2 ), material );\n\t\t\tquad.frustumCulled = false; // Avoid getting clipped\n\t\t\tscene.add( quad );\n\n\t\t\tthis.saveToScene = scene;\n\t\t\tthis.saveToMaterial = material;\n\n\t\t}\n\n\t\tthis.saveToCurrent = this.saveTo;\n\n\t\tframe.renderer.setRenderTarget( this.saveTo.renderTarget );\n\t\tif ( this.saveTo.clear ) frame.renderer.clear();\n\t\tframe.renderer.render( this.saveToScene, this.camera );\n\n\t}\n\n\tupdateFrame( frame ) {\n\n\t\tif ( frame.renderer ) {\n\n\t\t\t// from the second frame\n\n\t\t\tif ( this.saveTo && this.saveTo.render === false ) {\n\n\t\t\t\tthis.updateFramesaveTo( frame );\n\n\t\t\t}\n\n\t\t\tif ( this.render ) {\n\n\t\t\t\tif ( this.material.uniforms.renderTexture ) {\n\n\t\t\t\t\tthis.material.uniforms.renderTexture.value = frame.renderTexture;\n\n\t\t\t\t}\n\n\t\t\t\tframe.renderer.setRenderTarget( this.renderTarget );\n\t\t\t\tif ( this.clear ) frame.renderer.clear();\n\t\t\t\tframe.renderer.render( this.scene, this.camera );\n\n\t\t\t}\n\n\t\t\t// first frame\n\n\t\t\tif ( this.saveTo && this.saveTo.render === true ) {\n\n\t\t\t\tthis.updateFramesaveTo( frame );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'RTTNode need a renderer in NodeFrame' );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.saveTo = source.saveTo;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = super.toJSON( meta );\n\n\t\t\tif ( this.saveTo ) data.saveTo = this.saveTo.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nRTTNode.prototype.nodeType = 'RTT';\n\nexport { RTTNode };\n", "import { TempNode } from '../core/TempNode.js';\n\nvar vertexDict = [ 'color', 'color2' ],\n\tfragmentDict = [ 'vColor', 'vColor2' ];\n\nclass ColorsNode extends TempNode {\n\n\tconstructor( index ) {\n\n\t\tsuper( 'v4', { shared: false } );\n\n\t\tthis.index = index || 0;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tbuilder.requires.color[ this.index ] = true;\n\n\t\tconst result = builder.isShader( 'vertex' ) ? vertexDict[ this.index ] : fragmentDict[ this.index ];\n\n\t\treturn builder.format( result, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.index = source.index;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.index = this.index;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nColorsNode.prototype.nodeType = 'Colors';\n\nexport { ColorsNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\n\nclass CameraNode extends TempNode {\n\n\tconstructor( scope, camera ) {\n\n\t\tsuper( 'v3' );\n\n\t\tthis.setScope( scope || CameraNode.POSITION );\n\t\tthis.setCamera( camera );\n\n\t}\n\n\tsetCamera( camera ) {\n\n\t\tthis.camera = camera;\n\t\tthis.updateFrame = camera !== undefined ? this.onUpdateFrame : undefined;\n\n\t}\n\n\tsetScope( scope ) {\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase CameraNode.DEPTH:\n\n\t\t\t\tdelete this.near;\n\t\t\t\tdelete this.far;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tthis.scope = scope;\n\n\t\tswitch ( scope ) {\n\n\t\t\tcase CameraNode.DEPTH:\n\n\t\t\t\tconst camera = this.camera;\n\n\t\t\t\tthis.near = new FloatNode( camera ? camera.near : 1 );\n\t\t\t\tthis.far = new FloatNode( camera ? camera.far : 1200 );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tgetType( /* builder */ ) {\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase CameraNode.DEPTH:\n\n\t\t\t\treturn 'f';\n\n\t\t}\n\n\t\treturn this.type;\n\n\t}\n\n\tgetUnique( /* builder */ ) {\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase CameraNode.DEPTH:\n\t\t\tcase CameraNode.TO_VERTEX:\n\n\t\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tgetShared( /* builder */ ) {\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase CameraNode.POSITION:\n\n\t\t\t\treturn false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet result;\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase CameraNode.POSITION:\n\n\t\t\t\tresult = 'cameraPosition';\n\n\t\t\t\tbreak;\n\n\t\t\tcase CameraNode.DEPTH:\n\n\t\t\t\tconst depthColor = builder.include( CameraNode.Nodes.depthColor );\n\n\t\t\t\tresult = depthColor + '( ' + this.near.build( builder, 'f' ) + ', ' + this.far.build( builder, 'f' ) + ' )';\n\n\t\t\t\tbreak;\n\n\t\t\tcase CameraNode.TO_VERTEX:\n\n\t\t\t\tresult = 'normalize( ' + new PositionNode( PositionNode.WORLD ).build( builder, 'v3' ) + ' - cameraPosition )';\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn builder.format( result, this.getType( builder ), output );\n\n\t}\n\n\tonUpdateFrame( /* frame */ ) {\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase CameraNode.DEPTH:\n\n\t\t\t\tconst camera = this.camera;\n\n\t\t\t\tthis.near.value = camera.near;\n\t\t\t\tthis.far.value = camera.far;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.setScope( source.scope );\n\n\t\tif ( source.camera ) {\n\n\t\t\tthis.setCamera( source.camera );\n\n\t\t}\n\n\t\tswitch ( source.scope ) {\n\n\t\t\tcase CameraNode.DEPTH:\n\n\t\t\t\tthis.near.number = source.near;\n\t\t\t\tthis.far.number = source.far;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.scope = this.scope;\n\n\t\t\tif ( this.camera ) data.camera = this.camera.uuid;\n\n\t\t\tswitch ( this.scope ) {\n\n\t\t\t\tcase CameraNode.DEPTH:\n\n\t\t\t\t\tdata.near = this.near.value;\n\t\t\t\t\tdata.far = this.far.value;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nCameraNode.Nodes = ( function () {\n\n\tconst depthColor = new FunctionNode( /* glsl */`\n\t\tfloat depthColor( float mNear, float mFar ) {\n\n\t\t\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\t\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n\t\t\t#else\n\n\t\t\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n\n\t\t\t#endif\n\n\t\t\treturn 1.0 - smoothstep( mNear, mFar, depth );\n\n\t\t}`\n\t );\n\n\treturn {\n\t\tdepthColor: depthColor\n\t};\n\n} )();\n\nCameraNode.POSITION = 'position';\nCameraNode.DEPTH = 'depth';\nCameraNode.TO_VERTEX = 'toVertex';\n\nCameraNode.prototype.nodeType = 'Camera';\n\nexport { CameraNode };\n", "import { TempNode } from '../core/TempNode.js';\n\nclass LightNode extends TempNode {\n\n\tconstructor( scope ) {\n\n\t\tsuper( 'v3', { shared: false } );\n\n\t\tthis.scope = scope || LightNode.TOTAL;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( builder.isCache( 'light' ) ) {\n\n\t\t\treturn builder.format( 'reflectedLight.directDiffuse', this.type, output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LightNode is only compatible in \"light\" channel.' );\n\n\t\t\treturn builder.format( 'vec3( 0.0 )', this.type, output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scope = source.scope;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tvar data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.scope = this.scope;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nLightNode.TOTAL = 'total';\nLightNode.prototype.nodeType = 'Light';\n\nexport { LightNode };\n", "import { Vector2 } from 'three';\n\nimport { Vector2Node } from '../inputs/Vector2Node.js';\n\nclass ResolutionNode extends Vector2Node {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.size = new Vector2();\n\n\t}\n\n\tupdateFrame( frame ) {\n\n\t\tif ( frame.renderer ) {\n\n\t\t\tframe.renderer.getSize( this.size );\n\n\t\t\tconst pixelRatio = frame.renderer.getPixelRatio();\n\n\t\t\tthis.x = this.size.width * pixelRatio;\n\t\t\tthis.y = this.size.height * pixelRatio;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'ResolutionNode need a renderer in NodeFrame' );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.renderer = source.renderer;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.renderer = this.renderer.uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nResolutionNode.prototype.nodeType = 'Resolution';\n\nexport { ResolutionNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { ResolutionNode } from './ResolutionNode.js';\n\nclass ScreenUVNode extends TempNode {\n\n\tconstructor( resolution ) {\n\n\t\tsuper( 'v2' );\n\n\t\tthis.resolution = resolution || new ResolutionNode();\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tlet result;\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tresult = '( gl_FragCoord.xy / ' + this.resolution.build( builder, 'v2' ) + ')';\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ScreenUVNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\tresult = 'vec2( 0.0 )';\n\n\t\t}\n\n\t\treturn builder.format( result, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.resolution = source.resolution;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.resolution = this.resolution.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nScreenUVNode.prototype.nodeType = 'ScreenUV';\n\nexport { ScreenUVNode };\n", "import { TempNode } from '../core/TempNode.js';\n\nclass CondNode extends TempNode {\n\n\tconstructor( a, b, op, ifNode, elseNode ) {\n\n\t\tsuper();\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\n\t\tthis.op = op;\n\n\t\tthis.ifNode = ifNode;\n\t\tthis.elseNode = elseNode;\n\n\t}\n\n\tgetType( builder ) {\n\n\t\tif ( this.ifNode ) {\n\n\t\t\tconst ifType = this.ifNode.getType( builder );\n\t\t\tconst elseType = this.elseNode.getType( builder );\n\n\t\t\tif ( builder.getTypeLength( elseType ) > builder.getTypeLength( ifType ) ) {\n\n\t\t\t\treturn elseType;\n\n\t\t\t}\n\n\t\t\treturn ifType;\n\n\t\t}\n\n\t\treturn 'b';\n\n\t}\n\n\tgetCondType( builder ) {\n\n\t\tif ( builder.getTypeLength( this.b.getType( builder ) ) > builder.getTypeLength( this.a.getType( builder ) ) ) {\n\n\t\t\treturn this.b.getType( builder );\n\n\t\t}\n\n\t\treturn this.a.getType( builder );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getType( builder ),\n\t\t\tcondType = this.getCondType( builder ),\n\t\t\ta = this.a.build( builder, condType ),\n\t\t\tb = this.b.build( builder, condType );\n\n\t\tlet code;\n\n\t\tif ( this.ifNode ) {\n\n\t\t\tconst ifCode = this.ifNode.build( builder, type ),\n\t\t\t\telseCode = this.elseNode.build( builder, type );\n\n\t\t\tcode = '( ' + [ a, this.op, b, '?', ifCode, ':', elseCode ].join( ' ' ) + ' )';\n\n\t\t} else {\n\n\t\t\tcode = '( ' + a + ' ' + this.op + ' ' + b + ' )';\n\n\t\t}\n\n\t\treturn builder.format( code, this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\n\t\tthis.op = source.op;\n\n\t\tthis.ifNode = source.ifNode;\n\t\tthis.elseNode = source.elseNode;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.a = this.a.toJSON( meta ).uuid;\n\t\t\tdata.b = this.b.toJSON( meta ).uuid;\n\n\t\t\tdata.op = this.op;\n\n\t\t\tif ( data.ifNode ) data.ifNode = this.ifNode.toJSON( meta ).uuid;\n\t\t\tif ( data.elseNode ) data.elseNode = this.elseNode.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nCondNode.EQUAL = '==';\nCondNode.NOT_EQUAL = '!=';\nCondNode.GREATER = '>';\nCondNode.GREATER_EQUAL = '>=';\nCondNode.LESS = '<';\nCondNode.LESS_EQUAL = '<=';\nCondNode.AND = '&&';\nCondNode.OR = '||';\n\nCondNode.prototype.nodeType = 'Cond';\n\nexport { CondNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FunctionCallNode } from '../core/FunctionCallNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { UVNode } from '../accessors/UVNode.js';\n\nconst NOISE_COMMON_SRC = `\nvec3 mod289( vec3 x ) {\n\n\treturn x - floor( x * ( 1.0 / 289.0 ) ) * 289.0;\n\n}\n\nvec4 mod289( vec4 x ) {\n\n\treturn x - floor( x * ( 1.0 / 289.0 ) ) * 289.0;\n\n}\n\nvec4 permute( vec4 x ) {\n\n\treturn mod289( ( ( x * 34.0 ) + 1.0 ) * x );\n\n}\n\nvec4 taylorInvSqrt( vec4 r ) {\n\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n\n}\n\nvec2 fade( vec2 t ) {\n\n\treturn t * t * t * ( t * ( t * 6.0 - 15.0 ) + 10.0 );\n\n}\n\nvec3 fade( vec3 t ) {\n\n\treturn t * t * t * ( t * ( t * 6.0 - 15.0 ) + 10.0 );\n\n}\n`.trim();\n\nconst NOISE2D_SRC = `\nfloat noise2d( vec2 P, float amplitude, float pivot ) {\n\n\tvec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n\tvec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n\tPi = mod289(Pi); // To avoid truncation effects in permutation\n\tvec4 ix = Pi.xzxz;\n\tvec4 iy = Pi.yyww;\n\tvec4 fx = Pf.xzxz;\n\tvec4 fy = Pf.yyww;\n\n\tvec4 i = permute(permute(ix) + iy);\n\n\tvec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n\tvec4 gy = abs(gx) - 0.5 ;\n\tvec4 tx = floor(gx + 0.5);\n\tgx = gx - tx;\n\n\tvec2 g00 = vec2(gx.x,gy.x);\n\tvec2 g10 = vec2(gx.y,gy.y);\n\tvec2 g01 = vec2(gx.z,gy.z);\n\tvec2 g11 = vec2(gx.w,gy.w);\n\n\tvec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n\tg00 *= norm.x;\n\tg01 *= norm.y;\n\tg10 *= norm.z;\n\tg11 *= norm.w;\n\n\tfloat n00 = dot(g00, vec2(fx.x, fy.x));\n\tfloat n10 = dot(g10, vec2(fx.y, fy.y));\n\tfloat n01 = dot(g01, vec2(fx.z, fy.z));\n\tfloat n11 = dot(g11, vec2(fx.w, fy.w));\n\n\tvec2 fade_xy = fade(Pf.xy);\n\tvec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n\tfloat n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n\treturn 2.3 * n_xy * amplitude + pivot;\n\n}\n`.trim();\n\nclass Noise2DNode extends TempNode {\n\n\tconstructor( uv = new UVNode(), amplitude = new FloatNode( 1.0 ), pivot = new FloatNode( 0.0 ) ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.uv = uv;\n\t\tthis.amplitude = amplitude;\n\t\tthis.pivot = pivot;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst noise2d = new FunctionCallNode( Noise2DNode.Nodes.noise2d, [ this.uv, this.amplitude, this.pivot ] );\n\t\treturn builder.format( noise2d.generate( builder, output ), this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.uv = source.uv;\n\t\tthis.amplitude = source.amplitude;\n\t\tthis.pivot = source.pivot;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.uv = this.uv.toJSON( meta ).uuid;\n\t\t\tdata.amplitude = this.amplitude.toJSON( meta ).uuid;\n\t\t\tdata.pivot = this.pivot.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nNoise2DNode.prototype.nodeType = 'Noise2D';\n\nNoise2DNode.Nodes = ( function () {\n\n\tconst noiseCommon = new FunctionNode( NOISE_COMMON_SRC );\n\tconst noise2d = new FunctionNode( NOISE2D_SRC );\n\n\tnoise2d.includes = [ noiseCommon ];\n\n\treturn { noiseCommon, noise2d };\n\n} )();\n\nexport { Noise2DNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FunctionCallNode } from '../core/FunctionCallNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nimport { Noise2DNode } from './Noise2DNode.js';\n\nconst NOISE3D_SRC = `\nfloat noise3d( vec3 P, float amplitude, float pivot ) {\n\n\tvec3 Pi0 = floor(P); // Integer part for indexing\n\tvec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n\tPi0 = mod289(Pi0);\n\tPi1 = mod289(Pi1);\n\tvec3 Pf0 = fract(P); // Fractional part for interpolation\n\tvec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n\tvec4 iy = vec4(Pi0.yy, Pi1.yy);\n\tvec4 iz0 = Pi0.zzzz;\n\tvec4 iz1 = Pi1.zzzz;\n\n\tvec4 ixy = permute(permute(ix) + iy);\n\tvec4 ixy0 = permute(ixy + iz0);\n\tvec4 ixy1 = permute(ixy + iz1);\n\n\tvec4 gx0 = ixy0 * (1.0 / 7.0);\n\tvec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n\tgx0 = fract(gx0);\n\tvec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n\tvec4 sz0 = step(gz0, vec4(0.0));\n\tgx0 -= sz0 * (step(0.0, gx0) - 0.5);\n\tgy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n\tvec4 gx1 = ixy1 * (1.0 / 7.0);\n\tvec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n\tgx1 = fract(gx1);\n\tvec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n\tvec4 sz1 = step(gz1, vec4(0.0));\n\tgx1 -= sz1 * (step(0.0, gx1) - 0.5);\n\tgy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n\tvec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n\tvec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n\tvec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n\tvec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n\tvec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n\tvec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n\tvec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n\tvec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n\tvec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n\tg000 *= norm0.x;\n\tg010 *= norm0.y;\n\tg100 *= norm0.z;\n\tg110 *= norm0.w;\n\tvec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n\tg001 *= norm1.x;\n\tg011 *= norm1.y;\n\tg101 *= norm1.z;\n\tg111 *= norm1.w;\n\n\tfloat n000 = dot(g000, Pf0);\n\tfloat n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n\tfloat n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n\tfloat n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n\tfloat n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n\tfloat n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n\tfloat n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n\tfloat n111 = dot(g111, Pf1);\n\n\tvec3 fade_xyz = fade(Pf0);\n\tvec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n\tvec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n\tfloat n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n\treturn 2.2 * n_xyz * amplitude + pivot;\n\n}\n`.trim();\n\nclass Noise3DNode extends TempNode {\n\n\tconstructor( position = new PositionNode(), amplitude = new FloatNode( 1.0 ), pivot = new FloatNode( 0.0 ) ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.position = position;\n\t\tthis.amplitude = amplitude;\n\t\tthis.pivot = pivot;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst noise3d = new FunctionCallNode( Noise3DNode.Nodes.noise3d, [ this.position, this.amplitude, this.pivot ] );\n\t\treturn builder.format( noise3d.generate( builder, output ), this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.position = source.position;\n\t\tthis.amplitude = source.amplitude;\n\t\tthis.pivot = source.pivot;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.position = this.position.toJSON( meta ).uuid;\n\t\t\tdata.amplitude = this.amplitude.toJSON( meta ).uuid;\n\t\t\tdata.pivot = this.pivot.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nNoise3DNode.prototype.nodeType = 'Noise3D';\n\nNoise3DNode.Nodes = ( function () {\n\n\tconst noise3d = new FunctionNode( NOISE3D_SRC );\n\n\tnoise3d.includes = [ Noise2DNode.Nodes.noiseCommon ];\n\n\treturn { noise3d };\n\n} )();\n\nexport { Noise3DNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { UVNode } from '../accessors/UVNode.js';\n\nclass CheckerNode extends TempNode {\n\n\tconstructor( uv ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.uv = uv || new UVNode();\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst snoise = builder.include( CheckerNode.Nodes.checker );\n\n\t\treturn builder.format( snoise + '( ' + this.uv.build( builder, 'v2' ) + ' )', this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.uv = source.uv;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.uv = this.uv.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nCheckerNode.Nodes = ( function () {\n\n\t// https://github.com/mattdesl/glsl-checker/blob/master/index.glsl\n\n\tconst checker = new FunctionNode( /* glsl */`\n\t\tfloat checker( vec2 uv ) {\n\n\t\t\tfloat cx = floor( uv.x );\n\t\t\tfloat cy = floor( uv.y );\n\t\t\tfloat result = mod( cx + cy, 2.0 );\n\n\t\t\treturn sign( result );\n\n\t\t}`\n\t);\n\n\treturn {\n\t\tchecker: checker\n\t};\n\n} )();\n\nCheckerNode.prototype.nodeType = 'Noise';\n\nexport { CheckerNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FunctionCallNode } from '../core/FunctionCallNode.js';\nimport { IntNode } from '../inputs/IntNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\nimport { Noise3DNode } from './Noise3DNode.js';\n\nconst FRACTAL3D_SRC = `\nfloat fractal3d( vec3 p, float amplitude, int octaves, float lacunarity, float diminish ) {\n\n\tfloat result = 0.0;\n\n\tfor (int i = 0;  i < octaves; ++i) {\n\n\t\tresult += noise3d(p, amplitude, 0.0);\n\t\tamplitude *= diminish;\n\t\tp *= lacunarity;\n\n\t}\n\n\treturn result;\n\n}\n`.trim();\n\n/** Fractional Brownian motion. */\nclass Fractal3DNode extends TempNode {\n\n\tconstructor( position = new PositionNode(), amplitude = new FloatNode( 1.0 ), octaves = 3.0, lacunarity = 2.0, diminish = 0.5 ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.position = position;\n\t\tthis.amplitude = amplitude;\n\t\tthis.octaves = new IntNode( octaves ).setReadonly( true );\n\t\tthis.lacunarity = new FloatNode( lacunarity ).setReadonly( true );\n\t\tthis.diminish = new FloatNode( diminish ).setReadonly( true );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst fractal3d = new FunctionCallNode( Fractal3DNode.Nodes.fractal3d, [\n\n\t\t\tthis.position,\n\t\t\tthis.amplitude,\n\t\t\tthis.octaves,\n\t\t\tthis.lacunarity,\n\t\t\tthis.diminish,\n\n\t\t] );\n\n\t\treturn builder.format( fractal3d.generate( builder, output ), this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.position = source.position;\n\t\tthis.amplitude = source.amplitude;\n\t\tthis.octaves = source.octaves;\n\t\tthis.lacunarity = source.lacunarity;\n\t\tthis.diminish = source.diminish;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.position = this.position.toJSON( meta ).uuid;\n\t\t\tdata.amplitude = this.amplitude.toJSON( meta ).uuid;\n\t\t\tdata.octaves = this.octaves.toJSON( meta ).uuid;\n\t\t\tdata.lacunarity = this.lacunarity.toJSON( meta ).uuid;\n\t\t\tdata.diminish = this.diminish.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nFractal3DNode.prototype.nodeType = 'Fractal3D';\n\nFractal3DNode.Nodes = ( function () {\n\n\tconst fractal3d = new FunctionNode( FRACTAL3D_SRC );\n\n\tfractal3d.includes = [ Noise3DNode.Nodes.noise3d ];\n\n\treturn { fractal3d };\n\n} )();\n\nexport { Fractal3DNode };\n", "import {\n\tBackSide\n} from 'three';\n\nimport { TempNode } from '../core/TempNode.js';\nimport { Vector2Node } from '../inputs/Vector2Node.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { UVNode } from '../accessors/UVNode.js';\nimport { NormalNode } from '../accessors/NormalNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\n\nclass NormalMapNode extends TempNode {\n\n\tconstructor( value, scale ) {\n\n\t\tsuper( 'v3' );\n\n\t\tthis.value = value;\n\t\tthis.scale = scale || new Vector2Node( 1, 1 );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tconst perturbNormal2Arb = builder.include( NormalMapNode.Nodes.perturbNormal2Arb );\n\n\t\t\tthis.normal = this.normal || new NormalNode();\n\t\t\tthis.position = this.position || new PositionNode( PositionNode.VIEW );\n\t\t\tthis.uv = this.uv || new UVNode();\n\n\t\t\tlet scale = this.scale.build( builder, 'v2' );\n\n\t\t\tif ( builder.material.side === BackSide ) {\n\n\t\t\t\tscale = '-' + scale;\n\n\t\t\t}\n\n\t\t\treturn builder.format( perturbNormal2Arb + '( -' + this.position.build( builder, 'v3' ) + ', ' +\n\t\t\t\tthis.normal.build( builder, 'v3' ) + ', ' +\n\t\t\t\tthis.value.build( builder, 'v3' ) + ', ' +\n\t\t\t\tthis.uv.build( builder, 'v2' ) + ', ' +\n\t\t\t\tscale + ' )', this.getType( builder ), output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.NormalMapNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\treturn builder.format( 'vec3( 0.0 )', this.getType( builder ), output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\t\tthis.scale = source.scale;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.toJSON( meta ).uuid;\n\t\t\tdata.scale = this.scale.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nNormalMapNode.Nodes = ( function () {\n\n\tconst perturbNormal2Arb = new FunctionNode(\n\n\t\t// Per-Pixel Tangent Space Normal Mapping\n\t\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n\t\t`vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 map, vec2 vUv, vec2 normalScale ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\n\t\tvec3 mapN = map * 2.0 - 1.0;\n\n\t\tmapN.xy *= normalScale;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\t// Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\n\n\t\t\tif ( dot( cross( S, T ), N ) < 0.0 ) mapN.xy *= - 1.0;\n\n\t\t#else\n\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\t#endif\n\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\n\t}`, null, { derivatives: true } );\n\n\treturn {\n\t\tperturbNormal2Arb: perturbNormal2Arb\n\t};\n\n} )();\n\nNormalMapNode.prototype.nodeType = 'NormalMap';\n\nexport { NormalMapNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { NormalNode } from '../accessors/NormalNode.js';\nimport { PositionNode } from '../accessors/PositionNode.js';\n\nclass BumpMapNode extends TempNode {\n\n\tconstructor( value, scale ) {\n\n\t\tsuper( 'v3' );\n\n\t\tthis.value = value;\n\t\tthis.scale = scale || new FloatNode( 1 );\n\n\t\tthis.toNormalMap = false;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tif ( this.toNormalMap ) {\n\n\t\t\t\tconst bumpToNormal = builder.include( BumpMapNode.Nodes.bumpToNormal );\n\n\t\t\t\treturn builder.format( bumpToNormal + '( ' + this.value.build( builder, 'sampler2D' ) + ', ' +\n\t\t\t\t\tthis.value.uv.build( builder, 'v2' ) + ', ' +\n\t\t\t\t\tthis.scale.build( builder, 'f' ) + ' )', this.getType( builder ), output );\n\n\t\t\t} else {\n\n\t\t\t\tconst derivativeHeight = builder.include( BumpMapNode.Nodes.dHdxy_fwd ),\n\t\t\t\t\tperturbNormalArb = builder.include( BumpMapNode.Nodes.perturbNormalArb );\n\n\t\t\t\tthis.normal = this.normal || new NormalNode();\n\t\t\t\tthis.position = this.position || new PositionNode( PositionNode.VIEW );\n\n\t\t\t\tconst derivativeHeightCode = derivativeHeight + '( ' + this.value.build( builder, 'sampler2D' ) + ', ' +\n\t\t\t\t\tthis.value.uv.build( builder, 'v2' ) + ', ' +\n\t\t\t\t\tthis.scale.build( builder, 'f' ) + ' )';\n\n\t\t\t\treturn builder.format( perturbNormalArb + '( -' + this.position.build( builder, 'v3' ) + ', ' +\n\t\t\t\t\tthis.normal.build( builder, 'v3' ) + ', ' +\n\t\t\t\t\tderivativeHeightCode + ' )', this.getType( builder ), output );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.BumpMapNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\treturn builder.format( 'vec3( 0.0 )', this.getType( builder ), output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\t\tthis.scale = source.scale;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.toJSON( meta ).uuid;\n\t\t\tdata.scale = this.scale.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nBumpMapNode.Nodes = ( function () {\n\n\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n\t// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tconst dHdxy_fwd = new FunctionNode( /* glsl */`\n\n\t\tvec2 dHdxy_fwd( sampler2D bumpMap, vec2 vUv, float bumpScale ) {\n\n\t\t\tvec2 dSTdx = dFdx( vUv );\n\t\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\t\treturn vec2( dBx, dBy );\n\n\t\t}`\n\n\t, null, { derivatives: true } );\n\n\tconst perturbNormalArb = new FunctionNode( /* glsl */`\n\n\t\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n\t\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\t\tvec3 vN = surf_norm; // normalized\n\n\t\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\t\tfloat fDet = dot( vSigmaX, R1 );\n\n\t\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n\t\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\n\t\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t\t}`\n\n\t, [ dHdxy_fwd ], { derivatives: true } );\n\n\tconst bumpToNormal = new FunctionNode( /* glsl */`\n\t\tvec3 bumpToNormal( sampler2D bumpMap, vec2 uv, float scale ) {\n\n\t\t\tvec2 dSTdx = dFdx( uv );\n\t\t\tvec2 dSTdy = dFdy( uv );\n\n\t\t\tfloat Hll = texture2D( bumpMap, uv ).x;\n\t\t\tfloat dBx = texture2D( bumpMap, uv + dSTdx ).x - Hll;\n\t\t\tfloat dBy = texture2D( bumpMap, uv + dSTdy ).x - Hll;\n\n\t\t\treturn vec3( .5 - ( dBx * scale ), .5 - ( dBy * scale ), 1.0 );\n\n\t\t}`\n\t, null, { derivatives: true } );\n\n\treturn {\n\t\tdHdxy_fwd: dHdxy_fwd,\n\t\tperturbNormalArb: perturbNormalArb,\n\t\tbumpToNormal: bumpToNormal\n\t};\n\n} )();\n\nBumpMapNode.prototype.nodeType = 'BumpMap';\nBumpMapNode.prototype.hashProperties = [ 'toNormalMap' ];\n\nexport { BumpMapNode };\n", "import { Node } from '../core/Node.js';\n\nclass BypassNode extends Node {\n\n\tconstructor( code, value ) {\n\n\t\tsuper();\n\n\t\tthis.code = code;\n\t\tthis.value = value;\n\n\t}\n\n\tgetType( builder ) {\n\n\t\tif ( this.value ) {\n\n\t\t\treturn this.value.getType( builder );\n\n\t\t} else if ( builder.isShader( 'fragment' ) ) {\n\n\t\t\treturn 'f';\n\n\t\t}\n\n\t\treturn 'void';\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst code = this.code.build( builder, output ) + ';';\n\n\t\tbuilder.addNodeCode( code );\n\n\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\tif ( this.value ) {\n\n\t\t\t\treturn this.value.build( builder, output );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn this.value ? this.value.build( builder, output ) : builder.format( '0.0', 'f', output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.code = source.code;\n\t\tthis.value = source.value;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.code = this.code.toJSON( meta ).uuid;\n\n\t\t\tif ( this.value ) data.value = this.value.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nBypassNode.prototype.nodeType = 'Bypass';\n\nexport { BypassNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nconst inputs = NodeUtils.elements;\n\nclass JoinNode extends TempNode {\n\n\tconstructor( x, y, z, w ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tgetNumElements() {\n\n\t\tlet i = inputs.length;\n\n\t\twhile ( i -- ) {\n\n\t\t\tif ( this[ inputs[ i ] ] !== undefined ) {\n\n\t\t\t\t++ i;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.max( i, 2 );\n\n\t}\n\n\tgetType( builder ) {\n\n\t\treturn builder.getTypeFromLength( this.getNumElements() );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getType( builder ),\n\t\t\tlength = this.getNumElements(),\n\t\t\toutputs = [];\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst elm = this[ inputs[ i ] ];\n\n\t\t\toutputs.push( elm ? elm.build( builder, 'f' ) : '0.0' );\n\n\t\t}\n\n\t\tconst code = ( length > 1 ? builder.getConstructorFromLength( length ) : '' ) + '( ' + outputs.join( ', ' ) + ' )';\n\n\t\treturn builder.format( code, type, output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tfor ( const prop in source.inputs ) {\n\n\t\t\tthis[ prop ] = source.inputs[ prop ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.inputs = {};\n\n\t\t\tconst length = this.getNumElements();\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst elm = this[ inputs[ i ] ];\n\n\t\t\t\tif ( elm ) {\n\n\t\t\t\t\tdata.inputs[ inputs[ i ] ] = elm.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nJoinNode.prototype.nodeType = 'Join';\n\nexport { JoinNode };\n", "import { Node } from '../core/Node.js';\n\nclass SwitchNode extends Node {\n\n\tconstructor( node, components ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.components = components || 'x';\n\n\t}\n\n\tgetType( builder ) {\n\n\t\treturn builder.getTypeFromLength( this.components.length );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.node.getType( builder ),\n\t\t\tinputLength = builder.getTypeLength( type ) - 1;\n\n\t\tlet node = this.node.build( builder, type );\n\n\t\tif ( inputLength > 0 ) {\n\n\t\t\t// get max length\n\n\t\t\tlet outputLength = 0;\n\t\t\tconst components = builder.colorToVectorProperties( this.components );\n\n\t\t\tlet i;\n\t\t\tconst len = components.length;\n\n\t\t\tfor ( i = 0; i < len; i ++ ) {\n\n\t\t\t\toutputLength = Math.max( outputLength, builder.getIndexByElement( components.charAt( i ) ) );\n\n\t\t\t}\n\n\t\t\tif ( outputLength > inputLength ) outputLength = inputLength;\n\n\t\t\t// split\n\n\t\t\tnode += '.';\n\n\t\t\tfor ( i = 0; i < len; i ++ ) {\n\n\t\t\t\tlet idx = builder.getIndexByElement( components.charAt( i ) );\n\n\t\t\t\tif ( idx > outputLength ) idx = outputLength;\n\n\t\t\t\tnode += builder.getElementByIndex( idx );\n\n\t\t\t}\n\n\t\t\treturn builder.format( node, this.getType( builder ), output );\n\n\t\t} else {\n\n\t\t\t// join\n\n\t\t\treturn builder.format( node, type, output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.node = source.node;\n\t\tthis.components = source.components;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.node = this.node.toJSON( meta ).uuid;\n\t\t\tdata.components = this.components;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nSwitchNode.prototype.nodeType = 'Switch';\n\nexport { SwitchNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\n\nconst REMAP_SRC = `\nfloat remap( float value, float inLow, float inHigh, float outLow, float outHigh ) {\n\n\tfloat x = ( value - inLow ) / ( inHigh - inLow );\n\treturn outLow + ( outHigh - outLow ) * x;\n\n}\n\nvec2 remap( vec2 value, vec2 inLow, vec2 inHigh, vec2 outLow, vec2 outHigh ) {\n\n\treturn vec2(\n\t\tremap( value.x, inLow.x, inHigh.x, outLow.x, outHigh.x ),\n\t\tremap( value.y, inLow.y, inHigh.y, outLow.y, outHigh.y )\n\t);\n\n}\n\nvec2 remap( vec2 value, float inLow, float inHigh, float outLow, float outHigh ) {\n\n\treturn vec2(\n\t\tremap( value.x, inLow, inHigh, outLow, outHigh ),\n\t\tremap( value.y, inLow, inHigh, outLow, outHigh )\n\t);\n\n}\n\nvec3 remap( vec3 value, vec3 inLow, vec3 inHigh, vec3 outLow, vec3 outHigh ) {\n\n\treturn vec3(\n\t\tremap( value.x, inLow.x, inHigh.x, outLow.x, outHigh.x ),\n\t\tremap( value.y, inLow.y, inHigh.y, outLow.y, outHigh.y ),\n\t\tremap( value.z, inLow.z, inHigh.z, outLow.z, outHigh.z )\n\t);\n\n}\n\nvec3 remap( vec3 value, float inLow, float inHigh, float outLow, float outHigh ) {\n\n\treturn vec3(\n\t\tremap( value.x, inLow, inHigh, outLow, outHigh ),\n\t\tremap( value.y, inLow, inHigh, outLow, outHigh ),\n\t\tremap( value.z, inLow, inHigh, outLow, outHigh )\n\t);\n\n}\n\nvec4 remap( vec4 value, vec4 inLow, vec4 inHigh, vec4 outLow, vec4 outHigh ) {\n\n\treturn vec4(\n\t\tremap( value.x, inLow.x, inHigh.x, outLow.x, outHigh.x ),\n\t\tremap( value.y, inLow.y, inHigh.y, outLow.y, outHigh.y ),\n\t\tremap( value.z, inLow.z, inHigh.z, outLow.z, outHigh.z ),\n\t\tremap( value.w, inLow.w, inHigh.w, outLow.w, outHigh.w )\n\t);\n\n}\n\nvec4 remap( vec4 value, float inLow, float inHigh, float outLow, float outHigh ) {\n\n\treturn vec4(\n\t\tremap( value.x, inLow, inHigh, outLow, outHigh ),\n\t\tremap( value.y, inLow, inHigh, outLow, outHigh ),\n\t\tremap( value.z, inLow, inHigh, outLow, outHigh ),\n\t\tremap( value.w, inLow, inHigh, outLow, outHigh )\n\t);\n\n}\n`.trim();\n\nclass RemapNode extends TempNode {\n\n\tconstructor( value, inLow, inHigh, outLow, outHigh ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.value = value;\n\t\tthis.inLow = inLow;\n\t\tthis.inHigh = inHigh;\n\t\tthis.outLow = outLow;\n\t\tthis.outHigh = outHigh;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst remap = builder.include( RemapNode.Nodes.remap );\n\n\t\treturn builder.format( remap + '( ' + [\n\n\t\t\tthis.value.build( builder ),\n\t\t\tthis.inLow.build( builder ),\n\t\t\tthis.inHigh.build( builder ),\n\t\t\tthis.outLow.build( builder ),\n\t\t\tthis.outHigh.build( builder ),\n\n\t\t].join( ', ' ) + ' )', this.getType( builder ), output );\n\n\t}\n\n\tgetType( builder ) {\n\n\t\treturn this.value.getType( builder );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\t\tthis.inLow = source.inLow;\n\t\tthis.inHigh = source.inHigh;\n\t\tthis.outLow = source.outLow;\n\t\tthis.outHigh = source.outHigh;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.toJSON( meta ).uuid;\n\t\t\tdata.inLow = this.inLow.toJSON( meta ).uuid;\n\t\t\tdata.inHigh = this.inHigh.toJSON( meta ).uuid;\n\t\t\tdata.outLow = this.outLow.toJSON( meta ).uuid;\n\t\t\tdata.outHigh = this.outHigh.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nRemapNode.prototype.nodeType = 'Remap';\n\nRemapNode.Nodes = ( function () {\n\n\treturn {\n\n\t\tremap: new FunctionNode( REMAP_SRC )\n\n\t};\n\n} )();\n\nexport { RemapNode };\n", "import { FloatNode } from '../inputs/FloatNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\n\nclass TimerNode extends FloatNode {\n\n\tconstructor( scale, scope, timeScale ) {\n\n\t\tsuper();\n\n\t\tthis.scale = scale !== undefined ? scale : 1;\n\t\tthis.scope = scope || TimerNode.GLOBAL;\n\n\t\tthis.timeScale = timeScale !== undefined ? timeScale : scale !== undefined;\n\n\t}\n\n\tgetReadonly() {\n\n\t\t// never use TimerNode as readonly but aways as \"uniform\"\n\n\t\treturn false;\n\n\t}\n\n\tgetUnique() {\n\n\t\t// share TimerNode \"uniform\" input if is used on more time with others TimerNode\n\n\t\treturn this.timeScale && ( this.scope === TimerNode.GLOBAL || this.scope === TimerNode.DELTA );\n\n\t}\n\n\tupdateFrame( frame ) {\n\n\t\tconst scale = this.timeScale ? this.scale : 1;\n\n\t\tswitch ( this.scope ) {\n\n\t\t\tcase TimerNode.LOCAL:\n\n\t\t\t\tthis.value += frame.delta * scale;\n\n\t\t\t\tbreak;\n\n\t\t\tcase TimerNode.DELTA:\n\n\t\t\t\tthis.value = frame.delta * scale;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthis.value = frame.time * scale;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scope = source.scope;\n\t\tthis.scale = source.scale;\n\n\t\tthis.timeScale = source.timeScale;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.scope = this.scope;\n\t\tdata.scale = this.scale;\n\n\t\tdata.timeScale = this.timeScale;\n\n\t\treturn data;\n\n\t}\n\n}\n\nTimerNode.GLOBAL = 'global';\nTimerNode.LOCAL = 'local';\nTimerNode.DELTA = 'delta';\n\nTimerNode.prototype.nodeType = 'Timer';\n\nNodeLib.addKeyword( 'time', function () {\n\n\treturn new TimerNode();\n\n} );\n\nexport { TimerNode };\n", "import { Vector3 } from 'three';\n\nimport { Vector3Node } from '../inputs/Vector3Node.js';\n\nclass VelocityNode extends Vector3Node {\n\n\tconstructor( target, params ) {\n\n\t\tsuper();\n\n\t\tthis.params = {};\n\n\t\tthis.velocity = new Vector3();\n\n\t\tthis.setTarget( target );\n\t\tthis.setParams( params );\n\n\t}\n\n\tgetReadonly( /*builder*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\tsetParams( params ) {\n\n\t\tswitch ( this.params.type ) {\n\n\t\t\tcase 'elastic':\n\n\t\t\t\tdelete this.moment;\n\n\t\t\t\tdelete this.speed;\n\t\t\t\tdelete this.springVelocity;\n\n\t\t\t\tdelete this.lastVelocity;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tthis.params = params || {};\n\n\t\tswitch ( this.params.type ) {\n\n\t\t\tcase 'elastic':\n\n\t\t\t\tthis.moment = new Vector3();\n\n\t\t\t\tthis.speed = new Vector3();\n\t\t\t\tthis.springVelocity = new Vector3();\n\n\t\t\t\tthis.lastVelocity = new Vector3();\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tsetTarget( target ) {\n\n\t\tif ( this.target ) {\n\n\t\t\tdelete this.position;\n\t\t\tdelete this.oldPosition;\n\n\t\t}\n\n\t\tthis.target = target;\n\n\t\tif ( target ) {\n\n\t\t\tthis.position = target.getWorldPosition( this.position || new Vector3() );\n\t\t\tthis.oldPosition = this.position.clone();\n\n\t\t}\n\n\t}\n\n\tupdateFrameVelocity( /*frame*/ ) {\n\n\t\tif ( this.target ) {\n\n\t\t\tthis.position = this.target.getWorldPosition( this.position || new Vector3() );\n\t\t\tthis.velocity.subVectors( this.position, this.oldPosition );\n\t\t\tthis.oldPosition.copy( this.position );\n\n\t\t}\n\n\t}\n\n\tupdateFrame( frame ) {\n\n\t\tthis.updateFrameVelocity( frame );\n\n\t\tswitch ( this.params.type ) {\n\n\t\t\tcase 'elastic':\n\n\t\t\t\t// convert to real scale: 0 at 1 values\n\t\t\t\tconst deltaFps = frame.delta * ( this.params.fps || 60 );\n\n\t\t\t\tconst spring = Math.pow( this.params.spring, deltaFps ),\n\t\t\t\t\tdamping = Math.pow( this.params.damping, deltaFps );\n\n\t\t\t\t// fix relative frame-rate\n\t\t\t\tthis.velocity.multiplyScalar( Math.exp( - this.params.damping * deltaFps ) );\n\n\t\t\t\t// elastic\n\t\t\t\tthis.velocity.add( this.springVelocity );\n\t\t\t\tthis.velocity.add( this.speed.multiplyScalar( damping ).multiplyScalar( 1 - spring ) );\n\n\t\t\t\t// speed\n\t\t\t\tthis.speed.subVectors( this.velocity, this.lastVelocity );\n\n\t\t\t\t// spring velocity\n\t\t\t\tthis.springVelocity.add( this.speed );\n\t\t\t\tthis.springVelocity.multiplyScalar( spring );\n\n\t\t\t\t// moment\n\t\t\t\tthis.moment.add( this.springVelocity );\n\n\t\t\t\t// damping\n\t\t\t\tthis.moment.multiplyScalar( damping );\n\n\t\t\t\tthis.lastVelocity.copy( this.velocity );\n\t\t\t\tthis.value.copy( this.moment );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthis.value.copy( this.velocity );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.target ) this.setTarget( source.target );\n\n\t\tthis.setParams( source.params );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.target ) data.target = this.target.uuid;\n\n\t\t// clone params\n\t\tdata.params = JSON.parse( JSON.stringify( this.params ) );\n\n\t\treturn data;\n\n\t}\n\n}\n\nVelocityNode.prototype.nodeType = 'Velocity';\n\nexport { VelocityNode };\n", "import { ExpressionNode } from '../core/ExpressionNode.js';\nimport { Matrix3Node } from '../inputs/Matrix3Node.js';\nimport { UVNode } from '../accessors/UVNode.js';\n\nclass UVTransformNode extends ExpressionNode {\n\n\tconstructor( uv, position ) {\n\n\t\tsuper( '( uvTransform * vec3( uvNode, 1 ) ).xy', 'vec2' );\n\n\t\tthis.uv = uv || new UVNode();\n\t\tthis.position = position || new Matrix3Node();\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tthis.keywords[ 'uvNode' ] = this.uv;\n\t\tthis.keywords[ 'uvTransform' ] = this.position;\n\n\t\treturn super.generate( builder, output );\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tcx = cx !== undefined ? cx : .5;\n\t\tcy = cy !== undefined ? cy : .5;\n\n\t\tthis.position.value.setUvTransform( tx, ty, sx, sy, rotation, cx, cy );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.uv = source.uv;\n\t\tthis.position = source.position;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tvar data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.uv = this.uv.toJSON( meta ).uuid;\n\t\t\tdata.position = this.position.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nUVTransformNode.prototype.nodeType = 'UVTransform';\n\nexport { UVTransformNode };\n", "import { FloatNode } from '../inputs/FloatNode.js';\n\nclass MaxMIPLevelNode extends FloatNode {\n\n\tconstructor( texture ) {\n\n\t\tsuper();\n\n\t\tthis.texture = texture;\n\n\t\tthis.maxMIPLevel = 0;\n\n\t}\n\n\tget value() {\n\n\t\tif ( this.maxMIPLevel === 0 ) {\n\n\t\t\tvar image = this.texture.value.image;\n\n\t\t\tif ( Array.isArray( image ) ) image = image[ 0 ];\n\n\t\t\tthis.maxMIPLevel = image !== undefined ? Math.log( Math.max( image.width, image.height ) ) * Math.LOG2E : 0;\n\n\t\t}\n\n\t\treturn this.maxMIPLevel;\n\n\t}\n\n\tset value( val ) {\n\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.texture = this.texture.uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nMaxMIPLevelNode.prototype.nodeType = 'MaxMIPLevel';\n\nexport { MaxMIPLevelNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { MaxMIPLevelNode } from './MaxMIPLevelNode.js';\n\nclass SpecularMIPLevelNode extends TempNode {\n\n\tconstructor( roughness, texture ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.roughness = roughness;\n\t\tthis.texture = texture;\n\n\t\tthis.maxMIPLevel = undefined;\n\n\t}\n\n\tsetTexture( texture ) {\n\n\t\tthis.texture = texture;\n\n\t\treturn this;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tthis.maxMIPLevel = this.maxMIPLevel || new MaxMIPLevelNode();\n\t\t\tthis.maxMIPLevel.texture = this.texture;\n\n\t\t\tconst getSpecularMIPLevel = builder.include( SpecularMIPLevelNode.Nodes.getSpecularMIPLevel );\n\n\t\t\treturn builder.format( getSpecularMIPLevel + '( ' + this.roughness.build( builder, 'f' ) + ', ' + this.maxMIPLevel.build( builder, 'f' ) + ' )', this.type, output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SpecularMIPLevelNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\treturn builder.format( '0.0', this.type, output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.texture = source.texture;\n\t\tthis.roughness = source.roughness;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.texture = this.texture;\n\t\t\tdata.roughness = this.roughness;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nSpecularMIPLevelNode.Nodes = ( function () {\n\n\t// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\n\n\tconst getSpecularMIPLevel = new FunctionNode( /* glsl */`\n\n\t\tfloat getSpecularMIPLevel( const in float roughness, const in float maxMIPLevelScalar ) {\n\n\t\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\n\t\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\n\t\t}`\n\t);\n\n\treturn {\n\t\tgetSpecularMIPLevel: getSpecularMIPLevel\n\t};\n\n} )();\n\nSpecularMIPLevelNode.prototype.nodeType = 'SpecularMIPLevel';\n\nexport { SpecularMIPLevelNode };\n", "import { TempNode } from '../core/TempNode.js';\n\nclass SubSlotNode extends TempNode {\n\n\tconstructor( slots ) {\n\n\t\tsuper();\n\n\t\tthis.slots = slots || {};\n\n\t}\n\n\tgetType( builder, output ) {\n\n\t\treturn output;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( this.slots[ builder.slot ] ) {\n\n\t\t\treturn this.slots[ builder.slot ].build( builder, output );\n\n\t\t}\n\n\t\treturn builder.format( '0.0', 'f', output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tfor ( const prop in source.slots ) {\n\n\t\t\tthis.slots[ prop ] = source.slots[ prop ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.slots = {};\n\n\t\t\tfor ( const prop in this.slots ) {\n\n\t\t\t\tconst slot = this.slots[ prop ];\n\n\t\t\t\tif ( slot ) {\n\n\t\t\t\t\tdata.slots[ prop ] = slot.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nSubSlotNode.prototype.nodeType = 'SubSlot';\n\nexport { SubSlotNode };\n", "import { Vector2 } from 'three';\n\nimport { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { Vector2Node } from '../inputs/Vector2Node.js';\nimport { UVNode } from '../accessors/UVNode.js';\n\nclass BlurNode extends TempNode {\n\n\tconstructor( value, uv, radius, size ) {\n\n\t\tsuper( 'v4' );\n\n\t\tthis.value = value;\n\t\tthis.uv = uv || new UVNode();\n\t\tthis.radius = radius || new Vector2Node( 1, 1 );\n\n\t\tthis.size = size;\n\n\t\tthis.blurX = true;\n\t\tthis.blurY = true;\n\n\t\tthis.horizontal = new FloatNode( 1 / 64 );\n\t\tthis.vertical = new FloatNode( 1 / 64 );\n\n\t}\n\n\tupdateFrame( /* frame */ ) {\n\n\t\tif ( this.size ) {\n\n\t\t\tthis.horizontal.value = this.radius.x / this.size.x;\n\t\t\tthis.vertical.value = this.radius.y / this.size.y;\n\n\t\t} else if ( this.value.value && this.value.value.image ) {\n\n\t\t\tconst image = this.value.value.image;\n\n\t\t\tthis.horizontal.value = this.radius.x / image.width;\n\t\t\tthis.vertical.value = this.radius.y / image.height;\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\tconst blurCode = [];\n\t\t\tlet code;\n\n\t\t\tconst blurX = builder.include( BlurNode.Nodes.blurX ),\n\t\t\t\tblurY = builder.include( BlurNode.Nodes.blurY );\n\n\t\t\tif ( this.blurX ) {\n\n\t\t\t\tblurCode.push( blurX + '( ' + this.value.build( builder, 'sampler2D' ) + ', ' + this.uv.build( builder, 'v2' ) + ', ' + this.horizontal.build( builder, 'f' ) + ' )' );\n\n\t\t\t}\n\n\t\t\tif ( this.blurY ) {\n\n\t\t\t\tblurCode.push( blurY + '( ' + this.value.build( builder, 'sampler2D' ) + ', ' + this.uv.build( builder, 'v2' ) + ', ' + this.vertical.build( builder, 'f' ) + ' )' );\n\n\t\t\t}\n\n\t\t\tif ( blurCode.length == 2 ) code = '( ' + blurCode.join( ' + ' ) + ' / 2.0 )';\n\t\t\telse if ( blurCode.length ) code = '( ' + blurCode[ 0 ] + ' )';\n\t\t\telse code = 'vec4( 0.0 )';\n\n\t\t\treturn builder.format( code, this.getType( builder ), output );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.BlurNode is not compatible with ' + builder.shader + ' shader.' );\n\n\t\t\treturn builder.format( 'vec4( 0.0 )', this.getType( builder ), output );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.value = source.value;\n\t\tthis.uv = source.uv;\n\t\tthis.radius = source.radius;\n\n\t\tif ( source.size !== undefined ) this.size = new Vector2( source.size.x, source.size.y );\n\n\t\tthis.blurX = source.blurX;\n\t\tthis.blurY = source.blurY;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.value = this.value.toJSON( meta ).uuid;\n\t\t\tdata.uv = this.uv.toJSON( meta ).uuid;\n\t\t\tdata.radius = this.radius.toJSON( meta ).uuid;\n\n\t\t\tif ( this.size ) data.size = { x: this.size.x, y: this.size.y };\n\n\t\t\tdata.blurX = this.blurX;\n\t\t\tdata.blurY = this.blurY;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nBlurNode.Nodes = ( function () {\n\n\tconst blurX = new FunctionNode( /* glsl */`\n\t\tvec4 blurX( sampler2D tex, vec2 uv, float s ) {\n\t\t\tvec4 sum = vec4( 0.0 );\n\t\t\tsum += texture2D( tex, vec2( uv.x - 4.0 * s, uv.y ) ) * 0.051;\n\t\t\tsum += texture2D( tex, vec2( uv.x - 3.0 * s, uv.y ) ) * 0.0918;\n\t\t\tsum += texture2D( tex, vec2( uv.x - 2.0 * s, uv.y ) ) * 0.12245;\n\t\t\tsum += texture2D( tex, vec2( uv.x - 1.0 * s, uv.y ) ) * 0.1531;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y ) ) * 0.1633;\n\t\t\tsum += texture2D( tex, vec2( uv.x + 1.0 * s, uv.y ) ) * 0.1531;\n\t\t\tsum += texture2D( tex, vec2( uv.x + 2.0 * s, uv.y ) ) * 0.12245;\n\t\t\tsum += texture2D( tex, vec2( uv.x + 3.0 * s, uv.y ) ) * 0.0918;\n\t\t\tsum += texture2D( tex, vec2( uv.x + 4.0 * s, uv.y ) ) * 0.051;\n\t\t\treturn sum * .667;\n\t\t}`\n\t);\n\n\tconst blurY = new FunctionNode( /* glsl */`\n\t\tvec4 blurY( sampler2D tex, vec2 uv, float s ) {\n\t\t\tvec4 sum = vec4( 0.0 );\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y - 4.0 * s ) ) * 0.051;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y - 3.0 * s ) ) * 0.0918;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y - 2.0 * s ) ) * 0.12245;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y - 1.0 * s ) ) * 0.1531;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y ) ) * 0.1633;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y + 1.0 * s ) ) * 0.1531;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y + 2.0 * s ) ) * 0.12245;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y + 3.0 * s ) ) * 0.0918;\n\t\t\tsum += texture2D( tex, vec2( uv.x, uv.y + 4.0 * s ) ) * 0.051;\n\t\t\treturn sum * .667;\n\t\t}`\n\t );\n\n\treturn {\n\t\tblurX: blurX,\n\t\tblurY: blurY\n\t};\n\n} )();\n\nBlurNode.prototype.nodeType = 'Blur';\nBlurNode.prototype.hashProperties = [ 'blurX', 'blurY' ];\n\nexport { BlurNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { ConstNode } from '../core/ConstNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\n\nclass LuminanceNode extends TempNode {\n\n\tconstructor( rgb ) {\n\n\t\tsuper( 'f' );\n\n\t\tthis.rgb = rgb;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst luminance = builder.include( LuminanceNode.Nodes.luminance );\n\n\t\treturn builder.format( luminance + '( ' + this.rgb.build( builder, 'v3' ) + ' )', this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.rgb = source.rgb;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.rgb = this.rgb.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nLuminanceNode.Nodes = ( function () {\n\n\tconst LUMA = new ConstNode( 'vec3 LUMA vec3( 0.2125, 0.7154, 0.0721 )' );\n\n\t// Algorithm from Chapter 10 of Graphics Shaders\n\n\tconst luminance = new FunctionNode( /* glsl */`\n\n\t\tfloat luminance( vec3 rgb ) {\n\n\t\t\treturn dot( rgb, LUMA );\n\n\t\t}`\n\t, [ LUMA ] );\n\n\treturn {\n\t\tLUMA: LUMA,\n\t\tluminance: luminance\n\t};\n\n} )();\n\nLuminanceNode.prototype.nodeType = 'Luminance';\n\nexport { LuminanceNode };\n", "import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { LuminanceNode } from './LuminanceNode.js';\n\nclass ColorAdjustmentNode extends TempNode {\n\n\tconstructor( rgb, adjustment, method ) {\n\n\t\tsuper( 'v3' );\n\n\t\tthis.rgb = rgb;\n\t\tthis.adjustment = adjustment;\n\n\t\tthis.method = method || ColorAdjustmentNode.SATURATION;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst rgb = this.rgb.build( builder, 'v3' ),\n\t\t\tadjustment = this.adjustment.build( builder, 'f' );\n\n\t\tswitch ( this.method ) {\n\n\t\t\tcase ColorAdjustmentNode.BRIGHTNESS:\n\n\t\t\t\treturn builder.format( '( ' + rgb + ' + ' + adjustment + ' )', this.getType( builder ), output );\n\n\t\t\t\tbreak;\n\n\t\t\tcase ColorAdjustmentNode.CONTRAST:\n\n\t\t\t\treturn builder.format( '( ' + rgb + ' * ' + adjustment + ' )', this.getType( builder ), output );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tconst method = builder.include( ColorAdjustmentNode.Nodes[ this.method ] );\n\n\t\treturn builder.format( method + '( ' + rgb + ', ' + adjustment + ' )', this.getType( builder ), output );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.rgb = source.rgb;\n\t\tthis.adjustment = source.adjustment;\n\t\tthis.method = source.method;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.rgb = this.rgb.toJSON( meta ).uuid;\n\t\t\tdata.adjustment = this.adjustment.toJSON( meta ).uuid;\n\t\t\tdata.method = this.method;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nColorAdjustmentNode.Nodes = ( function () {\n\n\tconst hue = new FunctionNode( /* glsl */`\n\t\tvec3 hue(vec3 rgb, float adjustment) {\n\n\t\t\tconst mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);\n\t\t\tconst mat3 YIQtoRGB = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);\n\n\t\t\tvec3 yiq = RGBtoYIQ * rgb;\n\n\t\t\tfloat hue = atan(yiq.z, yiq.y) + adjustment;\n\t\t\tfloat chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\n\n\t\t\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\n\n\t\t}`\n\t);\n\n\t// Algorithm from Chapter 16 of OpenGL Shading Language\n\n\tconst saturation = new FunctionNode( /* glsl */`\n\t\tvec3 saturation(vec3 rgb, float adjustment) {\n\n\t\t\tvec3 intensity = vec3( luminance( rgb ) );\n\n\t\t\treturn mix( intensity, rgb, adjustment );\n\n\t\t}`\n\t, [ LuminanceNode.Nodes.luminance ] ); // include LuminanceNode function\n\n\t// Shader by Evan Wallace adapted by @lo-th\n\n\tconst vibrance = new FunctionNode( /* glsl */`\n\n\t\tvec3 vibrance(vec3 rgb, float adjustment) {\n\n\t\t\tfloat average = (rgb.r + rgb.g + rgb.b) / 3.0;\n\n\t\t\tfloat mx = max(rgb.r, max(rgb.g, rgb.b));\n\t\t\tfloat amt = (mx - average) * (-3.0 * adjustment);\n\n\t\t\treturn mix(rgb.rgb, vec3(mx), amt);\n\n\t\t}`\n\t);\n\n\treturn {\n\t\thue: hue,\n\t\tsaturation: saturation,\n\t\tvibrance: vibrance\n\t};\n\n} )();\n\nColorAdjustmentNode.SATURATION = 'saturation';\nColorAdjustmentNode.HUE = 'hue';\nColorAdjustmentNode.VIBRANCE = 'vibrance';\nColorAdjustmentNode.BRIGHTNESS = 'brightness';\nColorAdjustmentNode.CONTRAST = 'contrast';\n\nColorAdjustmentNode.prototype.nodeType = 'ColorAdjustment';\nColorAdjustmentNode.prototype.hashProperties = [ 'method' ];\n\nexport { ColorAdjustmentNode };\n", "import { Node } from '../../core/Node.js';\nimport { ColorNode } from '../../inputs/ColorNode.js';\n\nclass BasicNode extends Node {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.color = new ColorNode( 0xFFFFFF );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tlet code;\n\n\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\tconst position = this.position ? this.position.analyzeAndFlow( builder, 'v3', { cache: 'position' } ) : undefined;\n\n\n\t\t\tconst output = [\n\t\t\t\t'#include <beginnormal_vertex>',\n\t\t\t\t'#include <morphnormal_vertex>',\n\t\t\t\t'#include <skinnormal_vertex>',\n\t\t\t\t'#include <defaultnormal_vertex>'\n\t\t\t];\n\n\t\t\toutput.push(\n\t\t\t\t'#include <begin_vertex>'\n\n\t\t\t);\n\n\t\t\tif ( position ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tposition.code,\n\t\t\t\t\tposition.result ? 'transformed = ' + position.result + ';' : ''\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'#include <morphtarget_vertex>',\n\t\t\t\t'#include <skinning_vertex>',\n\t\t\t\t'#include <project_vertex>',\n\t\t\t\t'#include <logdepthbuf_vertex>',\n\n\t\t\t\t'#include <worldpos_vertex>',\n\t\t\t\t'#include <clipping_planes_vertex>',\n\t\t\t\t'#include <fog_vertex>',\n\t\t\t);\n\n\t\t\tcode = output.join( '\\n' );\n\n\t\t} else {\n\n\t\t\t// Analyze all nodes to reuse generate codes\n\t\t\tthis.color.analyze( builder, { slot: 'color' } );\n\n\t\t\tif ( this.alpha ) this.alpha.analyze( builder );\n\t\t\tif ( this.mask ) this.mask.analyze( builder );\n\n\t\t\t// Build code\n\t\t\tconst color = this.color.flow( builder, 'c', { slot: 'color' } );\n\t\t\tconst alpha = this.alpha ? this.alpha.flow( builder, 'f' ) : undefined;\n\t\t\tconst mask = this.mask ? this.mask.flow( builder, 'b' ) : undefined;\n\n\t\t\tbuilder.requires.transparent = alpha !== undefined;\n\n\t\t\tconst output = [\n\t\t\t\tcolor.code\n\t\t\t];\n\n\t\t\tif ( mask ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tmask.code,\n\t\t\t\t\t'if ( ! ' + mask.result + ' ) discard;'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( alpha ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\talpha.code,\n\t\t\t\t\t'#ifdef ALPHATEST',\n\n\t\t\t\t\t' if ( ' + alpha.result + ' <= ALPHATEST ) discard;',\n\n\t\t\t\t\t'#endif'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( alpha ) {\n\n\t\t\t\toutput.push( 'gl_FragColor = vec4(' + color.result + ', ' + alpha.result + ' );' );\n\n\t\t\t} else {\n\n\t\t\t\toutput.push( 'gl_FragColor = vec4(' + color.result + ', 1.0 );' );\n\n\t\t\t}\n\n\t\t\tcode = output.join( '\\n' );\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color = source.color;\n\n\t\tif ( source.position ) this.position = source.position;\n\t\tif ( source.alpha ) this.alpha = source.alpha;\n\t\tif ( source.mask ) this.mask = source.mask;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tdata.color = this.color.toJSON( meta ).uuid;\n\n\t\t\tif ( this.position ) data.position = this.position.toJSON( meta ).uuid;\n\t\t\tif ( this.alpha ) data.alpha = this.alpha.toJSON( meta ).uuid;\n\t\t\tif ( this.mask ) data.mask = this.mask.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nBasicNode.prototype.nodeType = 'Basic';\n\nexport { BasicNode };\n", "import {\n\tUniformsLib,\n\tUniformsUtils\n} from 'three';\n\nimport { Node } from '../../core/Node.js';\nimport { ColorNode } from '../../inputs/ColorNode.js';\n\nclass SpriteNode extends Node {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.color = new ColorNode( 0xEEEEEE );\n\t\tthis.spherical = true;\n\n\t}\n\n\tbuild( builder ) {\n\n\t\tlet output;\n\n\t\tbuilder.define( 'SPRITE' );\n\n\t\tbuilder.requires.lights = false;\n\t\tbuilder.requires.transparent = this.alpha !== undefined;\n\n\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\tconst position = this.position ? this.position.analyzeAndFlow( builder, 'v3', { cache: 'position' } ) : undefined;\n\n\t\t\tbuilder.mergeUniform( UniformsUtils.merge( [\n\t\t\t\tUniformsLib.fog\n\t\t\t] ) );\n\n\t\t\tbuilder.addParsCode( /* glsl */`\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>`\n\t\t\t);\n\n\t\t\toutput = [\n\t\t\t\t'#include <clipping_planes_fragment>',\n\t\t\t\t'#include <begin_vertex>'\n\t\t\t];\n\n\t\t\tif ( position ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tposition.code,\n\t\t\t\t\tposition.result ? 'transformed = ' + position.result + ';' : ''\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'#include <project_vertex>',\n\t\t\t\t'#include <fog_vertex>',\n\n\t\t\t\t'mat4 modelViewMtx = modelViewMatrix;',\n\t\t\t\t'mat4 modelMtx = modelMatrix;',\n\n\t\t\t\t// ignore position from modelMatrix (use vary position)\n\t\t\t\t'modelMtx[3][0] = 0.0;',\n\t\t\t\t'modelMtx[3][1] = 0.0;',\n\t\t\t\t'modelMtx[3][2] = 0.0;'\n\t\t\t);\n\n\t\t\tif ( ! this.spherical ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\t'modelMtx[1][1] = 1.0;'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t// http://www.geeks3d.com/20140807/billboarding-vertex-shader-glsl/\n\t\t\t\t// First colunm.\n\t\t\t\t'modelViewMtx[0][0] = 1.0;',\n\t\t\t\t'modelViewMtx[0][1] = 0.0;',\n\t\t\t\t'modelViewMtx[0][2] = 0.0;'\n\t\t\t);\n\n\t\t\tif ( this.spherical ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\t// Second colunm.\n\t\t\t\t\t'modelViewMtx[1][0] = 0.0;',\n\t\t\t\t\t'modelViewMtx[1][1] = 1.0;',\n\t\t\t\t\t'modelViewMtx[1][2] = 0.0;'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t// Thrid colunm.\n\t\t\t\t'modelViewMtx[2][0] = 0.0;',\n\t\t\t\t'modelViewMtx[2][1] = 0.0;',\n\t\t\t\t'modelViewMtx[2][2] = 1.0;',\n\n\t\t\t\t'gl_Position = projectionMatrix * modelViewMtx * modelMtx * vec4( transformed, 1.0 );',\n\n\t\t\t\t'#include <logdepthbuf_vertex>',\n\t\t\t\t'#include <clipping_planes_vertex>',\n\t\t\t\t'#include <fog_vertex>'\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tbuilder.addParsCode( /* glsl */`\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <clipping_planes_pars_fragment>`\n\t\t\t);\n\n\t\t\tbuilder.addCode( /* glsl */`\n\t\t\t\t#include <clipping_planes_fragment>\n\t\t\t\t#include <logdepthbuf_fragment>`\n\t\t\t);\n\n\t\t\t// analyze all nodes to reuse generate codes\n\n\t\t\tif ( this.mask ) this.mask.analyze( builder );\n\n\t\t\tif ( this.alpha ) this.alpha.analyze( builder );\n\n\t\t\tthis.color.analyze( builder, { slot: 'color' } );\n\n\t\t\t// build code\n\n\t\t\tconst mask = this.mask ? this.mask.flow( builder, 'b' ) : undefined,\n\t\t\t\talpha = this.alpha ? this.alpha.flow( builder, 'f' ) : undefined,\n\t\t\t\tcolor = this.color.flow( builder, 'c', { slot: 'color' } );\n\n\t\t\toutput = [];\n\n\t\t\tif ( mask ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tmask.code,\n\t\t\t\t\t'if ( ! ' + mask.result + ' ) discard;'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( alpha ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\talpha.code,\n\t\t\t\t\t'#ifdef ALPHATEST',\n\n\t\t\t\t\t'if ( ' + alpha.result + ' <= ALPHATEST ) discard;',\n\n\t\t\t\t\t'#endif',\n\t\t\t\t\tcolor.code,\n\t\t\t\t\t'gl_FragColor = vec4( ' + color.result + ', ' + alpha.result + ' );'\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tcolor.code,\n\t\t\t\t\t'gl_FragColor = vec4( ' + color.result + ', 1.0 );'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'#include <tonemapping_fragment>',\n\t\t\t\t'#include <encodings_fragment>',\n\t\t\t\t'#include <fog_fragment>'\n\t\t\t);\n\n\t\t}\n\n\t\treturn output.join( '\\n' );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\t// vertex\n\n\t\tif ( source.position ) this.position = source.position;\n\n\t\t// fragment\n\n\t\tthis.color = source.color;\n\n\t\tif ( source.spherical !== undefined ) this.spherical = source.spherical;\n\n\t\tif ( source.mask ) this.mask = source.mask;\n\n\t\tif ( source.alpha ) this.alpha = source.alpha;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\t// vertex\n\n\t\t\tif ( this.position ) data.position = this.position.toJSON( meta ).uuid;\n\n\t\t\t// fragment\n\n\t\t\tdata.color = this.color.toJSON( meta ).uuid;\n\n\t\t\tif ( this.spherical === false ) data.spherical = false;\n\n\t\t\tif ( this.mask ) data.mask = this.mask.toJSON( meta ).uuid;\n\n\t\t\tif ( this.alpha ) data.alpha = this.alpha.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nSpriteNode.prototype.nodeType = 'Sprite';\n\nexport { SpriteNode };\n", "import {\n\tUniformsLib,\n\tUniformsUtils\n} from 'three';\n\nimport { Node } from '../../core/Node.js';\nimport { ColorNode } from '../../inputs/ColorNode.js';\nimport { FloatNode } from '../../inputs/FloatNode.js';\n\nclass PhongNode extends Node {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.color = new ColorNode( 0xEEEEEE );\n\t\tthis.specular = new ColorNode( 0x111111 );\n\t\tthis.shininess = new FloatNode( 30 );\n\n\t}\n\n\tbuild( builder ) {\n\n\t\tlet code;\n\n\t\tbuilder.define( 'PHONG' );\n\n\t\tbuilder.requires.lights = true;\n\n\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\tconst position = this.position ? this.position.analyzeAndFlow( builder, 'v3', { cache: 'position' } ) : undefined;\n\n\t\t\tbuilder.mergeUniform( UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights\n\n\t\t\t] ) );\n\n\t\t\tbuilder.addParsCode( /* glsl */`\n\t\t\t\tvarying vec3 vViewPosition;\n\n\t\t\t\t//\"#include <encodings_pars_fragment> // encoding functions\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <normal_pars_vertex>\n\t\t\t\t#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>`\n\t\t\t);\n\n\t\t\tconst output = [\n\t\t\t\t'#include <beginnormal_vertex>',\n\t\t\t\t'#include <morphnormal_vertex>',\n\t\t\t\t'#include <skinbase_vertex>',\n\t\t\t\t'#include <skinnormal_vertex>',\n\t\t\t\t'#include <defaultnormal_vertex>',\n\t\t\t\t'#include <normal_vertex>',\n\n\t\t\t\t'#include <begin_vertex>'\n\t\t\t];\n\n\t\t\tif ( position ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tposition.code,\n\t\t\t\t\tposition.result ? 'transformed = ' + position.result + ';' : ''\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'\t#include <morphtarget_vertex>',\n\t\t\t\t'\t#include <skinning_vertex>',\n\t\t\t\t'\t#include <project_vertex>',\n\t\t\t\t'\t#include <fog_vertex>',\n\t\t\t\t'\t#include <logdepthbuf_vertex>',\n\t\t\t\t'\t#include <clipping_planes_vertex>',\n\n\t\t\t\t'\tvViewPosition = - mvPosition.xyz;',\n\n\t\t\t\t'\t#include <worldpos_vertex>',\n\t\t\t\t'\t#include <shadowmap_vertex>',\n\t\t\t\t'\t#include <fog_vertex>'\n\t\t\t);\n\n\t\t\tcode = output.join( '\\n' );\n\n\t\t} else {\n\n\t\t\t// analyze all nodes to reuse generate codes\n\n\t\t\tif ( this.mask ) this.mask.analyze( builder );\n\n\t\t\tthis.color.analyze( builder, { slot: 'color' } );\n\t\t\tthis.specular.analyze( builder );\n\t\t\tthis.shininess.analyze( builder );\n\n\t\t\tif ( this.alpha ) this.alpha.analyze( builder );\n\n\t\t\tif ( this.normal ) this.normal.analyze( builder );\n\n\t\t\tif ( this.light ) this.light.analyze( builder, { cache: 'light' } );\n\n\t\t\tif ( this.ao ) this.ao.analyze( builder );\n\t\t\tif ( this.ambient ) this.ambient.analyze( builder );\n\t\t\tif ( this.shadow ) this.shadow.analyze( builder );\n\t\t\tif ( this.emissive ) this.emissive.analyze( builder, { slot: 'emissive' } );\n\n\t\t\tif ( this.environment ) this.environment.analyze( builder, { slot: 'environment' } );\n\t\t\tif ( this.environmentAlpha && this.environment ) this.environmentAlpha.analyze( builder );\n\n\t\t\t// build code\n\n\t\t\tconst mask = this.mask ? this.mask.flow( builder, 'b' ) : undefined;\n\n\t\t\tconst color = this.color.flow( builder, 'c', { slot: 'color' } );\n\t\t\tconst specular = this.specular.flow( builder, 'c' );\n\t\t\tconst shininess = this.shininess.flow( builder, 'f' );\n\n\t\t\tconst alpha = this.alpha ? this.alpha.flow( builder, 'f' ) : undefined;\n\n\t\t\tconst normal = this.normal ? this.normal.flow( builder, 'v3' ) : undefined;\n\n\t\t\tconst light = this.light ? this.light.flow( builder, 'v3', { cache: 'light' } ) : undefined;\n\n\t\t\tconst ao = this.ao ? this.ao.flow( builder, 'f' ) : undefined;\n\t\t\tconst ambient = this.ambient ? this.ambient.flow( builder, 'c' ) : undefined;\n\t\t\tconst shadow = this.shadow ? this.shadow.flow( builder, 'c' ) : undefined;\n\t\t\tconst emissive = this.emissive ? this.emissive.flow( builder, 'c', { slot: 'emissive' } ) : undefined;\n\n\t\t\tconst environment = this.environment ? this.environment.flow( builder, 'c', { slot: 'environment' } ) : undefined;\n\t\t\tconst environmentAlpha = this.environmentAlpha && this.environment ? this.environmentAlpha.flow( builder, 'f' ) : undefined;\n\n\t\t\tbuilder.requires.transparent = alpha !== undefined;\n\n\t\t\tbuilder.addParsCode( /* glsl */`\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <normal_pars_fragment>\n\t\t\t\t#include <lights_phong_pars_fragment>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>`\n\t\t\t);\n\n\t\t\tconst output = [\n\t\t\t\t// prevent undeclared normal\n\t\t\t\t'#include <normal_fragment_begin>',\n\n\t\t\t\t// prevent undeclared material\n\t\t\t\t'\tBlinnPhongMaterial material;'\n\t\t\t];\n\n\t\t\tif ( mask ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tmask.code,\n\t\t\t\t\t'if ( ! ' + mask.result + ' ) discard;'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\tcolor.code,\n\t\t\t\t'\tvec3 diffuseColor = ' + color.result + ';',\n\t\t\t\t'\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );',\n\n\t\t\t\t'#include <logdepthbuf_fragment>',\n\n\t\t\t\tspecular.code,\n\t\t\t\t'\tvec3 specular = ' + specular.result + ';',\n\n\t\t\t\tshininess.code,\n\t\t\t\t'\tfloat shininess = max( 0.0001, ' + shininess.result + ' );',\n\n\t\t\t\t'\tfloat specularStrength = 1.0;' // Ignored in MaterialNode ( replace to specular )\n\t\t\t);\n\n\t\t\tif ( alpha ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\talpha.code,\n\t\t\t\t\t'#ifdef ALPHATEST',\n\n\t\t\t\t\t'if ( ' + alpha.result + ' <= ALPHATEST ) discard;',\n\n\t\t\t\t\t'#endif'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( normal ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tnormal.code,\n\t\t\t\t\t'normal = ' + normal.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// optimization for now\n\n\t\t\toutput.push( 'material.diffuseColor = ' + ( light ? 'vec3( 1.0 )' : 'diffuseColor' ) + ';' );\n\n\t\t\toutput.push(\n\t\t\t\t// accumulation\n\t\t\t\t'material.specularColor = specular;',\n\t\t\t\t'material.specularShininess = shininess;',\n\t\t\t\t'material.specularStrength = specularStrength;',\n\n\t\t\t\t'#include <lights_fragment_begin>',\n\t\t\t\t'#include <lights_fragment_end>'\n\t\t\t);\n\n\t\t\tif ( light ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tlight.code,\n\t\t\t\t\t'reflectedLight.directDiffuse = ' + light.result + ';'\n\t\t\t\t);\n\n\t\t\t\t// apply color\n\n\t\t\t\toutput.push(\n\t\t\t\t\t'reflectedLight.directDiffuse *= diffuseColor;',\n\t\t\t\t\t'reflectedLight.indirectDiffuse *= diffuseColor;'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( ao ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tao.code,\n\t\t\t\t\t'reflectedLight.indirectDiffuse *= ' + ao.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( ambient ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tambient.code,\n\t\t\t\t\t'reflectedLight.indirectDiffuse += ' + ambient.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( shadow ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tshadow.code,\n\t\t\t\t\t'reflectedLight.directDiffuse *= ' + shadow.result + ';',\n\t\t\t\t\t'reflectedLight.directSpecular *= ' + shadow.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( emissive ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\temissive.code,\n\t\t\t\t\t'reflectedLight.directDiffuse += ' + emissive.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push( 'vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular;' );\n\n\t\t\tif ( environment ) {\n\n\t\t\t\toutput.push( environment.code );\n\n\t\t\t\tif ( environmentAlpha ) {\n\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tenvironmentAlpha.code,\n\t\t\t\t\t\t'outgoingLight = mix( outgoingLight, ' + environment.result + ', ' + environmentAlpha.result + ' );'\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\toutput.push( 'outgoingLight = ' + environment.result + ';' );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t/*\n\t\t\tswitch( builder.material.combine ) {\n\n\t\t\t\tcase ENVMAP_BLENDING_MULTIPLY:\n\n\t\t\t\t\t//output.push( \"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;\" );\n\t\t\t\t\t//outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t\t\t\t\tbreak;\n\n\n\t\t\t}\n\t\t*/\n\n\t\t\tif ( alpha ) {\n\n\t\t\t\toutput.push( 'gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );' );\n\n\t\t\t} else {\n\n\t\t\t\toutput.push( 'gl_FragColor = vec4( outgoingLight, 1.0 );' );\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'#include <tonemapping_fragment>',\n\t\t\t\t'#include <encodings_fragment>',\n\t\t\t\t'#include <fog_fragment>',\n\t\t\t\t'#include <premultiplied_alpha_fragment>'\n\t\t\t);\n\n\t\t\tcode = output.join( '\\n' );\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\t// vertex\n\n\t\tif ( source.position ) this.position = source.position;\n\n\t\t// fragment\n\n\t\tthis.color = source.color;\n\t\tthis.specular = source.specular;\n\t\tthis.shininess = source.shininess;\n\n\t\tif ( source.mask ) this.mask = source.mask;\n\n\t\tif ( source.alpha ) this.alpha = source.alpha;\n\n\t\tif ( source.normal ) this.normal = source.normal;\n\n\t\tif ( source.light ) this.light = source.light;\n\t\tif ( source.shadow ) this.shadow = source.shadow;\n\n\t\tif ( source.ao ) this.ao = source.ao;\n\n\t\tif ( source.emissive ) this.emissive = source.emissive;\n\t\tif ( source.ambient ) this.ambient = source.ambient;\n\n\t\tif ( source.environment ) this.environment = source.environment;\n\t\tif ( source.environmentAlpha ) this.environmentAlpha = source.environmentAlpha;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\t// vertex\n\n\t\t\tif ( this.position ) data.position = this.position.toJSON( meta ).uuid;\n\n\t\t\t// fragment\n\n\t\t\tdata.color = this.color.toJSON( meta ).uuid;\n\t\t\tdata.specular = this.specular.toJSON( meta ).uuid;\n\t\t\tdata.shininess = this.shininess.toJSON( meta ).uuid;\n\n\t\t\tif ( this.mask ) data.mask = this.mask.toJSON( meta ).uuid;\n\n\t\t\tif ( this.alpha ) data.alpha = this.alpha.toJSON( meta ).uuid;\n\n\t\t\tif ( this.normal ) data.normal = this.normal.toJSON( meta ).uuid;\n\n\t\t\tif ( this.light ) data.light = this.light.toJSON( meta ).uuid;\n\n\t\t\tif ( this.ao ) data.ao = this.ao.toJSON( meta ).uuid;\n\t\t\tif ( this.ambient ) data.ambient = this.ambient.toJSON( meta ).uuid;\n\t\t\tif ( this.shadow ) data.shadow = this.shadow.toJSON( meta ).uuid;\n\t\t\tif ( this.emissive ) data.emissive = this.emissive.toJSON( meta ).uuid;\n\n\t\t\tif ( this.environment ) data.environment = this.environment.toJSON( meta ).uuid;\n\t\t\tif ( this.environmentAlpha ) data.environmentAlpha = this.environmentAlpha.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nPhongNode.prototype.nodeType = 'Phong';\n\nexport { PhongNode };\n", "import {\n\tUniformsLib,\n\tUniformsUtils\n} from 'three';\n\nimport { Node } from '../../core/Node.js';\nimport { ExpressionNode } from '../../core/ExpressionNode.js';\nimport { ColorNode } from '../../inputs/ColorNode.js';\nimport { FloatNode } from '../../inputs/FloatNode.js';\nimport { SpecularMIPLevelNode } from '../../utils/SpecularMIPLevelNode.js';\n\nclass StandardNode extends Node {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.color = new ColorNode( 0xFFFFFF );\n\t\tthis.roughness = new FloatNode( 1 );\n\t\tthis.metalness = new FloatNode( 0 );\n\n\t}\n\n\tbuild( builder ) {\n\n\t\tlet code;\n\n\t\tbuilder.define( 'STANDARD' );\n\n\t\tconst useClearcoat = this.clearcoat || this.clearcoatRoughness || this.clearCoatNormal;\n\n\t\tif ( useClearcoat ) {\n\n\t\t\tbuilder.define( 'CLEARCOAT' );\n\t\t\tbuilder.define( 'USE_CLEARCOAT' );\n\n\t\t}\n\n\t\tbuilder.requires.lights = true;\n\n\t\tbuilder.extensions.derivatives = true;\n\t\tbuilder.extensions.shaderTextureLOD = true;\n\n\t\tif ( builder.isShader( 'vertex' ) ) {\n\n\t\t\tconst position = this.position ? this.position.analyzeAndFlow( builder, 'v3', { cache: 'position' } ) : undefined;\n\n\t\t\tbuilder.mergeUniform( UniformsUtils.merge( [\n\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights\n\n\t\t\t] ) );\n\n\t\t\tif ( UniformsLib.LTC_1 ) {\n\n\t\t\t\t// add ltc data textures to material uniforms\n\n\t\t\t\tbuilder.uniforms.ltc_1 = { value: undefined };\n\t\t\t\tbuilder.uniforms.ltc_2 = { value: undefined };\n\n\t\t\t}\n\n\t\t\tbuilder.addParsCode( /* glsl */`\n\t\t\t\tvarying vec3 vViewPosition;\n\n\t\t\t\t#ifndef FLAT_SHADED\n\n\t\t\t\t\tvarying vec3 vNormal;\n\n\t\t\t\t#endif\n\n\t\t\t\t//\"#include <encodings_pars_fragment> // encoding functions\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\t\t\t\t#include <clipping_planes_pars_vertex>`\n\n\t\t\t);\n\n\t\t\tconst output = [\n\t\t\t\t'#include <beginnormal_vertex>',\n\t\t\t\t'#include <morphnormal_vertex>',\n\t\t\t\t'#include <skinbase_vertex>',\n\t\t\t\t'#include <skinnormal_vertex>',\n\t\t\t\t'#include <defaultnormal_vertex>',\n\n\t\t\t\t'#ifndef FLAT_SHADED', // Normal computed with derivatives when FLAT_SHADED\n\n\t\t\t\t'\tvNormal = normalize( transformedNormal );',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#include <begin_vertex>'\n\t\t\t];\n\n\t\t\tif ( position ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tposition.code,\n\t\t\t\t\tposition.result ? 'transformed = ' + position.result + ';' : ''\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'#include <morphtarget_vertex>',\n\t\t\t\t'#include <skinning_vertex>',\n\t\t\t\t'#include <project_vertex>',\n\t\t\t\t'#include <fog_vertex>',\n\t\t\t\t'#include <logdepthbuf_vertex>',\n\t\t\t\t'#include <clipping_planes_vertex>',\n\n\t\t\t\t'\tvViewPosition = - mvPosition.xyz;',\n\n\t\t\t\t'#include <worldpos_vertex>',\n\t\t\t\t'#include <shadowmap_vertex>'\n\t\t\t);\n\n\t\t\tcode = output.join( '\\n' );\n\n\t\t} else {\n\n\t\t\tconst roughnessNode = new ExpressionNode( 'material.roughness', 'f' );\n\t\t\tconst clearcoatRoughnessNode = new ExpressionNode( 'material.clearcoatRoughness', 'f' );\n\n\t\t\tconst contextEnvironment = {\n\t\t\t\troughness: roughnessNode,\n\t\t\t\tbias: new SpecularMIPLevelNode( roughnessNode ),\n\t\t\t\tviewNormal: new ExpressionNode( 'normal', 'v3' ),\n\t\t\t\tworldNormal: new ExpressionNode( 'inverseTransformDirection( geometry.normal, viewMatrix )', 'v3' ),\n\t\t\t\tgamma: true\n\t\t\t};\n\n\t\t\tconst contextGammaOnly = {\n\t\t\t\tgamma: true\n\t\t\t};\n\n\t\t\tconst contextClearcoatEnvironment = {\n\t\t\t\troughness: clearcoatRoughnessNode,\n\t\t\t\tbias: new SpecularMIPLevelNode( clearcoatRoughnessNode ),\n\t\t\t\tviewNormal: new ExpressionNode( 'clearcoatNormal', 'v3' ),\n\t\t\t\tworldNormal: new ExpressionNode( 'inverseTransformDirection( geometry.clearcoatNormal, viewMatrix )', 'v3' ),\n\t\t\t\tgamma: true\n\t\t\t};\n\n\t\t\t// analyze all nodes to reuse generate codes\n\n\t\t\tif ( this.mask ) this.mask.analyze( builder );\n\n\t\t\tthis.color.analyze( builder, { slot: 'color', context: contextGammaOnly } );\n\t\t\tthis.roughness.analyze( builder );\n\t\t\tthis.metalness.analyze( builder );\n\n\t\t\tif ( this.alpha ) this.alpha.analyze( builder );\n\n\t\t\tif ( this.normal ) this.normal.analyze( builder );\n\n\t\t\tif ( this.clearcoat ) this.clearcoat.analyze( builder );\n\t\t\tif ( this.clearcoatRoughness ) this.clearcoatRoughness.analyze( builder );\n\t\t\tif ( this.clearcoatNormal ) this.clearcoatNormal.analyze( builder );\n\n\t\t\tif ( this.reflectivity ) this.reflectivity.analyze( builder );\n\n\t\t\tif ( this.light ) this.light.analyze( builder, { cache: 'light' } );\n\n\t\t\tif ( this.ao ) this.ao.analyze( builder );\n\t\t\tif ( this.ambient ) this.ambient.analyze( builder );\n\t\t\tif ( this.shadow ) this.shadow.analyze( builder );\n\t\t\tif ( this.emissive ) this.emissive.analyze( builder, { slot: 'emissive' } );\n\n\t\t\tif ( this.environment ) {\n\n\t\t\t\t// isolate environment from others inputs ( see TextureNode, CubeTextureNode )\n\t\t\t\t// environment.analyze will detect if there is a need of calculate irradiance\n\n\t\t\t\tthis.environment.analyze( builder, { cache: 'radiance', context: contextEnvironment, slot: 'radiance' } );\n\n\t\t\t\tif ( builder.requires.irradiance ) {\n\n\t\t\t\t\tthis.environment.analyze( builder, { cache: 'irradiance', context: contextEnvironment, slot: 'irradiance' } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.sheenColor ) this.sheenColor.analyze( builder );\n\n\t\t\t// build code\n\n\t\t\tconst mask = this.mask ? this.mask.flow( builder, 'b' ) : undefined;\n\n\t\t\tconst color = this.color.flow( builder, 'c', { slot: 'color', context: contextGammaOnly } );\n\t\t\tconst roughness = this.roughness.flow( builder, 'f' );\n\t\t\tconst metalness = this.metalness.flow( builder, 'f' );\n\n\t\t\tconst alpha = this.alpha ? this.alpha.flow( builder, 'f' ) : undefined;\n\n\t\t\tconst normal = this.normal ? this.normal.flow( builder, 'v3' ) : undefined;\n\n\t\t\tconst clearcoat = this.clearcoat ? this.clearcoat.flow( builder, 'f' ) : undefined;\n\t\t\tconst clearcoatRoughness = this.clearcoatRoughness ? this.clearcoatRoughness.flow( builder, 'f' ) : undefined;\n\t\t\tconst clearcoatNormal = this.clearcoatNormal ? this.clearcoatNormal.flow( builder, 'v3' ) : undefined;\n\n\t\t\tconst reflectivity = this.reflectivity ? this.reflectivity.flow( builder, 'f' ) : undefined;\n\n\t\t\tconst light = this.light ? this.light.flow( builder, 'v3', { cache: 'light' } ) : undefined;\n\n\t\t\tconst ao = this.ao ? this.ao.flow( builder, 'f' ) : undefined;\n\t\t\tconst ambient = this.ambient ? this.ambient.flow( builder, 'c' ) : undefined;\n\t\t\tconst shadow = this.shadow ? this.shadow.flow( builder, 'c' ) : undefined;\n\t\t\tconst emissive = this.emissive ? this.emissive.flow( builder, 'c', { slot: 'emissive' } ) : undefined;\n\n\t\t\tlet environment;\n\n\t\t\tif ( this.environment ) {\n\n\t\t\t\tenvironment = {\n\t\t\t\t\tradiance: this.environment.flow( builder, 'c', { cache: 'radiance', context: contextEnvironment, slot: 'radiance' } )\n\t\t\t\t};\n\n\t\t\t\tif ( builder.requires.irradiance ) {\n\n\t\t\t\t\tenvironment.irradiance = this.environment.flow( builder, 'c', { cache: 'irradiance', context: contextEnvironment, slot: 'irradiance' } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst clearcoatEnv = useClearcoat && environment ? this.environment.flow( builder, 'c', { cache: 'clearcoat', context: contextClearcoatEnvironment, slot: 'environment' } ) : undefined;\n\n\t\t\tconst sheenColor = this.sheenColor ? this.sheenColor.flow( builder, 'c' ) : undefined;\n\n\t\t\tbuilder.requires.transparent = alpha !== undefined;\n\n\t\t\tbuilder.addParsCode( /* glsl */`\n\t\t\t\tvarying vec3 vViewPosition;\n\n\t\t\t\t#define NODE_MAXIMUM_SPECULAR_COEFFICIENT 0.16\n\t\t\t\t#define NODE_DEFAULT_SPECULAR_COEFFICIENT 0.04\n\n\t\t\t\t#ifndef FLAT_SHADED\n\n\t\t\t\t\tvarying vec3 vNormal;\n\n\t\t\t\t#endif\n\n\t\t\t\t#include <dithering_pars_fragment>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <lights_physical_pars_fragment>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>`\n\t\t\t);\n\n\t\t\tconst output = [\n\t\t\t\t'#include <clipping_planes_fragment>',\n\n\t\t\t\t// add before: prevent undeclared normal\n\t\t\t\t'\t#include <normal_fragment_begin>',\n\t\t\t\t'\t#include <clearcoat_normal_fragment_begin>',\n\n\t\t\t\t// add before: prevent undeclared material\n\t\t\t\t'\tPhysicalMaterial material;',\n\t\t\t\t'\tmaterial.diffuseColor = vec3( 1.0 );'\n\t\t\t];\n\n\t\t\tif ( mask ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tmask.code,\n\t\t\t\t\t'if ( ! ' + mask.result + ' ) discard;'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\tcolor.code,\n\t\t\t\t'\tvec3 diffuseColor = ' + color.result + ';',\n\t\t\t\t'\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );',\n\n\t\t\t\t'#include <logdepthbuf_fragment>',\n\n\t\t\t\troughness.code,\n\t\t\t\t'\tfloat roughnessFactor = ' + roughness.result + ';',\n\n\t\t\t\tmetalness.code,\n\t\t\t\t'\tfloat metalnessFactor = ' + metalness.result + ';'\n\t\t\t);\n\n\t\t\tif ( alpha ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\talpha.code,\n\t\t\t\t\t'#ifdef ALPHATEST',\n\n\t\t\t\t\t'\tif ( ' + alpha.result + ' <= ALPHATEST ) discard;',\n\n\t\t\t\t\t'#endif'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( normal ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tnormal.code,\n\t\t\t\t\t'normal = ' + normal.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( clearcoatNormal ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tclearcoatNormal.code,\n\t\t\t\t\t'clearcoatNormal = ' + clearcoatNormal.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t// anti-aliasing code by @elalish\n\n\t\t\toutput.push(\n\t\t\t\t'vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );',\n\t\t\t\t'float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );',\n\t\t\t);\n\n\t\t\t// optimization for now\n\n\t\t\toutput.push(\n\t\t\t\t'material.diffuseColor = ' + ( light ? 'vec3( 1.0 )' : 'diffuseColor * ( 1.0 - metalnessFactor )' ) + ';',\n\n\t\t\t\t'material.roughness = max( roughnessFactor, 0.0525 );',\n\t\t\t\t'material.roughness += geometryRoughness;',\n\t\t\t\t'material.roughness = min( material.roughness, 1.0 );',\n\n\t\t\t\t'material.roughness = clamp( roughnessFactor, 0.04, 1.0 );'\n\t\t\t);\n\n\t\t\tif ( clearcoat ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tclearcoat.code,\n\t\t\t\t\t'material.clearcoat = saturate( ' + clearcoat.result + ' );' // Burley clearcoat model\n\t\t\t\t);\n\n\t\t\t} else if ( useClearcoat ) {\n\n\t\t\t\toutput.push( 'material.clearcoat = 0.0;' );\n\n\t\t\t}\n\n\t\t\tif ( clearcoatRoughness ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tclearcoatRoughness.code,\n\t\t\t\t\t'material.clearcoatRoughness = max( ' + clearcoatRoughness.result + ', 0.0525 );',\n\t\t\t\t\t'material.clearcoatRoughness += geometryRoughness;',\n\t\t\t\t\t'material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );'\n\t\t\t\t);\n\n\t\t\t} else if ( useClearcoat ) {\n\n\t\t\t\toutput.push( 'material.clearcoatRoughness = 0.0;' );\n\n\t\t\t}\n\n\t\t\tif ( sheenColor ) {\n\n\t\t\t\toutput.push( 'material.sheenColor = ' + sheenColor.result + ';' );\n\n\t\t\t}\n\n\t\t\tif ( reflectivity ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\treflectivity.code,\n\t\t\t\t\t'material.specularColor = mix( vec3( NODE_MAXIMUM_SPECULAR_COEFFICIENT * pow2( ' + reflectivity.result + ' ) ), diffuseColor, metalnessFactor );'\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\toutput.push(\n\t\t\t\t\t'material.specularColor = mix( vec3( NODE_DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor, metalnessFactor );'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'#include <lights_fragment_begin>'\n\t\t\t);\n\n\t\t\tif ( light ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tlight.code,\n\t\t\t\t\t'reflectedLight.directDiffuse = ' + light.result + ';'\n\t\t\t\t);\n\n\t\t\t\t// apply color\n\n\t\t\t\toutput.push(\n\t\t\t\t\t'diffuseColor *= 1.0 - metalnessFactor;',\n\n\t\t\t\t\t'reflectedLight.directDiffuse *= diffuseColor;',\n\t\t\t\t\t'reflectedLight.indirectDiffuse *= diffuseColor;'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( ao ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tao.code,\n\t\t\t\t\t'reflectedLight.indirectDiffuse *= ' + ao.result + ';',\n\t\t\t\t\t'float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );',\n\t\t\t\t\t'reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ' + ao.result + ', material.roughness );'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( ambient ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tambient.code,\n\t\t\t\t\t'reflectedLight.indirectDiffuse += ' + ambient.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( shadow ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\tshadow.code,\n\t\t\t\t\t'reflectedLight.directDiffuse *= ' + shadow.result + ';',\n\t\t\t\t\t'reflectedLight.directSpecular *= ' + shadow.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( emissive ) {\n\n\t\t\t\toutput.push(\n\t\t\t\t\temissive.code,\n\t\t\t\t\t'reflectedLight.directDiffuse += ' + emissive.result + ';'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( environment ) {\n\n\t\t\t\toutput.push( environment.radiance.code );\n\n\t\t\t\tif ( builder.requires.irradiance ) {\n\n\t\t\t\t\toutput.push( environment.irradiance.code );\n\n\t\t\t\t}\n\n\t\t\t\tif ( clearcoatEnv ) {\n\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tclearcoatEnv.code,\n\t\t\t\t\t\t'clearcoatRadiance += ' + clearcoatEnv.result + ';'\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\toutput.push( 'radiance += ' + environment.radiance.result + ';' );\n\n\t\t\t\tif ( builder.requires.irradiance ) {\n\n\t\t\t\t\toutput.push( 'iblIrradiance += PI * ' + environment.irradiance.result + ';' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'#include <lights_fragment_end>'\n\t\t\t);\n\n\t\t\toutput.push( 'vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular;' );\n\n\t\t\tif ( alpha ) {\n\n\t\t\t\toutput.push( 'gl_FragColor = vec4( outgoingLight, ' + alpha.result + ' );' );\n\n\t\t\t} else {\n\n\t\t\t\toutput.push( 'gl_FragColor = vec4( outgoingLight, 1.0 );' );\n\n\t\t\t}\n\n\t\t\toutput.push(\n\t\t\t\t'#include <tonemapping_fragment>',\n\t\t\t\t'#include <encodings_fragment>',\n\t\t\t\t'#include <fog_fragment>',\n\t\t\t\t'#include <premultiplied_alpha_fragment>',\n\t\t\t\t'#include <dithering_fragment>'\n\t\t\t);\n\n\t\t\tcode = output.join( '\\n' );\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\t// vertex\n\n\t\tif ( source.position ) this.position = source.position;\n\n\t\t// fragment\n\n\t\tthis.color = source.color;\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tif ( source.mask ) this.mask = source.mask;\n\n\t\tif ( source.alpha ) this.alpha = source.alpha;\n\n\t\tif ( source.normal ) this.normal = source.normal;\n\n\t\tif ( source.clearcoat ) this.clearcoat = source.clearcoat;\n\t\tif ( source.clearcoatRoughness ) this.clearcoatRoughness = source.clearcoatRoughness;\n\t\tif ( source.clearcoatNormal ) this.clearcoatNormal = source.clearcoatNormal;\n\n\t\tif ( source.reflectivity ) this.reflectivity = source.reflectivity;\n\n\t\tif ( source.light ) this.light = source.light;\n\t\tif ( source.shadow ) this.shadow = source.shadow;\n\n\t\tif ( source.ao ) this.ao = source.ao;\n\n\t\tif ( source.emissive ) this.emissive = source.emissive;\n\t\tif ( source.ambient ) this.ambient = source.ambient;\n\n\t\tif ( source.environment ) this.environment = source.environment;\n\n\t\tif ( source.sheenColor ) this.sheenColor = source.sheenColor;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\t// vertex\n\n\t\t\tif ( this.position ) data.position = this.position.toJSON( meta ).uuid;\n\n\t\t\t// fragment\n\n\t\t\tdata.color = this.color.toJSON( meta ).uuid;\n\t\t\tdata.roughness = this.roughness.toJSON( meta ).uuid;\n\t\t\tdata.metalness = this.metalness.toJSON( meta ).uuid;\n\n\t\t\tif ( this.mask ) data.mask = this.mask.toJSON( meta ).uuid;\n\n\t\t\tif ( this.alpha ) data.alpha = this.alpha.toJSON( meta ).uuid;\n\n\t\t\tif ( this.normal ) data.normal = this.normal.toJSON( meta ).uuid;\n\n\t\t\tif ( this.clearcoat ) data.clearcoat = this.clearcoat.toJSON( meta ).uuid;\n\t\t\tif ( this.clearcoatRoughness ) data.clearcoatRoughness = this.clearcoatRoughness.toJSON( meta ).uuid;\n\t\t\tif ( this.clearcoatNormal ) data.clearcoatNormal = this.clearcoatNormal.toJSON( meta ).uuid;\n\n\t\t\tif ( this.reflectivity ) data.reflectivity = this.reflectivity.toJSON( meta ).uuid;\n\n\t\t\tif ( this.light ) data.light = this.light.toJSON( meta ).uuid;\n\t\t\tif ( this.shadow ) data.shadow = this.shadow.toJSON( meta ).uuid;\n\n\t\t\tif ( this.ao ) data.ao = this.ao.toJSON( meta ).uuid;\n\n\t\t\tif ( this.emissive ) data.emissive = this.emissive.toJSON( meta ).uuid;\n\t\t\tif ( this.ambient ) data.ambient = this.ambient.toJSON( meta ).uuid;\n\n\t\t\tif ( this.environment ) data.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\tif ( this.sheenColor ) data.sheenColor = this.sheenColor.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nStandardNode.prototype.nodeType = 'Standard';\n\nexport { StandardNode };\n", "import {\n\tColor,\n\tVector2\n} from 'three';\n\nimport { StandardNode } from './StandardNode.js';\nimport { PropertyNode } from '../../inputs/PropertyNode.js';\nimport { OperatorNode } from '../../math/OperatorNode.js';\nimport { SwitchNode } from '../../utils/SwitchNode.js';\nimport { NormalMapNode } from '../../misc/NormalMapNode.js';\n\nclass MeshStandardNode extends StandardNode {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.properties = {\n\t\t\tcolor: new Color( 0xffffff ),\n\t\t\troughness: 0.5,\n\t\t\tmetalness: 0.5,\n\t\t\tnormalScale: new Vector2( 1, 1 )\n\t\t};\n\n\t\tthis.inputs = {\n\t\t\tcolor: new PropertyNode( this.properties, 'color', 'c' ),\n\t\t\troughness: new PropertyNode( this.properties, 'roughness', 'f' ),\n\t\t\tmetalness: new PropertyNode( this.properties, 'metalness', 'f' ),\n\t\t\tnormalScale: new PropertyNode( this.properties, 'normalScale', 'v2' )\n\t\t};\n\n\t}\n\n\tbuild( builder ) {\n\n\t\tconst props = this.properties,\n\t\t\tinputs = this.inputs;\n\n\t\tif ( builder.isShader( 'fragment' ) ) {\n\n\t\t\t// slots\n\t\t\t// * color\n\t\t\t// * map\n\n\t\t\tconst color = builder.findNode( props.color, inputs.color ),\n\t\t\t\tmap = builder.resolve( props.map );\n\n\t\t\tthis.color = map ? new OperatorNode( color, map, OperatorNode.MUL ) : color;\n\n\t\t\t// slots\n\t\t\t// * roughness\n\t\t\t// * roughnessMap\n\n\t\t\tconst roughness = builder.findNode( props.roughness, inputs.roughness ),\n\t\t\t\troughnessMap = builder.resolve( props.roughnessMap );\n\n\t\t\tthis.roughness = roughnessMap ? new OperatorNode( roughness, new SwitchNode( roughnessMap, 'g' ), OperatorNode.MUL ) : roughness;\n\n\t\t\t// slots\n\t\t\t// * metalness\n\t\t\t// * metalnessMap\n\n\t\t\tconst metalness = builder.findNode( props.metalness, inputs.metalness ),\n\t\t\t\tmetalnessMap = builder.resolve( props.metalnessMap );\n\n\t\t\tthis.metalness = metalnessMap ? new OperatorNode( metalness, new SwitchNode( metalnessMap, 'b' ), OperatorNode.MUL ) : metalness;\n\n\t\t\t// slots\n\t\t\t// * normalMap\n\t\t\t// * normalScale\n\n\t\t\tif ( props.normalMap ) {\n\n\t\t\t\tthis.normal = new NormalMapNode( builder.resolve( props.normalMap ) );\n\t\t\t\tthis.normal.scale = builder.findNode( props.normalScale, inputs.normalScale );\n\n\t\t\t} else {\n\n\t\t\t\tthis.normal = undefined;\n\n\t\t\t}\n\n\t\t\t// slots\n\t\t\t// * envMap\n\n\t\t\tthis.environment = builder.resolve( props.envMap );\n\n\t\t}\n\n\t\t// build code\n\n\t\treturn super.build( builder );\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tlet data = this.getJSONNode( meta );\n\n\t\tif ( ! data ) {\n\n\t\t\tdata = this.createJSONNode( meta );\n\n\t\t\tconsole.warn( '.toJSON not implemented in', this );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nMeshStandardNode.prototype.nodeType = 'MeshStandard';\n\nexport { MeshStandardNode };\n", "import { BasicNode } from './nodes/BasicNode.js';\nimport { NodeMaterial } from './NodeMaterial.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass BasicNodeMaterial extends NodeMaterial {\n\n\tconstructor() {\n\n\t\tconst node = new BasicNode();\n\n\t\tsuper( node, node );\n\n\t\tthis.type = 'BasicNodeMaterial';\n\n\t}\n\n}\n\nNodeUtils.addShortcuts( BasicNodeMaterial.prototype, 'fragment', [\n\t'color',\n\t'alpha',\n\t'mask',\n\t'position'\n] );\n\nexport { BasicNodeMaterial };\n", "import { SpriteNode } from './nodes/SpriteNode.js';\nimport { NodeMaterial } from './NodeMaterial.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass SpriteNodeMaterial extends NodeMaterial {\n\n\tconstructor() {\n\n\t\tconst node = new SpriteNode();\n\n\t\tsuper( node, node );\n\n\t\tthis.type = 'SpriteNodeMaterial';\n\n\t}\n\n}\n\nNodeUtils.addShortcuts( SpriteNodeMaterial.prototype, 'fragment', [\n\t'color',\n\t'alpha',\n\t'mask',\n\t'position',\n\t'spherical'\n] );\n\nexport { SpriteNodeMaterial };\n", "import { PhongNode } from './nodes/PhongNode.js';\nimport { NodeMaterial } from './NodeMaterial.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass PhongNodeMaterial extends NodeMaterial {\n\n\tconstructor() {\n\n\t\tconst node = new PhongNode();\n\n\t\tsuper( node, node );\n\n\t\tthis.type = 'PhongNodeMaterial';\n\n\t}\n\n}\n\nNodeUtils.addShortcuts( PhongNodeMaterial.prototype, 'fragment', [\n\t'color',\n\t'alpha',\n\t'specular',\n\t'shininess',\n\t'normal',\n\t'emissive',\n\t'ambient',\n\t'light',\n\t'shadow',\n\t'ao',\n\t'environment',\n\t'environmentAlpha',\n\t'mask',\n\t'position'\n] );\n\nexport { PhongNodeMaterial };\n", "import { StandardNode } from './nodes/StandardNode.js';\nimport { NodeMaterial } from './NodeMaterial.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass StandardNodeMaterial extends NodeMaterial {\n\n\tconstructor() {\n\n\t\tconst node = new StandardNode();\n\n\t\tsuper( node, node );\n\n\t\tthis.type = 'StandardNodeMaterial';\n\n\t}\n\n}\n\nNodeUtils.addShortcuts( StandardNodeMaterial.prototype, 'fragment', [\n\t'color',\n\t'alpha',\n\t'roughness',\n\t'metalness',\n\t'reflectivity',\n\t'clearcoat',\n\t'clearcoatRoughness',\n\t'clearcoatNormal',\n\t'normal',\n\t'emissive',\n\t'ambient',\n\t'light',\n\t'shadow',\n\t'ao',\n\t'environment',\n\t'mask',\n\t'position',\n\t'sheenColor'\n] );\n\nexport { StandardNodeMaterial };\n", "import { MeshStandardNode } from './nodes/MeshStandardNode.js';\nimport { NodeMaterial } from './NodeMaterial.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nclass MeshStandardNodeMaterial extends NodeMaterial {\n\n\tconstructor() {\n\n\t\tconst node = new MeshStandardNode();\n\n\t\tsuper( node, node );\n\n\t\tthis.type = 'MeshStandardNodeMaterial';\n\n\t}\n\n}\n\nNodeUtils.addShortcuts( MeshStandardNodeMaterial.prototype, 'properties', [\n\t'color',\n\t'roughness',\n\t'metalness',\n\t'map',\n\t'normalMap',\n\t'normalScale',\n\t'metalnessMap',\n\t'roughnessMap',\n\t'envMap'\n] );\n\nexport { MeshStandardNodeMaterial };\n"],
  "mappings": "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",
  "names": []
}
