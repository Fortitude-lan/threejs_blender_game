import Model from "../Model"
//@ts-ignore
import fairySrc from "../../../assets-local/fairy.glb"
import { BufferGeometry, Mesh } from "three"
import * as BufferGeometryUtils from "three/examples/jsm/utils/BufferGeometryUtils"
import { wireframeMaterial } from "./reusables"
import scene from "../../engine/scene"

export default async () => {
    const model = new Model()
    model.src = fairySrc

    model.onLoad = () => {
        const geometries: Array<BufferGeometry> = []
		model.outerObject3d.updateMatrixWorld(true)

		model.outerObject3d.traverse((c: any) => {
			if (!c.geometry || c === model.object3d) return
            const cloned = c.geometry.clone()
            cloned.applyMatrix4(c.matrixWorld)
            for (const key in cloned.attributes)
                key !== "position" && cloned.deleteAttribute(key)

            geometries.push(cloned)
		})

        const mergedGeometry = BufferGeometryUtils.mergeBufferGeometries(geometries, false)
        const collider = new Mesh(mergedGeometry, wireframeMaterial)
		scene.add(collider)
    }
}