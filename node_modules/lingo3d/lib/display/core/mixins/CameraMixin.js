import { createEffect } from "@lincode/reactivity";
import { CameraHelper } from "three";
import mainCamera from "../../../engine/mainCamera";
import scene from "../../../engine/scene";
import { getBokeh, setBokeh } from "../../../states/useBokeh";
import { getBokehAperture, setBokehAperture } from "../../../states/useBokehAperture";
import { getBokehFocus, setBokehFocus } from "../../../states/useBokehFocus";
import { getBokehMaxBlur, setBokehMaxBlur } from "../../../states/useBokehMaxBlur";
import { getCamera, setCamera } from "../../../states/useCamera";
import { getCameraHelper } from "../../../states/useCameraHelper";
import { pushCameraList, pullCameraList } from "../../../states/useCameraList";
export default class CameraMixin {
    initCamera() {
        pushCameraList(this.camera);
        this.then(() => pullCameraList(this.camera));
        this.watch(createEffect(() => {
            if (!getCameraHelper() || getCamera() !== mainCamera || getCamera() === this.camera)
                return;
            const helper = new CameraHelper(this.camera);
            scene.add(helper);
            return () => {
                helper.dispose();
                scene.remove(helper);
            };
        }, [getCamera, getCameraHelper]));
    }
    get fov() {
        //@ts-ignore
        return this.camera.fov;
    }
    set fov(val) {
        //@ts-ignore
        this.camera.fov = val;
        //@ts-ignore
        "updateProjectionMatrix" in this.camera && this.camera.updateProjectionMatrix();
    }
    get zoom() {
        //@ts-ignore
        return this.camera.zoom;
    }
    set zoom(val) {
        //@ts-ignore
        this.camera.zoom = val;
        //@ts-ignore
        "updateProjectionMatrix" in this.camera && this.camera.updateProjectionMatrix();
    }
    activate() {
        setCamera(this.camera);
    }
    get active() {
        return getCamera() === this.camera;
    }
    set active(val) {
        val && this.activate();
    }
    get bokeh() {
        return getBokeh();
    }
    set bokeh(val) {
        getCamera() === this.camera && setBokeh(val);
        this.camera.userData.bokeh = val;
    }
    get bokehFocus() {
        return getBokehFocus();
    }
    set bokehFocus(val) {
        getCamera() === this.camera && setBokehFocus(val);
        this.camera.userData.bokehFocus = val;
    }
    get bokehMaxBlur() {
        return getBokehMaxBlur();
    }
    set bokehMaxBlur(val) {
        getCamera() === this.camera && setBokehMaxBlur(val);
        this.camera.userData.bokehMaxBlur = val;
    }
    get bokehAperture() {
        return getBokehAperture();
    }
    set bokehAperture(val) {
        getCamera() === this.camera && setBokehAperture(val);
        this.camera.userData.bokehAperture = val;
    }
}
