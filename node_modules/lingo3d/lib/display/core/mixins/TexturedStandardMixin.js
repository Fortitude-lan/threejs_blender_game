import { Color, ObjectSpaceNormalMap, TangentSpaceNormalMap, Vector2 } from "three";
import loadTexture from "../../utils/loaders/loadTexture";
export default class TexturedStandardMixin {
    get color() {
        return "#" + this.material.color.getHexString();
    }
    set color(val) {
        this.material.color = new Color(val);
    }
    get emissiveColor() {
        return "#" + this.material.emissive.getHexString();
    }
    set emissiveColor(val) {
        this.material.emissive = new Color(val);
    }
    get flatShading() {
        return this.material.flatShading;
    }
    set flatShading(val) {
        this.material.flatShading = val;
    }
    get wireframe() {
        return this.material.wireframe;
    }
    set wireframe(val) {
        this.material.wireframe = val;
    }
    get envMap() {
        return this._envMap;
    }
    set envMap(val) {
        this._envMap = val;
        this.material.envMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.envMap);
    }
    get aoMap() {
        return this._aoMap;
    }
    set aoMap(val) {
        this._aoMap = val;
        this.material.aoMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.aoMap);
    }
    get aoMapIntensity() {
        return this.material.aoMapIntensity;
    }
    set aoMapIntensity(val) {
        this.material.aoMapIntensity = val;
    }
    get bumpMap() {
        return this._bumpMap;
    }
    set bumpMap(val) {
        this._bumpMap = val;
        this.material.bumpMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.bumpMap);
    }
    get bumpScale() {
        return this.material.bumpScale;
    }
    set bumpScale(val) {
        this.material.bumpScale = val;
    }
    get displacementMap() {
        return this._displacementMap;
    }
    set displacementMap(val) {
        this._displacementMap = val;
        this.material.displacementMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.displacementMap);
    }
    get displacementScale() {
        return this.material.displacementScale;
    }
    set displacementScale(val) {
        this.material.displacementScale = val;
    }
    get displacementBias() {
        return this.material.displacementBias;
    }
    set displacementBias(val) {
        this.material.displacementBias = val;
    }
    get emissiveMap() {
        return this._emissiveMap;
    }
    set emissiveMap(val) {
        this._emissiveMap = val;
        this.material.emissiveMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.emissiveMap);
    }
    get emissiveIntensity() {
        return this.material.emissiveIntensity;
    }
    set emissiveIntensity(val) {
        this.material.emissiveIntensity = val;
    }
    get lightMap() {
        return this._lightMap;
    }
    set lightMap(val) {
        this._lightMap = val;
        this.material.lightMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.lightMap);
    }
    get lightMapIntensity() {
        return this.material.lightMapIntensity;
    }
    set lightMapIntensity(val) {
        this.material.lightMapIntensity = val;
    }
    get metalnessMap() {
        return this._metalnessMap;
    }
    set metalnessMap(val) {
        this._metalnessMap = val;
        this.material.metalnessMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.metalnessMap);
    }
    get metalness() {
        return this.material.metalness;
    }
    set metalness(val) {
        this.material.metalness = val;
    }
    get roughnessMap() {
        return this._roughnessMap;
    }
    set roughnessMap(val) {
        this._roughnessMap = val;
        this.material.roughnessMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.roughnessMap);
    }
    get roughness() {
        return this.material.roughness;
    }
    set roughness(val) {
        this.material.roughness = val;
    }
    get normalMap() {
        return this._normalMap;
    }
    set normalMap(val) {
        this._normalMap = val;
        this.material.normalMap = val ? loadTexture(val) : null;
        //@ts-ignore
        this.applyTextureRepeat(this.material.normalMap);
    }
    get normalScale() {
        return this.material.normalScale;
    }
    set normalScale(val) {
        if (typeof val === "number")
            this.material.normalScale = new Vector2(val, val);
        else
            this.material.normalScale = val;
    }
    get normalMapType() {
        return this._normalMapType;
    }
    set normalMapType(val) {
        this._normalMapType = val;
        this.material.normalMapType = val === "objectSpace" ? ObjectSpaceNormalMap : TangentSpaceNormalMap;
    }
    get refractionRatio() {
        return this.material.refractionRatio;
    }
    set refractionRatio(val) {
        this.material.refractionRatio = val;
    }
}
