import { Object3D } from "three";
import { Cancellable } from "@lincode/promiselikes";
import Point3d from "../../../api/Point3d";
import ISimpleObjectManager from "../../../interface/ISimpleObjectManager";
import PhysicsItem from "./PhysicsItem";
import { MouseInteractionPayload } from "../../../interface/IMouse";
export default class SimpleObjectManager<T extends Object3D = Object3D> extends PhysicsItem implements ISimpleObjectManager {
    object3d: T;
    outerObject3d: Object3D;
    constructor(object3d: T);
    dispose(): this;
    find<T extends SimpleObjectManager>(name: string): T | undefined;
    findAll<T extends SimpleObjectManager>(name: string): Array<T>;
    private clickHandle;
    private _onClick?;
    get onClick(): ((e: MouseInteractionPayload) => void) | undefined;
    set onClick(cb: ((e: MouseInteractionPayload) => void) | undefined);
    private mouseDownHandle;
    private _onMouseDown?;
    get onMouseDown(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseDown(cb: ((e: MouseInteractionPayload) => void) | undefined);
    private mouseUpHandle;
    private _onMouseUp?;
    get onMouseUp(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseUp(cb: ((e: MouseInteractionPayload) => void) | undefined);
    private mouseOverHandle;
    private _onMouseOver?;
    get onMouseOver(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseOver(cb: ((e: MouseInteractionPayload) => void) | undefined);
    private mouseOutHandle;
    private _onMouseOut?;
    get onMouseOut(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseOut(cb: ((e: MouseInteractionPayload) => void) | undefined);
    private mouseMoveHandle;
    private _onMouseMove?;
    get onMouseMove(): ((e: MouseInteractionPayload) => void) | undefined;
    set onMouseMove(cb: ((e: MouseInteractionPayload) => void) | undefined);
    get name(): string;
    set name(val: string);
    private _id?;
    get id(): string | undefined;
    set id(val: string | undefined);
    getWorldPosition(): Point3d;
    protected getRay(): import("three").Ray;
    rayAt(distance: number): Point3d;
    rayIntersectsAt(target: SimpleObjectManager, maxDistance?: number): Point3d | undefined;
    rayIntersects(target: SimpleObjectManager): boolean;
    getRayIntersectionsAt<T extends SimpleObjectManager>(id: string, maxDistance?: number): [T, Point3d][];
    getRayIntersections<T extends SimpleObjectManager>(id: string, maxDistance?: number): Array<T>;
    listenToRayIntersection<T extends SimpleObjectManager>(id: string, cb: (target: T, pt: Point3d) => void, maxDistance?: number): Cancellable<void>;
    intersects(target: SimpleObjectManager): boolean;
    getIntersections<T extends SimpleObjectManager>(id: string): T[];
    listenToIntersection<T extends SimpleObjectManager>(id: string, cb: (target: T) => void): Cancellable<void>;
    intersectIDs?: string[] | undefined;
    private _onIntersect?;
    private _onIntersectHandles?;
    get onIntersect(): ((target: SimpleObjectManager) => void) | undefined;
    set onIntersect(cb: ((target: SimpleObjectManager) => void) | undefined);
    get clientX(): number;
    get clientY(): number;
    get width(): number;
    set width(val: number);
    get height(): number;
    set height(val: number);
    get depth(): number;
    set depth(val: number);
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);
    get z(): number;
    set z(val: number);
    get scaleX(): number;
    set scaleX(val: number);
    get scaleY(): number;
    set scaleY(val: number);
    get scaleZ(): number;
    set scaleZ(val: number);
    get scale(): number;
    set scale(val: number);
    get rotationX(): number;
    set rotationX(val: number);
    get rotationY(): number;
    set rotationY(val: number);
    get rotationZ(): number;
    set rotationZ(val: number);
    get rotation(): number;
    set rotation(val: number);
    get reflection(): boolean;
    set reflection(val: boolean);
    get bloom(): boolean;
    set bloom(val: boolean);
    get visible(): boolean;
    set visible(val: boolean);
    lookAt(target: SimpleObjectManager | Point3d): void;
    translateX(val: number): void;
    translateY(val: number): void;
    translateZ(val: number): void;
    rotateX(val: number): void;
    rotateY(val: number): void;
    rotateZ(val: number): void;
    placeAt(object: SimpleObjectManager | Point3d): void;
    moveForward(distance: number): void;
    moveRight(distance: number): void;
}
