import AnimationItem from "./AnimationItem";
import { Body } from "cannon-es";
import { Point3d } from "@lincode/math";
import { Object3D } from "three";
import IPhysics, { PhysicsGroupIndex, PhysicsOptions, PhysicsShape } from "../../../interface/IPhysics";
export default abstract class PhysicsItem extends AnimationItem implements IPhysics {
    abstract object3d: Object3D;
    dispose(): this;
    _mAV?: Point3d;
    private getMAV;
    get maxAngularVelocityX(): number;
    set maxAngularVelocityX(val: number);
    get maxAngularVelocityY(): number;
    set maxAngularVelocityY(val: number);
    get maxAngularVelocityZ(): number;
    set maxAngularVelocityZ(val: number);
    _mV?: Point3d;
    private getMV;
    get maxVelocityX(): number;
    set maxVelocityX(val: number);
    get maxVelocityY(): number;
    set maxVelocityY(val: number);
    get maxVelocityZ(): number;
    set maxVelocityZ(val: number);
    protected physicsUpdate?: {
        position?: {
            x?: boolean;
            y?: boolean;
            z?: boolean;
        };
        rotation?: {
            x?: boolean;
            y?: boolean;
            z?: boolean;
        };
    };
    protected physicsUpdateRotation(): void;
    protected physicsUpdatePosition(): void;
    protected physicsUpdatePositionXZ(): void;
    physicsBody?: Body;
    applyForce(x: number, y: number, z: number): void;
    applyImpulse(x: number, y: number, z: number): void;
    applyLocalForce(x: number, y: number, z: number): void;
    applyLocalImpulse(x: number, y: number, z: number): void;
    applyTorque(x: number, y: number, z: number): void;
    setVelocity(x: number, y: number, z: number): void;
    private refreshPhysics;
    private _noTumble?;
    get noTumble(): boolean | undefined;
    set noTumble(val: boolean | undefined);
    private _slippery?;
    get slippery(): boolean | undefined;
    set slippery(val: boolean | undefined);
    private _mass?;
    get mass(): number | undefined;
    set mass(val: number | undefined);
    private _physicsGroup?;
    get physicsGroup(): PhysicsGroupIndex | undefined;
    set physicsGroup(val: PhysicsGroupIndex | undefined);
    private _ignorePhysicsGroups?;
    get ignorePhysicsGroups(): Array<PhysicsGroupIndex> | undefined;
    set ignorePhysicsGroups(val: Array<PhysicsGroupIndex> | undefined);
    protected _physicsShape: PhysicsShape;
    get physicsShape(): PhysicsShape;
    set physicsShape(val: PhysicsShape);
    private _physics?;
    private _physicsRunning?;
    private _enablePhysics;
    enablePhysics(val?: "2d"): void;
    private _disablePhysics;
    disablePhysics(): void;
    get physics(): PhysicsOptions;
    set physics(val: PhysicsOptions);
}
