import EventLoopItem from "../../../api/core/EventLoopItem";
import AnimationManager from "./AnimationManager";
import guid from "@pinyinma/guid";
import { debounce } from "@lincode/utils";
const buildAnimationTracks = (val) => {
    const entries = Object.entries(val);
    let maxLength = 0;
    for (const [, { length }] of entries)
        length > maxLength && (maxLength = length);
    const duration = 1000;
    const timeStep = duration * 0.001 / maxLength;
    const result = {};
    for (const [name, values] of entries)
        result[name] = Object.fromEntries(values.map((v, i) => [(i * timeStep).toFixed(2), v]));
    return result;
};
export default class AnimationItem extends EventLoopItem {
    get animations() {
        var _a;
        return (_a = this.animationManagers) !== null && _a !== void 0 ? _a : (this.animationManagers = {});
    }
    set animations(val) {
        this.animationManagers = val;
    }
    createAnimation(name) {
        if (name in this.animations) {
            const animation = this.animations[name];
            if (typeof animation !== "string")
                return animation;
        }
        const animation = this.watch(new AnimationManager(name, this));
        this.animations[name] = animation;
        return animation;
    }
    async playAnimation(name, o) {
        var _a;
        this.animationPromises && await Promise.all(this.animationPromises);
        this.animationManager = name
            ? this.animations[name]
            : Object.values(this.animations)[0];
        (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.play(o);
    }
    stopAnimation() {
        var _a;
        (_a = this.animationManager) === null || _a === void 0 ? void 0 : _a.stop();
    }
    get animation() {
        var _a, _b;
        (_a = this._animation) !== null && _a !== void 0 ? _a : (this._animation = {});
        const buildAnimationTracksDebounced = debounce(buildAnimationTracks, 0, "trailingPromise");
        return (_b = this._animationProxy) !== null && _b !== void 0 ? _b : (this._animationProxy = new Proxy({}, {
            get: (_, prop) => {
                return this._animation[prop];
            },
            set: (_, prop, value) => {
                this._animation[prop] = value;
                buildAnimationTracksDebounced(this._animation).then(tracks => {
                    const name = guid + "animation";
                    this.createAnimation(name).setTracks(tracks);
                    this.playAnimation(name);
                });
                return true;
            }
        }));
    }
    set animation(val) {
        if (typeof val === "string") {
            this.playAnimation(val);
            this._animation = undefined;
            return;
        }
        this._animation = val;
        if (!val) {
            this.stopAnimation();
            return;
        }
        const tracks = buildAnimationTracks(val);
        const name = guid + "animation";
        this.createAnimation(name).setTracks(tracks);
        this.playAnimation(name);
    }
}
