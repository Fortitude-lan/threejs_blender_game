import { Resolvable } from "@lincode/promiselikes";
import { Group, Mesh, Object3D } from "three";
import ObjectManager from "./ObjectManager";
import ILoaded from "../../interface/ILoaded";
export default abstract class Loaded<T> extends ObjectManager<Mesh> implements ILoaded {
    protected loadedGroup: Group;
    constructor();
    protected loadedResolvable: Resolvable<Object3D<import("three").Event>>;
    protected abstract load(src: string): Promise<T>;
    protected abstract resolveLoaded(data: T): void;
    protected _src?: string;
    get src(): string | undefined;
    set src(src: string | undefined);
    private loadedHandle?;
    private _onLoad?;
    get onLoad(): (() => void) | undefined;
    set onLoad(cb: (() => void) | undefined);
    protected widthSet?: boolean;
    get width(): number;
    set width(val: number);
    protected heightSet?: boolean;
    get height(): number;
    set height(val: number);
    protected depthSet?: boolean;
    get depth(): number;
    set depth(val: number);
    get innerRotationX(): number;
    set innerRotationX(val: number);
    get innerRotationY(): number;
    set innerRotationY(val: number);
    get innerRotationZ(): number;
    set innerRotationZ(val: number);
    get innerX(): number;
    set innerX(val: number);
    get innerY(): number;
    set innerY(val: number);
    get innerZ(): number;
    set innerZ(val: number);
}
