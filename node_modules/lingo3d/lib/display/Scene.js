import Loaded from "./core/Loaded";
import deserialize from "./utils/deserialize";
import fitContent from "./utils/fitContent";
import loadJSON from "./utils/loaders/loadJSON";
import { Group } from "three";
import applySetup from "./utils/deserialize/applySetup";
export default class Scene extends Loaded {
    constructor() {
        super(...arguments);
        this.load = loadJSON;
    }
    applySetup() {
        this.setupNode && applySetup(this.setupNode);
    }
    resolveLoaded(data) {
        var _a;
        for (const node of data)
            if (node.type === "setup") {
                this.setupNode = node;
                break;
            }
        const loadedObject3d = new Group();
        const loadedResolvables = [];
        const parts = (_a = this.src) === null || _a === void 0 ? void 0 : _a.split("/");
        parts === null || parts === void 0 ? void 0 : parts.pop();
        for (const item of deserialize(data, parts === null || parts === void 0 ? void 0 : parts.join("/"), !this.visible, loadedResolvables))
            item && loadedObject3d.add(item.outerObject3d);
        this.loadedGroup.add(loadedObject3d);
        fitContent(this);
        Promise.all(loadedResolvables).then(() => this.loadedResolvable.resolve(loadedObject3d));
    }
}
