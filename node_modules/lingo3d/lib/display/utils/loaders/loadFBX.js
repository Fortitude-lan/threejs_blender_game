import { FBXLoader } from "three/examples/jsm/loaders/FBXLoader";
import { LinearEncoding } from "three";
import { forceGet } from "@lincode/utils";
import cloneSkinnedMesh from "../cloneSkinnedMesh";
import { decreaseLoadingCount, increaseLoadingCount } from "../../../states/useLoadingCount";
const cache = new Map();
const loader = new FBXLoader();
export default async (url) => {
    const group = await forceGet(cache, url, () => new Promise((resolve, reject) => {
        increaseLoadingCount();
        loader.load(url, group => {
            decreaseLoadingCount();
            group.traverse((child) => {
                var _a;
                ((_a = child.material) === null || _a === void 0 ? void 0 : _a.map) && (child.material.map.encoding = LinearEncoding);
                // child.castShadow = true
                // child.receiveShadow = true
            });
            resolve(group);
        }, undefined, () => {
            decreaseLoadingCount();
            reject();
        });
    }));
    return cloneSkinnedMesh(group);
};
