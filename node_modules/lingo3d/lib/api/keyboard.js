import { event } from "@lincode/events";
import { Group } from "three";
import { loop } from "../engine/eventLoop";
import EventLoopItem from "./core/EventLoopItem";
const [emitDown, onDown] = event();
const [emitUp, onUp] = event();
const [emitPress, onPress] = event();
const isPressed = new Set();
loop(() => isPressed.size > 0 && emitPress());
document.addEventListener("keydown", e => {
    const key = e.key.length === 1 ? e.key.toLowerCase() : e.key;
    isPressed.add(key);
    emitDown(key);
});
document.addEventListener("keyup", e => {
    const key = e.key.length === 1 ? e.key.toLowerCase() : e.key;
    isPressed.delete(key);
    emitUp(key);
});
export class Keyboard extends EventLoopItem {
    constructor() {
        super();
        this.outerObject3d = new Group();
        this.initOuterObject3d();
        this.watch(onPress(() => {
            if (!this.onKeyPress)
                return;
            for (const key of isPressed)
                this.onKeyPress(key);
        }));
        this.watch(onUp(key => { var _a; return (_a = this.onKeyUp) === null || _a === void 0 ? void 0 : _a.call(this, key); }));
        this.watch(onDown(key => { var _a; return (_a = this.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(this, key); }));
    }
}
export default new Keyboard();
