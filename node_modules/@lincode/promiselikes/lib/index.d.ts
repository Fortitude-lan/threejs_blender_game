import { Callback } from "@lincode/utils";
declare abstract class Thenable<T> implements PromiseLike<T> {
    private _cb;
    done?: boolean;
    private _value?;
    private _callbacks?;
    private _watched?;
    constructor(_cb?: Callback<T> | undefined);
    then(cb: Callback<T>): Cancellable;
    then(cb: Callback<T>): Cancellable;
    watch<Item extends Thenable<T>>(item: Item): Item;
    protected _resolve(val: T): this;
}
export declare class Resolvable<T = void> extends Thenable<T> {
    constructor(cb?: Callback<T>);
    resolve(val: T): this;
}
export declare class Cancellable<T = void> extends Thenable<T> {
    constructor(cb?: Callback<T>);
    cancel(val: T): this;
}
export declare class Disposable<T = void> extends Thenable<T> {
    constructor(cb?: Callback<T>);
    dispose(val: T): this;
}
export declare class Queue {
    private queue;
    private count;
    then(cb: () => void): Cancellable<void>;
    resolve(): this;
}
export {};
